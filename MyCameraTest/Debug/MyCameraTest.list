
MyCameraTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f18  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d24  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d74  08006d74  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006d74  08006d74  00016d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d7c  08006d7c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000010  08006d94  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006d94  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc25  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003795  00000000  00000000  0003cc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf0  00000000  00000000  000403f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa8  00000000  00000000  00041fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f965  00000000  00000000  00043a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df23  00000000  00000000  000633f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1577  00000000  00000000  00081318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014288f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000770c  00000000  00000000  001428e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000010 	.word	0x20000010
 8000154:	00000000 	.word	0x00000000
 8000158:	08006038 	.word	0x08006038

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000014 	.word	0x20000014
 8000174:	08006038 	.word	0x08006038

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <ArduCAM_Init>:
uint32_t length = 0;
uint8_t is_header= false ;
extern SPI_HandleTypeDef hspi1;

void ArduCAM_Init(byte model) 
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	  wrSensorReg8_8(0xff, 0x01);
 8000486:	2101      	movs	r1, #1
 8000488:	20ff      	movs	r0, #255	; 0xff
 800048a:	f000 f9cb 	bl	8000824 <wrSensorReg8_8>
      wrSensorReg8_8(0x12, 0x80);
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	2012      	movs	r0, #18
 8000492:	f000 f9c7 	bl	8000824 <wrSensorReg8_8>
      if(m_fmt == JPEG)
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <ArduCAM_Init+0x5c>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d114      	bne.n	80004c8 <ArduCAM_Init+0x4c>
      {
				wrSensorRegs8_8(OV2640_JPEG_INIT);
 800049e:	480f      	ldr	r0, [pc, #60]	; (80004dc <ArduCAM_Init+0x60>)
 80004a0:	f000 fa4e 	bl	8000940 <wrSensorRegs8_8>
				wrSensorRegs8_8(OV2640_YUV422);
 80004a4:	480e      	ldr	r0, [pc, #56]	; (80004e0 <ArduCAM_Init+0x64>)
 80004a6:	f000 fa4b 	bl	8000940 <wrSensorRegs8_8>
				wrSensorRegs8_8(OV2640_JPEG);
 80004aa:	480e      	ldr	r0, [pc, #56]	; (80004e4 <ArduCAM_Init+0x68>)
 80004ac:	f000 fa48 	bl	8000940 <wrSensorRegs8_8>
				wrSensorReg8_8(0xff, 0x01);
 80004b0:	2101      	movs	r1, #1
 80004b2:	20ff      	movs	r0, #255	; 0xff
 80004b4:	f000 f9b6 	bl	8000824 <wrSensorReg8_8>
				wrSensorReg8_8(0x15, 0x00);
 80004b8:	2100      	movs	r1, #0
 80004ba:	2015      	movs	r0, #21
 80004bc:	f000 f9b2 	bl	8000824 <wrSensorReg8_8>
				wrSensorRegs8_8(OV2640_320x240_JPEG);
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <ArduCAM_Init+0x6c>)
 80004c2:	f000 fa3d 	bl	8000940 <wrSensorRegs8_8>
      }
      else
      {
        wrSensorRegs8_8(OV2640_QVGA);
      }
}
 80004c6:	e002      	b.n	80004ce <ArduCAM_Init+0x52>
        wrSensorRegs8_8(OV2640_QVGA);
 80004c8:	4808      	ldr	r0, [pc, #32]	; (80004ec <ArduCAM_Init+0x70>)
 80004ca:	f000 fa39 	bl	8000940 <wrSensorRegs8_8>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000000 	.word	0x20000000
 80004dc:	08006374 	.word	0x08006374
 80004e0:	08006670 	.word	0x08006670
 80004e4:	08006698 	.word	0x08006698
 80004e8:	080067fc 	.word	0x080067fc
 80004ec:	0800606c 	.word	0x0800606c

080004f0 <CS_HIGH>:
//************************************************/
}

//Control the CS pin
void CS_HIGH(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
 	//GPIO_SetBits(CS_PORT,CS_PIN);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <CS_HIGH+0x14>)
 80004fc:	f001 ff36 	bl	800236c <HAL_GPIO_WritePin>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	48000400 	.word	0x48000400

08000508 <CS_LOW>:

void CS_LOW(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
 	//GPIO_ResetBits(CS_PORT,CS_PIN);
 	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <CS_LOW+0x14>)
 8000514:	f001 ff2a 	bl	800236c <HAL_GPIO_WritePin>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000400 	.word	0x48000400

08000520 <set_format>:

void set_format(byte fmt)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
  if (fmt == BMP)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d103      	bne.n	8000538 <set_format+0x18>
    m_fmt = BMP;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <set_format+0x28>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
  else
    m_fmt = JPEG;
}
 8000536:	e002      	b.n	800053e <set_format+0x1e>
    m_fmt = JPEG;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <set_format+0x28>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	20000000 	.word	0x20000000

0800054c <bus_read>:

uint8_t bus_read(int address)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	 uint8_t value;
	 uint8_t addr = address;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	73bb      	strb	r3, [r7, #14]
	 //CS_LOW();
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000560:	4815      	ldr	r0, [pc, #84]	; (80005b8 <bus_read+0x6c>)
 8000562:	f001 ff03 	bl	800236c <HAL_GPIO_WritePin>
	 //SPI1_ReadWriteByte(address);
	 us_delay(10);
 8000566:	200a      	movs	r0, #10
 8000568:	f000 fa68 	bl	8000a3c <us_delay>
	 HAL_SPI_Transmit(&hspi1, &addr, 1, 400);//TX addr
 800056c:	f107 010e 	add.w	r1, r7, #14
 8000570:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000574:	2201      	movs	r2, #1
 8000576:	4811      	ldr	r0, [pc, #68]	; (80005bc <bus_read+0x70>)
 8000578:	f003 fc36 	bl	8003de8 <HAL_SPI_Transmit>
	 //HAL_SPI_Receive(&hspi1, &value, 1, 10000);//Read dummy
	 //value = SPI1_ReadWriteByte(0x00);
	 HAL_SPI_Transmit(&hspi1, &addr, 1, 400);//Transmit Dummy
 800057c:	f107 010e 	add.w	r1, r7, #14
 8000580:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000584:	2201      	movs	r2, #1
 8000586:	480d      	ldr	r0, [pc, #52]	; (80005bc <bus_read+0x70>)
 8000588:	f003 fc2e 	bl	8003de8 <HAL_SPI_Transmit>
	 HAL_SPI_Receive(&hspi1, &value, 1, 10000);//Read data
 800058c:	f107 010f 	add.w	r1, r7, #15
 8000590:	f242 7310 	movw	r3, #10000	; 0x2710
 8000594:	2201      	movs	r2, #1
 8000596:	4809      	ldr	r0, [pc, #36]	; (80005bc <bus_read+0x70>)
 8000598:	f003 fdb6 	bl	8004108 <HAL_SPI_Receive>
	 us_delay(10);
 800059c:	200a      	movs	r0, #10
 800059e:	f000 fa4d 	bl	8000a3c <us_delay>
	 //CS_HIGH();
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <bus_read+0x6c>)
 80005aa:	f001 fedf 	bl	800236c <HAL_GPIO_WritePin>
	 return value;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	48000400 	.word	0x48000400
 80005bc:	20000088 	.word	0x20000088

080005c0 <bus_write>:

uint8_t bus_write(int address,int value)
{	
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
	//CS_LOW();
	HAL_StatusTypeDef status;
	uint8_t addr = address;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	73bb      	strb	r3, [r7, #14]
	uint8_t val = value;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005dc:	481f      	ldr	r0, [pc, #124]	; (800065c <bus_write+0x9c>)
 80005de:	f001 fec5 	bl	800236c <HAL_GPIO_WritePin>
	us_delay(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f000 fa2a 	bl	8000a3c <us_delay>
	status = HAL_SPI_Transmit(&hspi1, &addr, 1, 400);
 80005e8:	f107 010e 	add.w	r1, r7, #14
 80005ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80005f0:	2201      	movs	r2, #1
 80005f2:	481b      	ldr	r0, [pc, #108]	; (8000660 <bus_write+0xa0>)
 80005f4:	f003 fbf8 	bl	8003de8 <HAL_SPI_Transmit>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Receive(&hspi1, &addr, 1, 400);
 80005fc:	f107 010e 	add.w	r1, r7, #14
 8000600:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000604:	2201      	movs	r2, #1
 8000606:	4816      	ldr	r0, [pc, #88]	; (8000660 <bus_write+0xa0>)
 8000608:	f003 fd7e 	bl	8004108 <HAL_SPI_Receive>
 800060c:	4603      	mov	r3, r0
 800060e:	73fb      	strb	r3, [r7, #15]
	//SPI1_ReadWriteByte(address);
	us_delay(10);
 8000610:	200a      	movs	r0, #10
 8000612:	f000 fa13 	bl	8000a3c <us_delay>
	status = HAL_SPI_Transmit(&hspi1, &val, 1, 400);
 8000616:	f107 010d 	add.w	r1, r7, #13
 800061a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800061e:	2201      	movs	r2, #1
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <bus_write+0xa0>)
 8000622:	f003 fbe1 	bl	8003de8 <HAL_SPI_Transmit>
 8000626:	4603      	mov	r3, r0
 8000628:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Receive(&hspi1, &addr, 1, 400);
 800062a:	f107 010e 	add.w	r1, r7, #14
 800062e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000632:	2201      	movs	r2, #1
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <bus_write+0xa0>)
 8000636:	f003 fd67 	bl	8004108 <HAL_SPI_Receive>
 800063a:	4603      	mov	r3, r0
 800063c:	73fb      	strb	r3, [r7, #15]
	//SPI1_ReadWriteByte(value);
	us_delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f000 f9fc 	bl	8000a3c <us_delay>
	//CS_HIGH();
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <bus_write+0x9c>)
 800064c:	f001 fe8e 	bl	800236c <HAL_GPIO_WritePin>
	return 1;
 8000650:	2301      	movs	r3, #1
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	48000400 	.word	0x48000400
 8000660:	20000088 	.word	0x20000088

08000664 <read_reg>:

uint8_t read_reg(uint8_t addr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	data = bus_read(addr & 0x7F);//Makes sure cmd is read cmd
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff69 	bl	800054c <bus_read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
	return data;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <write_reg>:
void write_reg(uint8_t addr, uint8_t data)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
	 bus_write(addr | 0x80, data); //Makes sure that the cmd is a write cmd (bit 7 is 1)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f7ff ff8a 	bl	80005c0 <bus_write>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <set_fifo_burst>:
	uint8_t data;
	data = bus_read(SINGLE_FIFO_READ);
	return data;
}
void set_fifo_burst()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	SPI1_ReadWriteByte(BURST_FIFO_READ);
 80006b8:	203c      	movs	r0, #60	; 0x3c
 80006ba:	f000 fe35 	bl	8001328 <SPI1_ReadWriteByte>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <flush_fifo>:


void flush_fifo(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 80006c6:	2101      	movs	r1, #1
 80006c8:	2004      	movs	r0, #4
 80006ca:	f7ff ffdd 	bl	8000688 <write_reg>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <start_capture>:

void start_capture(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
 80006d6:	2102      	movs	r1, #2
 80006d8:	2004      	movs	r0, #4
 80006da:	f7ff ffd5 	bl	8000688 <write_reg>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <clear_fifo_flag>:

void clear_fifo_flag(void )
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 80006e6:	2101      	movs	r1, #1
 80006e8:	2004      	movs	r0, #4
 80006ea:	f7ff ffcd 	bl	8000688 <write_reg>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <read_fifo_length>:

uint32_t read_fifo_length(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b084      	sub	sp, #16
 80006f6:	af00      	add	r7, sp, #0
	uint32_t len1,len2,len3,len=0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
	len1 = read_reg(FIFO_SIZE1);
 80006fc:	2042      	movs	r0, #66	; 0x42
 80006fe:	f7ff ffb1 	bl	8000664 <read_reg>
 8000702:	4603      	mov	r3, r0
 8000704:	60bb      	str	r3, [r7, #8]
	len2 = read_reg(FIFO_SIZE2);
 8000706:	2043      	movs	r0, #67	; 0x43
 8000708:	f7ff ffac 	bl	8000664 <read_reg>
 800070c:	4603      	mov	r3, r0
 800070e:	607b      	str	r3, [r7, #4]
	len3 = read_reg(FIFO_SIZE3) & 0x7f;
 8000710:	2044      	movs	r0, #68	; 0x44
 8000712:	f7ff ffa7 	bl	8000664 <read_reg>
 8000716:	4603      	mov	r3, r0
 8000718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800071c:	603b      	str	r3, [r7, #0]
	len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	041a      	lsls	r2, r3, #16
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	431a      	orrs	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4313      	orrs	r3, r2
 800072c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000730:	60fb      	str	r3, [r7, #12]
	return len;	
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <get_bit>:
	write_reg(addr, temp & (~bit));
}

//Get corresponding bit status
uint8_t get_bit(uint8_t addr, uint8_t bit)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
  uint8_t temp;
  temp = read_reg(addr);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff88 	bl	8000664 <read_reg>
 8000754:	4603      	mov	r3, r0
 8000756:	73fb      	strb	r3, [r7, #15]
  temp = temp & bit;
 8000758:	7bfa      	ldrb	r2, [r7, #15]
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	4013      	ands	r3, r2
 800075e:	73fb      	strb	r3, [r7, #15]
  return temp;
 8000760:	7bfb      	ldrb	r3, [r7, #15]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <OV2640_set_JPEG_size>:
  }
}


void OV2640_set_JPEG_size(uint8_t size)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	switch(size)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b08      	cmp	r3, #8
 800077a:	d839      	bhi.n	80007f0 <OV2640_set_JPEG_size+0x84>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <OV2640_set_JPEG_size+0x18>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	080007a9 	.word	0x080007a9
 8000788:	080007b1 	.word	0x080007b1
 800078c:	080007b9 	.word	0x080007b9
 8000790:	080007c1 	.word	0x080007c1
 8000794:	080007c9 	.word	0x080007c9
 8000798:	080007d1 	.word	0x080007d1
 800079c:	080007d9 	.word	0x080007d9
 80007a0:	080007e1 	.word	0x080007e1
 80007a4:	080007e9 	.word	0x080007e9
	{
		case OV2640_160x120:
			wrSensorRegs8_8(OV2640_160x120_JPEG);
 80007a8:	4815      	ldr	r0, [pc, #84]	; (8000800 <OV2640_set_JPEG_size+0x94>)
 80007aa:	f000 f8c9 	bl	8000940 <wrSensorRegs8_8>
			break;
 80007ae:	e023      	b.n	80007f8 <OV2640_set_JPEG_size+0x8c>
		case OV2640_176x144:
			wrSensorRegs8_8(OV2640_176x144_JPEG);
 80007b0:	4814      	ldr	r0, [pc, #80]	; (8000804 <OV2640_set_JPEG_size+0x98>)
 80007b2:	f000 f8c5 	bl	8000940 <wrSensorRegs8_8>
			break;
 80007b6:	e01f      	b.n	80007f8 <OV2640_set_JPEG_size+0x8c>
		case OV2640_320x240:
			wrSensorRegs8_8(OV2640_320x240_JPEG);
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <OV2640_set_JPEG_size+0x9c>)
 80007ba:	f000 f8c1 	bl	8000940 <wrSensorRegs8_8>
			break;
 80007be:	e01b      	b.n	80007f8 <OV2640_set_JPEG_size+0x8c>
		case OV2640_352x288:
	  	wrSensorRegs8_8(OV2640_352x288_JPEG);
 80007c0:	4812      	ldr	r0, [pc, #72]	; (800080c <OV2640_set_JPEG_size+0xa0>)
 80007c2:	f000 f8bd 	bl	8000940 <wrSensorRegs8_8>
			break;
 80007c6:	e017      	b.n	80007f8 <OV2640_set_JPEG_size+0x8c>
		case OV2640_640x480:
			wrSensorRegs8_8(OV2640_640x480_JPEG);
 80007c8:	4811      	ldr	r0, [pc, #68]	; (8000810 <OV2640_set_JPEG_size+0xa4>)
 80007ca:	f000 f8b9 	bl	8000940 <wrSensorRegs8_8>
			break;
 80007ce:	e013      	b.n	80007f8 <OV2640_set_JPEG_size+0x8c>
		case OV2640_800x600:
			wrSensorRegs8_8(OV2640_800x600_JPEG);
 80007d0:	4810      	ldr	r0, [pc, #64]	; (8000814 <OV2640_set_JPEG_size+0xa8>)
 80007d2:	f000 f8b5 	bl	8000940 <wrSensorRegs8_8>
			break;
 80007d6:	e00f      	b.n	80007f8 <OV2640_set_JPEG_size+0x8c>
		case OV2640_1024x768:
			wrSensorRegs8_8(OV2640_1024x768_JPEG);
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <OV2640_set_JPEG_size+0xac>)
 80007da:	f000 f8b1 	bl	8000940 <wrSensorRegs8_8>
			break;
 80007de:	e00b      	b.n	80007f8 <OV2640_set_JPEG_size+0x8c>
		case OV2640_1280x1024:
			wrSensorRegs8_8(OV2640_1280x1024_JPEG);
 80007e0:	480e      	ldr	r0, [pc, #56]	; (800081c <OV2640_set_JPEG_size+0xb0>)
 80007e2:	f000 f8ad 	bl	8000940 <wrSensorRegs8_8>
			break;
 80007e6:	e007      	b.n	80007f8 <OV2640_set_JPEG_size+0x8c>
		case OV2640_1600x1200:
			wrSensorRegs8_8(OV2640_1600x1200_JPEG);
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <OV2640_set_JPEG_size+0xb4>)
 80007ea:	f000 f8a9 	bl	8000940 <wrSensorRegs8_8>
			break;
 80007ee:	e003      	b.n	80007f8 <OV2640_set_JPEG_size+0x8c>
		default:
			wrSensorRegs8_8(OV2640_320x240_JPEG);
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <OV2640_set_JPEG_size+0x9c>)
 80007f2:	f000 f8a5 	bl	8000940 <wrSensorRegs8_8>
			break;
 80007f6:	bf00      	nop
	}
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	080066bc 	.word	0x080066bc
 8000804:	0800675c 	.word	0x0800675c
 8000808:	080067fc 	.word	0x080067fc
 800080c:	0800689c 	.word	0x0800689c
 8000810:	0800693c 	.word	0x0800693c
 8000814:	080069e0 	.word	0x080069e0
 8000818:	08006a84 	.word	0x08006a84
 800081c:	08006b20 	.word	0x08006b20
 8000820:	08006bc4 	.word	0x08006bc4

08000824 <wrSensorReg8_8>:

byte wrSensorReg8_8(int regID, int regDat)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
	us_delay(5);
 800082e:	2005      	movs	r0, #5
 8000830:	f000 f904 	bl	8000a3c <us_delay>
	sccb_bus_start();                          
 8000834:	f000 fc6c 	bl	8001110 <sccb_bus_start>
	if(sccb_bus_write_byte(sensor_addr) == 0)         
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <wrSensorReg8_8+0x78>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fcd7 	bl	80011f0 <sccb_bus_write_byte>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d103      	bne.n	8000850 <wrSensorReg8_8+0x2c>
	{
		sccb_bus_stop();                        
 8000848:	f000 fc8a 	bl	8001160 <sccb_bus_stop>
		return 1;
 800084c:	2301      	movs	r3, #1
 800084e:	e020      	b.n	8000892 <wrSensorReg8_8+0x6e>
	}
	us_delay(5);
 8000850:	2005      	movs	r0, #5
 8000852:	f000 f8f3 	bl	8000a3c <us_delay>
	if(sccb_bus_write_byte(regID) == 0)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fcc8 	bl	80011f0 <sccb_bus_write_byte>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d103      	bne.n	800086e <wrSensorReg8_8+0x4a>
	{
		sccb_bus_stop();                              
 8000866:	f000 fc7b 	bl	8001160 <sccb_bus_stop>
		return 2;                                       
 800086a:	2302      	movs	r3, #2
 800086c:	e011      	b.n	8000892 <wrSensorReg8_8+0x6e>
	}
	us_delay(5);
 800086e:	2005      	movs	r0, #5
 8000870:	f000 f8e4 	bl	8000a3c <us_delay>
	if(sccb_bus_write_byte(regDat)==0)                    
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fcb9 	bl	80011f0 <sccb_bus_write_byte>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d103      	bne.n	800088c <wrSensorReg8_8+0x68>
	{
		sccb_bus_stop();                                 
 8000884:	f000 fc6c 	bl	8001160 <sccb_bus_stop>
		return 3;
 8000888:	2303      	movs	r3, #3
 800088a:	e002      	b.n	8000892 <wrSensorReg8_8+0x6e>
	}
	sccb_bus_stop();                                    
 800088c:	f000 fc68 	bl	8001160 <sccb_bus_stop>
	return 0;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000002d 	.word	0x2000002d

080008a0 <rdSensorReg8_8>:


byte rdSensorReg8_8(uint8_t regID, uint8_t* regDat)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
	us_delay(10);
 80008ac:	200a      	movs	r0, #10
 80008ae:	f000 f8c5 	bl	8000a3c <us_delay>
	
	sccb_bus_start();
 80008b2:	f000 fc2d 	bl	8001110 <sccb_bus_start>
	if(sccb_bus_write_byte(sensor_addr) == 0)                 
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <rdSensorReg8_8+0x9c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fc98 	bl	80011f0 <sccb_bus_write_byte>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d103      	bne.n	80008ce <rdSensorReg8_8+0x2e>
	{
		sccb_bus_stop();                                
 80008c6:	f000 fc4b 	bl	8001160 <sccb_bus_stop>
		//goto start;
		return 1;                                        
 80008ca:	2301      	movs	r3, #1
 80008cc:	e031      	b.n	8000932 <rdSensorReg8_8+0x92>
	}
	us_delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f000 f8b4 	bl	8000a3c <us_delay>
	if(sccb_bus_write_byte(regID)==0)//ID
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fc8a 	bl	80011f0 <sccb_bus_write_byte>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d103      	bne.n	80008ea <rdSensorReg8_8+0x4a>
	{
		sccb_bus_stop();                                  
 80008e2:	f000 fc3d 	bl	8001160 <sccb_bus_stop>
		//goto start;
		return 2;                                       
 80008e6:	2302      	movs	r3, #2
 80008e8:	e023      	b.n	8000932 <rdSensorReg8_8+0x92>
	}
	sccb_bus_stop();                                   
 80008ea:	f000 fc39 	bl	8001160 <sccb_bus_stop>
	us_delay(10);
 80008ee:	200a      	movs	r0, #10
 80008f0:	f000 f8a4 	bl	8000a3c <us_delay>
	sccb_bus_start();
 80008f4:	f000 fc0c 	bl	8001110 <sccb_bus_start>
	if(sccb_bus_write_byte(sensor_addr|0x01)==0)                    
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <rdSensorReg8_8+0x9c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fc74 	bl	80011f0 <sccb_bus_write_byte>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d103      	bne.n	8000916 <rdSensorReg8_8+0x76>
	{
		sccb_bus_stop();                                   
 800090e:	f000 fc27 	bl	8001160 <sccb_bus_stop>
		//goto start;
		return 3;                                          
 8000912:	2303      	movs	r3, #3
 8000914:	e00d      	b.n	8000932 <rdSensorReg8_8+0x92>
	}
	us_delay(10);
 8000916:	200a      	movs	r0, #10
 8000918:	f000 f890 	bl	8000a3c <us_delay>
	*regDat = sccb_bus_read_byte();                    
 800091c:	f000 fcc6 	bl	80012ac <sccb_bus_read_byte>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	701a      	strb	r2, [r3, #0]
	sccb_bus_send_noack();                                
 8000928:	f000 fc3a 	bl	80011a0 <sccb_bus_send_noack>
	sccb_bus_stop();                                      
 800092c:	f000 fc18 	bl	8001160 <sccb_bus_stop>
	return 0;                
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000002d 	.word	0x2000002d

08000940 <wrSensorRegs8_8>:

//I2C Array Write 8bit address, 8bit data
int wrSensorRegs8_8(const struct sensor_reg reglist[])
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  int err = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  uint16_t reg_addr = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	827b      	strh	r3, [r7, #18]
  uint16_t reg_val = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	823b      	strh	r3, [r7, #16]
  const struct sensor_reg *next = reglist;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	60fb      	str	r3, [r7, #12]
  while ((reg_addr != 0xff) | (reg_val != 0xff))
 8000958:	e010      	b.n	800097c <wrSensorRegs8_8+0x3c>
  {
    reg_addr = next->reg;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	827b      	strh	r3, [r7, #18]
    reg_val = next->val;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	885b      	ldrh	r3, [r3, #2]
 8000964:	823b      	strh	r3, [r7, #16]
    err = wrSensorReg8_8(reg_addr, reg_val);
 8000966:	8a7b      	ldrh	r3, [r7, #18]
 8000968:	8a3a      	ldrh	r2, [r7, #16]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff59 	bl	8000824 <wrSensorReg8_8>
 8000972:	4603      	mov	r3, r0
 8000974:	617b      	str	r3, [r7, #20]
 //   us_delay(400);
    next++;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3304      	adds	r3, #4
 800097a:	60fb      	str	r3, [r7, #12]
  while ((reg_addr != 0xff) | (reg_val != 0xff))
 800097c:	8a7b      	ldrh	r3, [r7, #18]
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	bf14      	ite	ne
 8000982:	2301      	movne	r3, #1
 8000984:	2300      	moveq	r3, #0
 8000986:	b2da      	uxtb	r2, r3
 8000988:	8a3b      	ldrh	r3, [r7, #16]
 800098a:	2bff      	cmp	r3, #255	; 0xff
 800098c:	bf14      	ite	ne
 800098e:	2301      	movne	r3, #1
 8000990:	2300      	moveq	r3, #0
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1de      	bne.n	800095a <wrSensorRegs8_8+0x1a>
  }

  return err;
 800099c:	697b      	ldr	r3, [r7, #20]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <wrSensorReg16_8>:

byte wrSensorReg16_8(int regID, int regDat)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	sccb_bus_start();
 80009b2:	f000 fbad 	bl	8001110 <sccb_bus_start>
	if(0==sccb_bus_write_byte(sensor_addr))
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <wrSensorReg16_8+0x90>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fc18 	bl	80011f0 <sccb_bus_write_byte>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d103      	bne.n	80009ce <wrSensorReg16_8+0x26>
	{
		sccb_bus_stop();
 80009c6:	f000 fbcb 	bl	8001160 <sccb_bus_stop>
		return(0);
 80009ca:	2300      	movs	r3, #0
 80009cc:	e030      	b.n	8000a30 <wrSensorReg16_8+0x88>
	}
	us_delay(5);
 80009ce:	2005      	movs	r0, #5
 80009d0:	f000 f834 	bl	8000a3c <us_delay>
  if(0==sccb_bus_write_byte(regID>>8))
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	121b      	asrs	r3, r3, #8
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fc08 	bl	80011f0 <sccb_bus_write_byte>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d103      	bne.n	80009ee <wrSensorReg16_8+0x46>
	{
		sccb_bus_stop();
 80009e6:	f000 fbbb 	bl	8001160 <sccb_bus_stop>
		return(0);
 80009ea:	2300      	movs	r3, #0
 80009ec:	e020      	b.n	8000a30 <wrSensorReg16_8+0x88>
	}
	us_delay(5);
 80009ee:	2005      	movs	r0, #5
 80009f0:	f000 f824 	bl	8000a3c <us_delay>
  if(0==sccb_bus_write_byte(regID))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fbf9 	bl	80011f0 <sccb_bus_write_byte>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d103      	bne.n	8000a0c <wrSensorReg16_8+0x64>
	{
		sccb_bus_stop();
 8000a04:	f000 fbac 	bl	8001160 <sccb_bus_stop>
		return(0);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	e011      	b.n	8000a30 <wrSensorReg16_8+0x88>
	}
	us_delay(5);
 8000a0c:	2005      	movs	r0, #5
 8000a0e:	f000 f815 	bl	8000a3c <us_delay>
  if(0==sccb_bus_write_byte(regDat))
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fbea 	bl	80011f0 <sccb_bus_write_byte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d103      	bne.n	8000a2a <wrSensorReg16_8+0x82>
	{
		sccb_bus_stop();
 8000a22:	f000 fb9d 	bl	8001160 <sccb_bus_stop>
		return(0);
 8000a26:	2300      	movs	r3, #0
 8000a28:	e002      	b.n	8000a30 <wrSensorReg16_8+0x88>
	}
  sccb_bus_stop();
 8000a2a:	f000 fb99 	bl	8001160 <sccb_bus_stop>
	
  return(1);
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000002d 	.word	0x2000002d

08000a3c <us_delay>:
#include "delay.h"
extern TIM_HandleTypeDef htim1;


void us_delay(uint16_t us)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <us_delay+0x2c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us); //May want to change this to enable an interrupt, so that we aren't blocking. 1us = 48 sys clk cycles
 8000a4e:	bf00      	nop
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <us_delay+0x2c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d3f9      	bcc.n	8000a50 <us_delay+0x14>
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000210 	.word	0x20000210

08000a6c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a7c:	f023 0218 	bic.w	r2, r3, #24
 8000a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b085      	sub	sp, #20
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
	...

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t vid, pid, temp ;
	uint8_t Camera_WorkMode = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	71fb      	strb	r3, [r7, #7]
	uint8_t start_shoot = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71bb      	strb	r3, [r7, #6]
	uint8_t stop = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0a:	f000 ff1f 	bl	800194c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0e:	f000 f865 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b12:	f000 fa47 	bl	8000fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b16:	f000 fa2b 	bl	8000f70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b1a:	f000 f9dd 	bl	8000ed8 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000b1e:	f000 f8cb 	bl	8000cb8 <MX_I2C3_Init>
  MX_SPI2_Init();
 8000b22:	f000 f947 	bl	8000db4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000b26:	f000 f983 	bl	8000e30 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000b2a:	f000 f905 	bl	8000d38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000b2e:	4827      	ldr	r0, [pc, #156]	; (8000bcc <main+0xd4>)
 8000b30:	f004 f9cc 	bl	8004ecc <HAL_TIM_Base_Start>

  do//ACK CMD SPI OK
  {
	write_reg(ARDUCHIP_TEST1, 0x95);
 8000b34:	2195      	movs	r1, #149	; 0x95
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff fda6 	bl	8000688 <write_reg>
	temp = read_reg(ARDUCHIP_TEST1);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fd91 	bl	8000664 <read_reg>
 8000b42:	4603      	mov	r3, r0
 8000b44:	713b      	strb	r3, [r7, #4]
	HAL_Delay(1000);
 8000b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b4a:	f000 ff75 	bl	8001a38 <HAL_Delay>
  }
  while(temp != 0x55);
 8000b4e:	793b      	ldrb	r3, [r7, #4]
 8000b50:	2b55      	cmp	r3, #85	; 0x55
 8000b52:	d1ef      	bne.n	8000b34 <main+0x3c>


	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	481d      	ldr	r0, [pc, #116]	; (8000bd0 <main+0xd8>)
 8000b5c:	f001 fc06 	bl	800236c <HAL_GPIO_WritePin>
	sccb_bus_init();//I do not know where this goes.
 8000b60:	f000 fa8d 	bl	800107e <sccb_bus_init>

  do//Probs not needed, just for determining that OV2640 is connected
  {
	sensor_addr = 0x60;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <main+0xdc>)
 8000b66:	2260      	movs	r2, #96	; 0x60
 8000b68:	701a      	strb	r2, [r3, #0]
	wrSensorReg8_8(0xff, 0x01);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	20ff      	movs	r0, #255	; 0xff
 8000b6e:	f7ff fe59 	bl	8000824 <wrSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
 8000b72:	1cfb      	adds	r3, r7, #3
 8000b74:	4619      	mov	r1, r3
 8000b76:	200a      	movs	r0, #10
 8000b78:	f7ff fe92 	bl	80008a0 <rdSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
 8000b7c:	1cbb      	adds	r3, r7, #2
 8000b7e:	4619      	mov	r1, r3
 8000b80:	200b      	movs	r0, #11
 8000b82:	f7ff fe8d 	bl	80008a0 <rdSensorReg8_8>
  }
  while ((vid != 0x26 ) && (( pid != 0x41 ) || ( pid != 0x42 )));
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	2b26      	cmp	r3, #38	; 0x26
 8000b8a:	d005      	beq.n	8000b98 <main+0xa0>
 8000b8c:	78bb      	ldrb	r3, [r7, #2]
 8000b8e:	2b41      	cmp	r3, #65	; 0x41
 8000b90:	d1e8      	bne.n	8000b64 <main+0x6c>
 8000b92:	78bb      	ldrb	r3, [r7, #2]
 8000b94:	2b42      	cmp	r3, #66	; 0x42
 8000b96:	d1e5      	bne.n	8000b64 <main+0x6c>
  sensor_model =  OV2640 ;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <main+0xe0>)
 8000b9a:	2205      	movs	r2, #5
 8000b9c:	701a      	strb	r2, [r3, #0]
  ArduCAM_Init(OV2640);
 8000b9e:	2005      	movs	r0, #5
 8000ba0:	f7ff fc6c 	bl	800047c <ArduCAM_Init>
  OV2640_set_JPEG_size(OV2640_320x240);//Want this one for TFT
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f7ff fde1 	bl	800076c <OV2640_set_JPEG_size>
  set_format(BMP);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fcb8 	bl	8000520 <set_format>
  //ArduCAM_Init(sensor_model);
  wrSensorReg16_8(0x3818,0x81);//Need wr and rd stuff
 8000bb0:	2181      	movs	r1, #129	; 0x81
 8000bb2:	f643 0018 	movw	r0, #14360	; 0x3818
 8000bb6:	f7ff fef7 	bl	80009a8 <wrSensorReg16_8>
  wrSensorReg16_8(0x3621,0xa7);
 8000bba:	21a7      	movs	r1, #167	; 0xa7
 8000bbc:	f243 6021 	movw	r0, #13857	; 0x3621
 8000bc0:	f7ff fef2 	bl	80009a8 <wrSensorReg16_8>
  StartBMPcapture();//This will probs go in while loop. Need BMP capture stuff
 8000bc4:	f000 fbca 	bl	800135c <StartBMPcapture>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <main+0xd0>
 8000bca:	bf00      	nop
 8000bcc:	20000210 	.word	0x20000210
 8000bd0:	48000400 	.word	0x48000400
 8000bd4:	2000002d 	.word	0x2000002d
 8000bd8:	2000002c 	.word	0x2000002c

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09a      	sub	sp, #104	; 0x68
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	2248      	movs	r2, #72	; 0x48
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f005 fa1c 	bl	8006028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]
 8000bfe:	615a      	str	r2, [r3, #20]
 8000c00:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c02:	f001 fcef 	bl	80025e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff ff30 	bl	8000a6c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <SystemClock_Config+0xd8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c14:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <SystemClock_Config+0xd8>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <SystemClock_Config+0xd8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000c28:	2326      	movs	r3, #38	; 0x26
 8000c2a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c2c:	2381      	movs	r3, #129	; 0x81
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c36:	2301      	movs	r3, #1
 8000c38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c3a:	2340      	movs	r3, #64	; 0x40
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000c42:	23b0      	movs	r3, #176	; 0xb0
 8000c44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c46:	2302      	movs	r3, #2
 8000c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8000c52:	2306      	movs	r3, #6
 8000c54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c5c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000c62:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8000c66:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0320 	add.w	r3, r7, #32
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 ff8b 	bl	8002b88 <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000c78:	f000 f9fc 	bl	8001074 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000c7c:	234f      	movs	r3, #79	; 0x4f
 8000c7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000c8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 faf6 	bl	800328c <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000ca6:	f000 f9e5 	bl	8001074 <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3768      	adds	r7, #104	; 0x68
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	58000400 	.word	0x58000400

08000cb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C3_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C3_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000cf4:	f001 fb51 	bl	800239a <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f000 f9b9 	bl	8001074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000d06:	f001 fbd7 	bl	80024b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f000 f9b0 	bl	8001074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_I2C3_Init+0x74>)
 8000d18:	f001 fc18 	bl	800254c <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 f9a7 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000034 	.word	0x20000034
 8000d30:	40005c00 	.word	0x40005c00
 8000d34:	20303e5d 	.word	0x20303e5d

08000d38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <MX_SPI1_Init+0x78>)
 8000d40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d86:	2207      	movs	r2, #7
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d92:	2208      	movs	r2, #8
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d98:	f002 ff52 	bl	8003c40 <HAL_SPI_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 f967 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000088 	.word	0x20000088
 8000db0:	40013000 	.word	0x40013000

08000db4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000dba:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <MX_SPI2_Init+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000dc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000dce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dd2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000e02:	2207      	movs	r2, #7
 8000e04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000e0e:	2208      	movs	r2, #8
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_SPI2_Init+0x74>)
 8000e14:	f002 ff14 	bl	8003c40 <HAL_SPI_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e1e:	f000 f929 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000ec 	.word	0x200000ec
 8000e2c:	40003800 	.word	0x40003800

08000e30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000e50:	4a20      	ldr	r2, [pc, #128]	; (8000ed4 <MX_TIM1_Init+0xa4>)
 8000e52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000e56:	220b      	movs	r2, #11
 8000e58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e7a:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000e7c:	f003 ffce 	bl	8004e1c <HAL_TIM_Base_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e86:	f000 f8f5 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000e98:	f004 f85c 	bl	8004f54 <HAL_TIM_ConfigClockSource>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ea2:	f000 f8e7 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000eb8:	f004 fa10 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ec2:	f000 f8d7 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000210 	.word	0x20000210
 8000ed4:	40012c00 	.word	0x40012c00

08000ed8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000ede:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000ee4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f20:	4811      	ldr	r0, [pc, #68]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000f22:	f004 fa5a 	bl	80053da <HAL_UART_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f2c:	f000 f8a2 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f30:	2100      	movs	r1, #0
 8000f32:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000f34:	f004 ff8b 	bl	8005e4e <HAL_UARTEx_SetTxFifoThreshold>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f3e:	f000 f899 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4808      	ldr	r0, [pc, #32]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000f46:	f004 ffc0 	bl	8005eca <HAL_UARTEx_SetRxFifoThreshold>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f50:	f000 f890 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_USART2_UART_Init+0x90>)
 8000f56:	f004 ff42 	bl	8005dde <HAL_UARTEx_DisableFifoMode>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f60:	f000 f888 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000025c 	.word	0x2000025c
 8000f6c:	40004400 	.word	0x40004400

08000f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f74:	2004      	movs	r0, #4
 8000f76:	f7ff fd8e 	bl	8000a96 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff fd8b 	bl	8000a96 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	200b      	movs	r0, #11
 8000f86:	f000 fe52 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f8a:	200b      	movs	r0, #11
 8000f8c:	f000 fe69 	bl	8001c62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	200c      	movs	r0, #12
 8000f96:	f000 fe4a 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f9a:	200c      	movs	r0, #12
 8000f9c:	f000 fe61 	bl	8001c62 <HAL_NVIC_EnableIRQ>

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fd84 	bl	8000ac6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f7ff fd81 	bl	8000ac6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f7ff fd7e 	bl	8000ac6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|CS_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8000fd0:	4826      	ldr	r0, [pc, #152]	; (800106c <MX_GPIO_Init+0xc8>)
 8000fd2:	f001 f9cb 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2138      	movs	r1, #56	; 0x38
 8000fda:	4825      	ldr	r0, [pc, #148]	; (8001070 <MX_GPIO_Init+0xcc>)
 8000fdc:	f001 f9c6 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000fe0:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000fe4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481d      	ldr	r0, [pc, #116]	; (800106c <MX_GPIO_Init+0xc8>)
 8000ff8:	f001 f858 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4816      	ldr	r0, [pc, #88]	; (800106c <MX_GPIO_Init+0xc8>)
 8001014:	f001 f84a 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8001018:	2338      	movs	r3, #56	; 0x38
 800101a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4810      	ldr	r0, [pc, #64]	; (8001070 <MX_GPIO_Init+0xcc>)
 800102e:	f001 f83d 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8001032:	2303      	movs	r3, #3
 8001034:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001036:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800103a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103c:	2301      	movs	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f001 f830 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 800104c:	2340      	movs	r3, #64	; 0x40
 800104e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001050:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001054:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001056:	2301      	movs	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_GPIO_Init+0xcc>)
 8001060:	f001 f824 	bl	80020ac <HAL_GPIO_Init>

}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	48000400 	.word	0x48000400
 8001070:	48000800 	.word	0x48000800

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107c:	e7fe      	b.n	800107c <Error_Handler+0x8>

0800107e <sccb_bus_init>:
  * @brief  init i2c bus
  * @param  None
  * @retval None
  */
void sccb_bus_init(void)//Once GPIO is gone, this turns into sccb_data_out();. May just want to replace-all
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;			//Port B Pin 10
 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //Push Pull (Normal Output, not open drain)
 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 	GPIO_SetBits(GPIOB,GPIO_Pin_10);	*/
	sccb_data_out();
 8001082:	f000 f823 	bl	80010cc <sccb_data_out>

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <sccb_data_in>:


void sccb_data_in(void)//Replace sccb_data_in()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};//Created by ChatGPT, may not be correct
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = I2C3_SDA_Pin; // SCCB data pins
 80010a0:	2310      	movs	r3, #16
 80010a2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(I2C3_SDA_Port, &GPIO_InitStruct);
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <sccb_data_in+0x38>)
 80010b2:	f000 fffb 	bl	80020ac <HAL_GPIO_Init>
	sccb_state = 1;
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <sccb_data_in+0x3c>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	48000400 	.word	0x48000400
 80010c8:	200002f0 	.word	0x200002f0

080010cc <sccb_data_out>:
 * how it is connected to the Arducam module.
 *
 * Would be worth checking the arduino equivalent.
 * */
void sccb_data_out(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};//Created by ChatGPT
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = I2C3_SDA_Pin; // SCCB data pins.
 80010e0:	2310      	movs	r3, #16
 80010e2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(I2C3_SDA_Port, &GPIO_InitStruct);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <sccb_data_out+0x3c>)
 80010f6:	f000 ffd9 	bl	80020ac <HAL_GPIO_Init>
	sccb_state = 0;
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <sccb_data_out+0x40>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	48000400 	.word	0x48000400
 800110c:	200002f0 	.word	0x200002f0

08001110 <sccb_bus_start>:


void sccb_bus_start(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    SCCB_SID_H();             
 8001114:	2201      	movs	r2, #1
 8001116:	2110      	movs	r1, #16
 8001118:	4810      	ldr	r0, [pc, #64]	; (800115c <sccb_bus_start+0x4c>)
 800111a:	f001 f927 	bl	800236c <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fc8c 	bl	8000a3c <us_delay>
    SCCB_SIC_H();	           
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112a:	480c      	ldr	r0, [pc, #48]	; (800115c <sccb_bus_start+0x4c>)
 800112c:	f001 f91e 	bl	800236c <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fc83 	bl	8000a3c <us_delay>
    SCCB_SID_L();
 8001136:	2200      	movs	r2, #0
 8001138:	2110      	movs	r1, #16
 800113a:	4808      	ldr	r0, [pc, #32]	; (800115c <sccb_bus_start+0x4c>)
 800113c:	f001 f916 	bl	800236c <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff fc7b 	bl	8000a3c <us_delay>
    SCCB_SIC_L();	           
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <sccb_bus_start+0x4c>)
 800114e:	f001 f90d 	bl	800236c <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff fc72 	bl	8000a3c <us_delay>
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	48000400 	.word	0x48000400

08001160 <sccb_bus_stop>:


void sccb_bus_stop(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    SCCB_SID_L();
 8001164:	2200      	movs	r2, #0
 8001166:	2110      	movs	r1, #16
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <sccb_bus_stop+0x3c>)
 800116a:	f001 f8ff 	bl	800236c <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff fc64 	bl	8000a3c <us_delay>
    SCCB_SIC_H();	
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117a:	4808      	ldr	r0, [pc, #32]	; (800119c <sccb_bus_stop+0x3c>)
 800117c:	f001 f8f6 	bl	800236c <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff fc5b 	bl	8000a3c <us_delay>
    SCCB_SID_H();	
 8001186:	2201      	movs	r2, #1
 8001188:	2110      	movs	r1, #16
 800118a:	4804      	ldr	r0, [pc, #16]	; (800119c <sccb_bus_stop+0x3c>)
 800118c:	f001 f8ee 	bl	800236c <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff fc53 	bl	8000a3c <us_delay>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	48000400 	.word	0x48000400

080011a0 <sccb_bus_send_noack>:


void sccb_bus_send_noack(void)
{	
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	SCCB_SID_H();	
 80011a4:	2201      	movs	r2, #1
 80011a6:	2110      	movs	r1, #16
 80011a8:	4810      	ldr	r0, [pc, #64]	; (80011ec <sccb_bus_send_noack+0x4c>)
 80011aa:	f001 f8df 	bl	800236c <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff fc44 	bl	8000a3c <us_delay>
	SCCB_SIC_H();	
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <sccb_bus_send_noack+0x4c>)
 80011bc:	f001 f8d6 	bl	800236c <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff fc3b 	bl	8000a3c <us_delay>
	SCCB_SIC_L();	
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <sccb_bus_send_noack+0x4c>)
 80011ce:	f001 f8cd 	bl	800236c <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff fc32 	bl	8000a3c <us_delay>
	SCCB_SID_L();	
 80011d8:	2200      	movs	r2, #0
 80011da:	2110      	movs	r1, #16
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <sccb_bus_send_noack+0x4c>)
 80011de:	f001 f8c5 	bl	800236c <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff fc2a 	bl	8000a3c <us_delay>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	48000400 	.word	0x48000400

080011f0 <sccb_bus_write_byte>:
	SCCB_SID_L();	
	us_delay(I2C_TIM);
}

uint8_t sccb_bus_write_byte(uint8_t data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	uint8_t tem;

	for(i = 0; i < 8; i++) 
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e027      	b.n	8001250 <sccb_bus_write_byte+0x60>
	{
		if((data<<i) & 0x80)
 8001200:	79fa      	ldrb	r2, [r7, #7]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <sccb_bus_write_byte+0x2c>
		{
			SCCB_SID_H();
 8001210:	2201      	movs	r2, #1
 8001212:	2110      	movs	r1, #16
 8001214:	4823      	ldr	r0, [pc, #140]	; (80012a4 <sccb_bus_write_byte+0xb4>)
 8001216:	f001 f8a9 	bl	800236c <HAL_GPIO_WritePin>
 800121a:	e004      	b.n	8001226 <sccb_bus_write_byte+0x36>
		}
		else 
		{
			SCCB_SID_L();
 800121c:	2200      	movs	r2, #0
 800121e:	2110      	movs	r1, #16
 8001220:	4820      	ldr	r0, [pc, #128]	; (80012a4 <sccb_bus_write_byte+0xb4>)
 8001222:	f001 f8a3 	bl	800236c <HAL_GPIO_WritePin>
		}
		us_delay(I2C_TIM);
 8001226:	2001      	movs	r0, #1
 8001228:	f7ff fc08 	bl	8000a3c <us_delay>
		SCCB_SIC_H();	
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001232:	481c      	ldr	r0, [pc, #112]	; (80012a4 <sccb_bus_write_byte+0xb4>)
 8001234:	f001 f89a 	bl	800236c <HAL_GPIO_WritePin>
		us_delay(I2C_TIM);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff fbff 	bl	8000a3c <us_delay>
		SCCB_SIC_L();	
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001244:	4817      	ldr	r0, [pc, #92]	; (80012a4 <sccb_bus_write_byte+0xb4>)
 8001246:	f001 f891 	bl	800236c <HAL_GPIO_WritePin>
	for(i = 0; i < 8; i++) 
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b07      	cmp	r3, #7
 8001254:	d9d4      	bls.n	8001200 <sccb_bus_write_byte+0x10>

	}
	sccb_data_in();
 8001256:	f7ff ff19 	bl	800108c <sccb_data_in>
	us_delay(I2C_TIM);
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff fbee 	bl	8000a3c <us_delay>
	SCCB_SIC_H();	
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <sccb_bus_write_byte+0xb4>)
 8001268:	f001 f880 	bl	800236c <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fbe5 	bl	8000a3c <us_delay>
	//if(SCCB_SID_STATE)
	if(sccb_state)
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <sccb_bus_write_byte+0xb8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <sccb_bus_write_byte+0x90>
	{
		tem = 0;               
 800127a:	2300      	movs	r3, #0
 800127c:	72fb      	strb	r3, [r7, #11]
 800127e:	e001      	b.n	8001284 <sccb_bus_write_byte+0x94>
	}
	else 
	{
		tem = 1;                
 8001280:	2301      	movs	r3, #1
 8001282:	72fb      	strb	r3, [r7, #11]
	}

	SCCB_SIC_L();	
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <sccb_bus_write_byte+0xb4>)
 800128c:	f001 f86e 	bl	800236c <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff fbd3 	bl	8000a3c <us_delay>
	sccb_data_out();
 8001296:	f7ff ff19 	bl	80010cc <sccb_data_out>
	return tem;  
 800129a:	7afb      	ldrb	r3, [r7, #11]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000400 	.word	0x48000400
 80012a8:	200002f0 	.word	0x200002f0

080012ac <sccb_bus_read_byte>:

uint8_t sccb_bus_read_byte(void)
{	
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t read = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	70fb      	strb	r3, [r7, #3]
	
	sccb_data_in();
 80012b6:	f7ff fee9 	bl	800108c <sccb_data_in>
	us_delay(I2C_TIM);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fbbe 	bl	8000a3c <us_delay>
	for(i = 8; i > 0; i--) 
 80012c0:	2308      	movs	r3, #8
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	e021      	b.n	800130a <sccb_bus_read_byte+0x5e>
	{		     
		us_delay(I2C_TIM);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fbb8 	bl	8000a3c <us_delay>
		SCCB_SIC_H();
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d2:	4813      	ldr	r0, [pc, #76]	; (8001320 <sccb_bus_read_byte+0x74>)
 80012d4:	f001 f84a 	bl	800236c <HAL_GPIO_WritePin>
		us_delay(I2C_TIM);
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff fbaf 	bl	8000a3c <us_delay>
		read = read << 1;
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	70fb      	strb	r3, [r7, #3]
		//if(SCCB_SID_STATE)
		if(sccb_state)
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <sccb_bus_read_byte+0x78>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <sccb_bus_read_byte+0x46>
		{
			read += 1; 
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	3301      	adds	r3, #1
 80012f0:	70fb      	strb	r3, [r7, #3]
		}
		SCCB_SIC_L();
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <sccb_bus_read_byte+0x74>)
 80012fa:	f001 f837 	bl	800236c <HAL_GPIO_WritePin>
		us_delay(I2C_TIM);
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fb9c 	bl	8000a3c <us_delay>
	for(i = 8; i > 0; i--) 
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1da      	bne.n	80012c6 <sccb_bus_read_byte+0x1a>
	}	
    sccb_data_out();
 8001310:	f7ff fedc 	bl	80010cc <sccb_data_out>
	return read;
 8001314:	78fb      	ldrb	r3, [r7, #3]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	48000400 	.word	0x48000400
 8001324:	200002f0 	.word	0x200002f0

08001328 <SPI1_ReadWriteByte>:
	DMA_ITConfig(PB_SPI_RX_DMA_Channel, DMA_IT_TC, ENABLE);
	DMA_ITConfig(DMA1_Channel7, DMA_IT_TC, ENABLE);
}*/
 
uint8_t SPI1_ReadWriteByte(uint8_t TxData)
{		
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	{
		retry++;
		if(retry>200)return 0;
	}*/
	//SPI_I2S_SendData(SPI1, TxData);//Appears to send 1 byte. STM32F4 function
	HAL_SPI_Transmit(&hspi1, &TxData, 1, 400);//Should handle the blocking above
 8001332:	1df9      	adds	r1, r7, #7
 8001334:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001338:	2201      	movs	r2, #1
 800133a:	4807      	ldr	r0, [pc, #28]	; (8001358 <SPI1_ReadWriteByte+0x30>)
 800133c:	f002 fd54 	bl	8003de8 <HAL_SPI_Transmit>
	/*while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)
	{
		retry++;
		if(retry>200)return 0;
	}*/
	HAL_SPI_Receive(&hspi1, &TxData, 1, 400);
 8001340:	1df9      	adds	r1, r7, #7
 8001342:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001346:	2201      	movs	r2, #1
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <SPI1_ReadWriteByte+0x30>)
 800134a:	f002 fedd 	bl	8004108 <HAL_SPI_Receive>
	return TxData;
 800134e:	79fb      	ldrb	r3, [r7, #7]
			//SPI_I2S_ReceiveData(SPI1);
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000088 	.word	0x20000088

0800135c <StartBMPcapture>:
	haveRev = 0;
	DMA1_RX(picbuf, sendlen);
}*/

void StartBMPcapture(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
	flush_fifo();
 8001362:	f7ff f9ae 	bl	80006c2 <flush_fifo>
	clear_fifo_flag();
 8001366:	f7ff f9bc 	bl	80006e2 <clear_fifo_flag>
	start_capture(); 
 800136a:	f7ff f9b2 	bl	80006d2 <start_capture>
	uint8_t d1 = 0xff;
 800136e:	23ff      	movs	r3, #255	; 0xff
 8001370:	72fb      	strb	r3, [r7, #11]
	uint8_t d2 = 0xaa;
 8001372:	23aa      	movs	r3, #170	; 0xaa
 8001374:	72bb      	strb	r3, [r7, #10]
	uint8_t data_to_send;
	while(!get_bit(ARDUCHIP_TRIG , CAP_DONE_MASK)){;}
 8001376:	bf00      	nop
 8001378:	2108      	movs	r1, #8
 800137a:	2041      	movs	r0, #65	; 0x41
 800137c:	f7ff f9de 	bl	800073c <get_bit>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f8      	beq.n	8001378 <StartBMPcapture+0x1c>
	//printf("ACK CMD capture done\r\n");
	length= read_fifo_length();
 8001386:	f7ff f9b4 	bl	80006f2 <read_fifo_length>
 800138a:	4603      	mov	r3, r0
 800138c:	4a3f      	ldr	r2, [pc, #252]	; (800148c <StartBMPcapture+0x130>)
 800138e:	6013      	str	r3, [r2, #0]
//	printf("ACK CMD the length is %d\r\n",length);		
	//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
	//USART_SendData(USART1, 0xff);
	//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
	//USART_SendData(USART1, 0xaa);
	HAL_UART_Transmit(&huart2, &d1, 1, 400);
 8001390:	f107 010b 	add.w	r1, r7, #11
 8001394:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001398:	2201      	movs	r2, #1
 800139a:	483d      	ldr	r0, [pc, #244]	; (8001490 <StartBMPcapture+0x134>)
 800139c:	f004 f86d 	bl	800547a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &d2, 1, 400);
 80013a0:	f107 010a 	add.w	r1, r7, #10
 80013a4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013a8:	2201      	movs	r2, #1
 80013aa:	4839      	ldr	r0, [pc, #228]	; (8001490 <StartBMPcapture+0x134>)
 80013ac:	f004 f865 	bl	800547a <HAL_UART_Transmit>
	for(int temp = 0; temp < BMPIMAGEOFFSET; temp++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e00f      	b.n	80013d6 <StartBMPcapture+0x7a>
	{
		//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
		//USART_SendData(USART1, pgm_read_byte(&bmp_header[temp]));
		data_to_send = pgm_read_byte(&bmp_header[temp]);
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	4a36      	ldr	r2, [pc, #216]	; (8001494 <StartBMPcapture+0x138>)
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	727b      	strb	r3, [r7, #9]
		HAL_UART_Transmit(&huart2, &data_to_send, 1, 400);
 80013c0:	f107 0109 	add.w	r1, r7, #9
 80013c4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013c8:	2201      	movs	r2, #1
 80013ca:	4831      	ldr	r0, [pc, #196]	; (8001490 <StartBMPcapture+0x134>)
 80013cc:	f004 f855 	bl	800547a <HAL_UART_Transmit>
	for(int temp = 0; temp < BMPIMAGEOFFSET; temp++)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2b41      	cmp	r3, #65	; 0x41
 80013da:	ddec      	ble.n	80013b6 <StartBMPcapture+0x5a>

	}
	CS_LOW();
 80013dc:	f7ff f894 	bl	8000508 <CS_LOW>
	set_fifo_burst();
 80013e0:	f7ff f968 	bl	80006b4 <set_fifo_burst>
	char VH, VL;
	int i = 0, j = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < 240; i++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	e02b      	b.n	800144a <StartBMPcapture+0xee>
	{
		for (j = 0; j < 320; j++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e021      	b.n	800143c <StartBMPcapture+0xe0>
		{
			VH = SPI1_ReadWriteByte(0x00);			
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff ff95 	bl	8001328 <SPI1_ReadWriteByte>
 80013fe:	4603      	mov	r3, r0
 8001400:	723b      	strb	r3, [r7, #8]
			VL = SPI1_ReadWriteByte(0x00);		
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff ff90 	bl	8001328 <SPI1_ReadWriteByte>
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
			//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
			//USART_SendData(USART1, VL);
			HAL_UART_Transmit(&huart2, &VL, 1, 400);
 800140c:	1df9      	adds	r1, r7, #7
 800140e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001412:	2201      	movs	r2, #1
 8001414:	481e      	ldr	r0, [pc, #120]	; (8001490 <StartBMPcapture+0x134>)
 8001416:	f004 f830 	bl	800547a <HAL_UART_Transmit>
			us_delay(15);
 800141a:	200f      	movs	r0, #15
 800141c:	f7ff fb0e 	bl	8000a3c <us_delay>
			//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
			//USART_SendData(USART1, VH);
			HAL_UART_Transmit(&huart2, &VH, 1, 400);
 8001420:	f107 0108 	add.w	r1, r7, #8
 8001424:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001428:	2201      	movs	r2, #1
 800142a:	4819      	ldr	r0, [pc, #100]	; (8001490 <StartBMPcapture+0x134>)
 800142c:	f004 f825 	bl	800547a <HAL_UART_Transmit>
			us_delay(15);
 8001430:	200f      	movs	r0, #15
 8001432:	f7ff fb03 	bl	8000a3c <us_delay>
		for (j = 0; j < 320; j++)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001442:	dbd9      	blt.n	80013f8 <StartBMPcapture+0x9c>
	for (i = 0; i < 240; i++)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	3301      	adds	r3, #1
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	2bef      	cmp	r3, #239	; 0xef
 800144e:	ddd0      	ble.n	80013f2 <StartBMPcapture+0x96>
		}
	}
	d1 = 0xbb;
 8001450:	23bb      	movs	r3, #187	; 0xbb
 8001452:	72fb      	strb	r3, [r7, #11]
	d2 = 0xcc;
 8001454:	23cc      	movs	r3, #204	; 0xcc
 8001456:	72bb      	strb	r3, [r7, #10]
	//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
	//USART_SendData(USART1, 0xbb);
	HAL_UART_Transmit(&huart2, &d1, 1, 400);
 8001458:	f107 010b 	add.w	r1, r7, #11
 800145c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001460:	2201      	movs	r2, #1
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <StartBMPcapture+0x134>)
 8001464:	f004 f809 	bl	800547a <HAL_UART_Transmit>
	us_delay(12);
 8001468:	200c      	movs	r0, #12
 800146a:	f7ff fae7 	bl	8000a3c <us_delay>
	//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
	//USART_SendData(USART1, 0xcc);
	HAL_UART_Transmit(&huart2, &d2, 1, 400);
 800146e:	f107 010a 	add.w	r1, r7, #10
 8001472:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001476:	2201      	movs	r2, #1
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <StartBMPcapture+0x134>)
 800147a:	f003 fffe 	bl	800547a <HAL_UART_Transmit>
	CS_HIGH();
 800147e:	f7ff f837 	bl	80004f0 <CS_HIGH>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000030 	.word	0x20000030
 8001490:	2000025c 	.word	0x2000025c
 8001494:	08006c68 	.word	0x08006c68

08001498 <LL_AHB2_GRP1_EnableClock>:
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4013      	ands	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014bc:	68fb      	ldr	r3, [r7, #12]
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ec:	68fb      	ldr	r3, [r7, #12]
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001504:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4313      	orrs	r3, r2
 800150e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b096      	sub	sp, #88	; 0x58
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2238      	movs	r2, #56	; 0x38
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f004 fd67 	bl	8006028 <memset>
  if(hi2c->Instance==I2C3)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <HAL_I2C_MspInit+0x88>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d127      	bne.n	80015b4 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001568:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800156a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4618      	mov	r0, r3
 8001576:	f002 fa49 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001580:	f7ff fd78 	bl	8001074 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	2002      	movs	r0, #2
 8001586:	f7ff ff87 	bl	8001498 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB4     ------> I2C3_SDA
    PB13     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_13;
 800158a:	f242 0310 	movw	r3, #8208	; 0x2010
 800158e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001590:	2312      	movs	r3, #18
 8001592:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800159c:	2304      	movs	r3, #4
 800159e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <HAL_I2C_MspInit+0x8c>)
 80015a8:	f000 fd80 	bl	80020ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80015b0:	f7ff ff8a 	bl	80014c8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	3758      	adds	r7, #88	; 0x58
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40005c00 	.word	0x40005c00
 80015c0:	48000400 	.word	0x48000400

080015c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b096      	sub	sp, #88	; 0x58
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2238      	movs	r2, #56	; 0x38
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 fd1f 	bl	8006028 <memset>
  if(hspi->Instance==SPI1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a6d      	ldr	r2, [pc, #436]	; (80017a4 <HAL_SPI_MspInit+0x1e0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d12c      	bne.n	800164e <HAL_SPI_MspInit+0x8a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015f8:	f7ff ff7e 	bl	80014f8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff ff4b 	bl	8001498 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2002      	movs	r0, #2
 8001604:	f7ff ff48 	bl	8001498 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001608:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800161a:	2305      	movs	r3, #5
 800161c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f000 fd40 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800162c:	2308      	movs	r3, #8
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800163c:	2305      	movs	r3, #5
 800163e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001644:	4619      	mov	r1, r3
 8001646:	4858      	ldr	r0, [pc, #352]	; (80017a8 <HAL_SPI_MspInit+0x1e4>)
 8001648:	f000 fd30 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800164c:	e0a5      	b.n	800179a <HAL_SPI_MspInit+0x1d6>
  else if(hspi->Instance==SPI2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a56      	ldr	r2, [pc, #344]	; (80017ac <HAL_SPI_MspInit+0x1e8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	f040 80a0 	bne.w	800179a <HAL_SPI_MspInit+0x1d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800165a:	2310      	movs	r3, #16
 800165c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_PLL;
 800165e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001662:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4618      	mov	r0, r3
 800166a:	f002 f9cf 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_SPI_MspInit+0xb4>
      Error_Handler();
 8001674:	f7ff fcfe 	bl	8001074 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001678:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800167c:	f7ff ff24 	bl	80014c8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	2002      	movs	r0, #2
 8001682:	f7ff ff09 	bl	8001498 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff ff06 	bl	8001498 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800168c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001690:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800169e:	2305      	movs	r3, #5
 80016a0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016a6:	4619      	mov	r1, r3
 80016a8:	483f      	ldr	r0, [pc, #252]	; (80017a8 <HAL_SPI_MspInit+0x1e4>)
 80016aa:	f000 fcff 	bl	80020ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80016ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c0:	2305      	movs	r3, #5
 80016c2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016c8:	4619      	mov	r1, r3
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ce:	f000 fced 	bl	80020ac <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel1;
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 80016d4:	4a37      	ldr	r2, [pc, #220]	; (80017b4 <HAL_SPI_MspInit+0x1f0>)
 80016d6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80016d8:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 80016da:	2209      	movs	r2, #9
 80016dc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016de:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e4:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f0:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001708:	4829      	ldr	r0, [pc, #164]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 800170a:	f000 fac5 	bl	8001c98 <HAL_DMA_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_SPI_MspInit+0x154>
      Error_Handler();
 8001714:	f7ff fcae 	bl	8001074 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001718:	2110      	movs	r1, #16
 800171a:	4825      	ldr	r0, [pc, #148]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 800171c:	f000 fc2a 	bl	8001f74 <HAL_DMA_ConfigChannelAttributes>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_SPI_MspInit+0x166>
      Error_Handler();
 8001726:	f7ff fca5 	bl	8001074 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 800172e:	659a      	str	r2, [r3, #88]	; 0x58
 8001730:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <HAL_SPI_MspInit+0x1ec>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 8001738:	4a20      	ldr	r2, [pc, #128]	; (80017bc <HAL_SPI_MspInit+0x1f8>)
 800173a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 800173e:	220a      	movs	r2, #10
 8001740:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 8001744:	2210      	movs	r2, #16
 8001746:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800176c:	4812      	ldr	r0, [pc, #72]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 800176e:	f000 fa93 	bl	8001c98 <HAL_DMA_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_SPI_MspInit+0x1b8>
      Error_Handler();
 8001778:	f7ff fc7c 	bl	8001074 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800177c:	2110      	movs	r1, #16
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 8001780:	f000 fbf8 	bl	8001f74 <HAL_DMA_ConfigChannelAttributes>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_SPI_MspInit+0x1ca>
      Error_Handler();
 800178a:	f7ff fc73 	bl	8001074 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 8001792:	655a      	str	r2, [r3, #84]	; 0x54
 8001794:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_SPI_MspInit+0x1f4>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6293      	str	r3, [r2, #40]	; 0x28
}
 800179a:	bf00      	nop
 800179c:	3758      	adds	r7, #88	; 0x58
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40013000 	.word	0x40013000
 80017a8:	48000400 	.word	0x48000400
 80017ac:	40003800 	.word	0x40003800
 80017b0:	20000150 	.word	0x20000150
 80017b4:	40020008 	.word	0x40020008
 80017b8:	200001b0 	.word	0x200001b0
 80017bc:	4002001c 	.word	0x4002001c

080017c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <HAL_TIM_Base_MspInit+0x24>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d103      	bne.n	80017da <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017d6:	f7ff fe8f 	bl	80014f8 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40012c00 	.word	0x40012c00

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b096      	sub	sp, #88	; 0x58
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2238      	movs	r2, #56	; 0x38
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fc0d 	bl	8006028 <memset>
  if(huart->Instance==USART2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a16      	ldr	r2, [pc, #88]	; (800186c <HAL_UART_MspInit+0x84>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d125      	bne.n	8001864 <HAL_UART_MspInit+0x7c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001818:	2302      	movs	r3, #2
 800181a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_UART_MspInit+0x88>)
 800181e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4618      	mov	r0, r3
 8001826:	f002 f8f1 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001830:	f7ff fc20 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001834:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001838:	f7ff fe46 	bl	80014c8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	2001      	movs	r0, #1
 800183e:	f7ff fe2b 	bl	8001498 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001842:	230c      	movs	r3, #12
 8001844:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001852:	2307      	movs	r3, #7
 8001854:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f000 fc24 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3758      	adds	r7, #88	; 0x58
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40004400 	.word	0x40004400
 8001870:	000c0004 	.word	0x000c0004

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ba:	f000 f8a1 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <DMA1_Channel1_IRQHandler+0x10>)
 80018ca:	f000 fa8d 	bl	8001de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000150 	.word	0x20000150

080018d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <DMA1_Channel2_IRQHandler+0x10>)
 80018de:	f000 fa83 	bl	8001de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200001b0 	.word	0x200001b0

080018ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018fc:	f7ff fff6 	bl	80018ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <LoopForever+0x6>)
  ldr r1, =_edata
 8001902:	490d      	ldr	r1, [pc, #52]	; (8001938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <LoopForever+0xe>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001918:	4c0a      	ldr	r4, [pc, #40]	; (8001944 <LoopForever+0x16>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001926:	f004 fb5b 	bl	8005fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800192a:	f7ff f8e5 	bl	8000af8 <main>

0800192e <LoopForever>:

LoopForever:
    b LoopForever
 800192e:	e7fe      	b.n	800192e <LoopForever>
  ldr   r0, =_estack
 8001930:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800193c:	08006d84 	.word	0x08006d84
  ldr r2, =_sbss
 8001940:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001944:	200002f8 	.word	0x200002f8

08001948 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC_IRQHandler>
	...

0800194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001956:	2003      	movs	r0, #3
 8001958:	f000 f95e 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800195c:	f001 fe78 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8001960:	4603      	mov	r3, r0
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_Init+0x3c>)
 8001964:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001966:	2000      	movs	r0, #0
 8001968:	f000 f810 	bl	800198c <HAL_InitTick>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	e001      	b.n	800197c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001978:	f7ff fdd6 	bl	8001528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800197c:	79fb      	ldrb	r3, [r7, #7]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_InitTick+0x6c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d024      	beq.n	80019ea <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019a0:	f001 fe56 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_InitTick+0x6c>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	4619      	mov	r1, r3
 80019ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f960 	bl	8001c7e <HAL_SYSTICK_Config>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10f      	bne.n	80019e4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	d809      	bhi.n	80019de <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ca:	2200      	movs	r2, #0
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	f04f 30ff 	mov.w	r0, #4294967295
 80019d2:	f000 f92c 	bl	8001c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <HAL_InitTick+0x70>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e007      	b.n	80019ee <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	e004      	b.n	80019ee <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e001      	b.n	80019ee <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2000000c 	.word	0x2000000c
 80019fc:	20000008 	.word	0x20000008

08001a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x1c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_IncTick+0x20>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_IncTick+0x20>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	200002f4 	.word	0x200002f4

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_GetTick+0x10>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	200002f4 	.word	0x200002f4

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff fff0 	bl	8001a24 <HAL_GetTick>
 8001a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5e:	bf00      	nop
 8001a60:	f7ff ffe0 	bl	8001a24 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000000c 	.word	0x2000000c

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4906      	ldr	r1, [pc, #24]	; (8001b18 <__NVIC_EnableIRQ+0x34>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f7ff ff90 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff2d 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff44 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff92 	bl	8001b70 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff61 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff37 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffa4 	bl	8001bd4 <SysTick_Config>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e08e      	b.n	8001dc8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_DMA_Init+0x138>)
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d80f      	bhi.n	8001cd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b45      	ldr	r3, [pc, #276]	; (8001dd4 <HAL_DMA_Init+0x13c>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a45      	ldr	r2, [pc, #276]	; (8001dd8 <HAL_DMA_Init+0x140>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	009a      	lsls	r2, r3, #2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a42      	ldr	r2, [pc, #264]	; (8001ddc <HAL_DMA_Init+0x144>)
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd4:	e00e      	b.n	8001cf4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <HAL_DMA_Init+0x148>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a3d      	ldr	r2, [pc, #244]	; (8001dd8 <HAL_DMA_Init+0x140>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	009a      	lsls	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a3c      	ldr	r2, [pc, #240]	; (8001de4 <HAL_DMA_Init+0x14c>)
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d0e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f944 	bl	8001fd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d54:	d102      	bne.n	8001d5c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d68:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d72:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_DMA_Init+0x106>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d80c      	bhi.n	8001d9e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f96d 	bl	8002064 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	e008      	b.n	8001db0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40020407 	.word	0x40020407
 8001dd4:	bffdfff8 	.word	0xbffdfff8
 8001dd8:	cccccccd 	.word	0xcccccccd
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	bffdfbf8 	.word	0xbffdfbf8
 8001de4:	40020400 	.word	0x40020400

08001de8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	f003 031c 	and.w	r3, r3, #28
 8001e08:	2204      	movs	r2, #4
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d027      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x7c>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d022      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0204 	bic.w	r2, r2, #4
 8001e3a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f003 021c 	and.w	r2, r3, #28
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	2104      	movs	r1, #4
 8001e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8081 	beq.w	8001f5c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001e62:	e07b      	b.n	8001f5c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f003 031c 	and.w	r3, r3, #28
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d03d      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x10c>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d038      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 020a 	bic.w	r2, r2, #10
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_DMA_IRQHandler+0x180>)
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d909      	bls.n	8001ec8 <HAL_DMA_IRQHandler+0xe0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	f003 031c 	and.w	r3, r3, #28
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <HAL_DMA_IRQHandler+0x184>)
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	6053      	str	r3, [r2, #4]
 8001ec6:	e008      	b.n	8001eda <HAL_DMA_IRQHandler+0xf2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f003 031c 	and.w	r3, r3, #28
 8001ed0:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_DMA_IRQHandler+0x188>)
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d038      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001ef2:	e033      	b.n	8001f5c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f003 031c 	and.w	r3, r3, #28
 8001efc:	2208      	movs	r2, #8
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02a      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x176>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d025      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 020e 	bic.w	r2, r2, #14
 8001f20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f003 021c 	and.w	r2, r3, #28
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
}
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40020080 	.word	0x40020080
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020000 	.word	0x40020000

08001f74 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d103      	bne.n	8001f90 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	72fb      	strb	r3, [r7, #11]
    return status;
 8001f8c:	7afb      	ldrb	r3, [r7, #11]
 8001f8e:	e01b      	b.n	8001fc8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e003      	b.n	8001fbe <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]

  return status;
 8001fc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
	...

08001fd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d813      	bhi.n	8002010 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ff4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	3b08      	subs	r3, #8
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	e011      	b.n	8002034 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	009a      	lsls	r2, r3, #2
 8002018:	4b10      	ldr	r3, [pc, #64]	; (800205c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800201a:	4413      	add	r3, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	3b08      	subs	r3, #8
 8002028:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	3307      	adds	r3, #7
 8002032:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002038:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2201      	movs	r2, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40020407 	.word	0x40020407
 8002058:	cccccccd 	.word	0xcccccccd
 800205c:	4002081c 	.word	0x4002081c
 8002060:	40020880 	.word	0x40020880

08002064 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002074:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002088:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3b01      	subs	r3, #1
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2201      	movs	r2, #1
 8002094:	409a      	lsls	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	1000823f 	.word	0x1000823f
 80020a8:	40020940 	.word	0x40020940

080020ac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	e140      	b.n	800233e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8132 	beq.w	8002338 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d005      	beq.n	80020ec <HAL_GPIO_Init+0x40>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d130      	bne.n	800214e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002122:	2201      	movs	r2, #1
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f003 0201 	and.w	r2, r3, #1
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b03      	cmp	r3, #3
 8002158:	d017      	beq.n	800218a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d123      	bne.n	80021de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	220f      	movs	r2, #15
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	6939      	ldr	r1, [r7, #16]
 80021da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 0203 	and.w	r2, r3, #3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 808c 	beq.w	8002338 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002220:	4a4e      	ldr	r2, [pc, #312]	; (800235c <HAL_GPIO_Init+0x2b0>)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	2207      	movs	r2, #7
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800224a:	d00d      	beq.n	8002268 <HAL_GPIO_Init+0x1bc>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a44      	ldr	r2, [pc, #272]	; (8002360 <HAL_GPIO_Init+0x2b4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d007      	beq.n	8002264 <HAL_GPIO_Init+0x1b8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a43      	ldr	r2, [pc, #268]	; (8002364 <HAL_GPIO_Init+0x2b8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_GPIO_Init+0x1b4>
 800225c:	2302      	movs	r3, #2
 800225e:	e004      	b.n	800226a <HAL_GPIO_Init+0x1be>
 8002260:	2307      	movs	r3, #7
 8002262:	e002      	b.n	800226a <HAL_GPIO_Init+0x1be>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_GPIO_Init+0x1be>
 8002268:	2300      	movs	r3, #0
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	f002 0203 	and.w	r2, r2, #3
 8002270:	0092      	lsls	r2, r2, #2
 8002272:	4093      	lsls	r3, r2
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800227a:	4938      	ldr	r1, [pc, #224]	; (800235c <HAL_GPIO_Init+0x2b0>)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002288:	4b37      	ldr	r3, [pc, #220]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022ac:	4a2e      	ldr	r2, [pc, #184]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022d6:	4a24      	ldr	r2, [pc, #144]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 80022de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022e2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002302:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 800230c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002310:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002330:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	f47f aeb7 	bne.w	80020bc <HAL_GPIO_Init+0x10>
  }
}
 800234e:	bf00      	nop
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40010000 	.word	0x40010000
 8002360:	48000400 	.word	0x48000400
 8002364:	48000800 	.word	0x48000800
 8002368:	58000800 	.word	0x58000800

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002388:	e002      	b.n	8002390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e081      	b.n	80024b0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff f8b7 	bl	8001534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2224      	movs	r2, #36	; 0x24
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0201 	bic.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	e006      	b.n	8002422 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002420:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d104      	bne.n	8002434 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002432:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002446:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002456:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69d9      	ldr	r1, [r3, #28]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d138      	bne.n	8002540 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024d8:	2302      	movs	r3, #2
 80024da:	e032      	b.n	8002542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800250a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6819      	ldr	r1, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	d139      	bne.n	80025d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800256c:	2302      	movs	r3, #2
 800256e:	e033      	b.n	80025d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800259e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a03      	ldr	r2, [pc, #12]	; (80025fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	58000400 	.word	0x58000400

08002600 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_PWREx_GetVoltageRange+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	58000400 	.word	0x58000400

08002618 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002628:	d101      	bne.n	800262e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	58000400 	.word	0x58000400

0800263c <LL_RCC_HSE_EnableTcxo>:
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <LL_RCC_HSE_DisableTcxo>:
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002666:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002686:	d101      	bne.n	800268c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <LL_RCC_HSE_Enable>:
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <LL_RCC_HSE_Disable>:
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_HSE_IsReady>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026e0:	d101      	bne.n	80026e6 <LL_RCC_HSE_IsReady+0x18>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_RCC_HSE_IsReady+0x1a>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <LL_RCC_HSI_Enable>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <LL_RCC_HSI_Disable>:
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800271a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <LL_RCC_HSI_IsReady>:
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d101      	bne.n	8002740 <LL_RCC_HSI_IsReady+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_RCC_HSI_IsReady+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <LL_RCC_HSI_SetCalibTrimming>:
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	061b      	lsls	r3, r3, #24
 8002760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d101      	bne.n	800278a <LL_RCC_LSE_IsReady+0x18>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <LL_RCC_LSE_IsReady+0x1a>
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80027d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d101      	bne.n	80027ec <LL_RCC_LSI_IsReady+0x18>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <LL_RCC_LSI_IsReady+0x1a>
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6013      	str	r3, [r2, #0]
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6013      	str	r3, [r2, #0]
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d101      	bne.n	8002844 <LL_RCC_MSI_IsReady+0x16>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <LL_RCC_MSI_IsReady+0x18>
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b08      	cmp	r3, #8
 800285e:	d101      	bne.n	8002864 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002932:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002960:	f023 020f 	bic.w	r2, r3, #15
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800298e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a6e:	d101      	bne.n	8002a74 <LL_RCC_PLL_IsReady+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_RCC_PLL_IsReady+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0303 	and.w	r3, r3, #3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aea:	d101      	bne.n	8002af0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b0e:	d101      	bne.n	8002b14 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b32:	d101      	bne.n	8002b38 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b54:	d101      	bne.n	8002b5a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b76:	d101      	bne.n	8002b7c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e36f      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9a:	f7ff fea6 	bl	80028ea <LL_RCC_GetSysClkSource>
 8002b9e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba0:	f7ff ff8f 	bl	8002ac2 <LL_RCC_PLL_GetMainSource>
 8002ba4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80c4 	beq.w	8002d3c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x3e>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d176      	bne.n	8002cae <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d173      	bne.n	8002cae <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e353      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x68>
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bee:	e006      	b.n	8002bfe <HAL_RCC_OscConfig+0x76>
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d222      	bcs.n	8002c48 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fd5a 	bl	80036c0 <RCC_SetFlashLatencyFromMSIRange>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e331      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fe2b 	bl	800289c <LL_RCC_MSI_SetCalibTrimming>
 8002c46:	e021      	b.n	8002c8c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fe12 	bl	800289c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fd1f 	bl	80036c0 <RCC_SetFlashLatencyFromMSIRange>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e2f6      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c8c:	f000 fce0 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4aa7      	ldr	r2, [pc, #668]	; (8002f30 <HAL_RCC_OscConfig+0x3a8>)
 8002c94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002c96:	4ba7      	ldr	r3, [pc, #668]	; (8002f34 <HAL_RCC_OscConfig+0x3ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fe76 	bl	800198c <HAL_InitTick>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d047      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	e2e5      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d02c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cb6:	f7ff fd9e 	bl	80027f6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cba:	f7fe feb3 	bl	8001a24 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc2:	f7fe feaf 	bl	8001a24 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e2d2      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cd4:	f7ff fdab 	bl	800282e <LL_RCC_MSI_IsReady>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f1      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce8:	f043 0308 	orr.w	r3, r3, #8
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fdc7 	bl	800289c <LL_RCC_MSI_SetCalibTrimming>
 8002d0e:	e015      	b.n	8002d3c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d10:	f7ff fd7f 	bl	8002812 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fe86 	bl	8001a24 <HAL_GetTick>
 8002d18:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fe82 	bl	8001a24 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e2a5      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d2e:	f7ff fd7e 	bl	800282e <LL_RCC_MSI_IsReady>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f1      	bne.n	8002d1c <HAL_RCC_OscConfig+0x194>
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d3a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d058      	beq.n	8002dfa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1d2>
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d108      	bne.n	8002d66 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d105      	bne.n	8002d66 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d14b      	bne.n	8002dfa <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e289      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d102      	bne.n	8002d8c <HAL_RCC_OscConfig+0x204>
 8002d86:	f7ff fc86 	bl	8002696 <LL_RCC_HSE_Enable>
 8002d8a:	e00d      	b.n	8002da8 <HAL_RCC_OscConfig+0x220>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002d94:	d104      	bne.n	8002da0 <HAL_RCC_OscConfig+0x218>
 8002d96:	f7ff fc51 	bl	800263c <LL_RCC_HSE_EnableTcxo>
 8002d9a:	f7ff fc7c 	bl	8002696 <LL_RCC_HSE_Enable>
 8002d9e:	e003      	b.n	8002da8 <HAL_RCC_OscConfig+0x220>
 8002da0:	f7ff fc87 	bl	80026b2 <LL_RCC_HSE_Disable>
 8002da4:	f7ff fc58 	bl	8002658 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d012      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe fe38 	bl	8001a24 <HAL_GetTick>
 8002db4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe fe34 	bl	8001a24 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e257      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dca:	f7ff fc80 	bl	80026ce <LL_RCC_HSE_IsReady>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f1      	beq.n	8002db8 <HAL_RCC_OscConfig+0x230>
 8002dd4:	e011      	b.n	8002dfa <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fe25 	bl	8001a24 <HAL_GetTick>
 8002dda:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dde:	f7fe fe21 	bl	8001a24 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e244      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002df0:	f7ff fc6d 	bl	80026ce <LL_RCC_HSE_IsReady>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f1      	bne.n	8002dde <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d046      	beq.n	8002e94 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_OscConfig+0x290>
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d10e      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d10b      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e22a      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fc8e 	bl	800274a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e2e:	e031      	b.n	8002e94 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d019      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e38:	f7ff fc5a 	bl	80026f0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fdf2 	bl	8001a24 <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e44:	f7fe fdee 	bl	8001a24 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e211      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e56:	f7ff fc67 	bl	8002728 <LL_RCC_HSI_IsReady>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f1      	beq.n	8002e44 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fc70 	bl	800274a <LL_RCC_HSI_SetCalibTrimming>
 8002e6a:	e013      	b.n	8002e94 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6c:	f7ff fc4e 	bl	800270c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fdd8 	bl	8001a24 <HAL_GetTick>
 8002e74:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e78:	f7fe fdd4 	bl	8001a24 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e1f7      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e8a:	f7ff fc4d 	bl	8002728 <LL_RCC_HSI_IsReady>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f1      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d06e      	beq.n	8002f7e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d056      	beq.n	8002f56 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d031      	beq.n	8002f24 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e1d0      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d013      	beq.n	8002f0a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002ee2:	f7ff fc67 	bl	80027b4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ee6:	f7fe fd9d 	bl	8001a24 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eee:	f7fe fd99 	bl	8001a24 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b11      	cmp	r3, #17
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1bc      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f00:	f7ff fc68 	bl	80027d4 <LL_RCC_LSI_IsReady>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f1      	bne.n	8002eee <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f12:	f023 0210 	bic.w	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f24:	f7ff fc36 	bl	8002794 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7fe fd7c 	bl	8001a24 <HAL_GetTick>
 8002f2c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f2e:	e00c      	b.n	8002f4a <HAL_RCC_OscConfig+0x3c2>
 8002f30:	20000004 	.word	0x20000004
 8002f34:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe fd74 	bl	8001a24 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b11      	cmp	r3, #17
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e197      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f4a:	f7ff fc43 	bl	80027d4 <LL_RCC_LSI_IsReady>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f1      	beq.n	8002f38 <HAL_RCC_OscConfig+0x3b0>
 8002f54:	e013      	b.n	8002f7e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f56:	f7ff fc2d 	bl	80027b4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fd63 	bl	8001a24 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f62:	f7fe fd5f 	bl	8001a24 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b11      	cmp	r3, #17
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e182      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f74:	f7ff fc2e 	bl	80027d4 <LL_RCC_LSI_IsReady>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f1      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80d8 	beq.w	800313c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f8c:	f7ff fb44 	bl	8002618 <LL_PWR_IsEnabledBkUpAccess>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d113      	bne.n	8002fbe <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f96:	f7ff fb25 	bl	80025e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fd43 	bl	8001a24 <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7fe fd3f 	bl	8001a24 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e162      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fb4:	f7ff fb30 	bl	8002618 <LL_PWR_IsEnabledBkUpAccess>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f1      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d07b      	beq.n	80030be <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b85      	cmp	r3, #133	; 0x85
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe2:	f043 0304 	orr.w	r3, r3, #4
 8002fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fe fd1b 	bl	8001a24 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fe fd0d 	bl	8001a24 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	; 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e12e      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800301c:	f7ff fba9 	bl	8002772 <LL_RCC_LSE_IsReady>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ef      	beq.n	8003006 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b81      	cmp	r3, #129	; 0x81
 800302c:	d003      	beq.n	8003036 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b85      	cmp	r3, #133	; 0x85
 8003034:	d121      	bne.n	800307a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe fcf5 	bl	8001a24 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fe fce7 	bl	8001a24 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e108      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ec      	beq.n	8003052 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003078:	e060      	b.n	800313c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe fcd3 	bl	8001a24 <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800308c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe fcc5 	bl	8001a24 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0e6      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ec      	bne.n	8003096 <HAL_RCC_OscConfig+0x50e>
 80030bc:	e03e      	b.n	800313c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fe fcb1 	bl	8001a24 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe fca3 	bl	8001a24 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0c4      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ec      	bne.n	80030da <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003100:	f7fe fc90 	bl	8001a24 <HAL_GetTick>
 8003104:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fe fc82 	bl	8001a24 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0a3      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003132:	f7ff fb1e 	bl	8002772 <LL_RCC_LSE_IsReady>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ef      	bne.n	800311c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8099 	beq.w	8003278 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	d06c      	beq.n	8003226 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	2b02      	cmp	r3, #2
 8003152:	d14b      	bne.n	80031ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003154:	f7ff fc74 	bl	8002a40 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe fc64 	bl	8001a24 <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe fc60 	bl	8001a24 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b0a      	cmp	r3, #10
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e083      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003172:	f7ff fc73 	bl	8002a5c <LL_RCC_PLL_IsReady>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f1      	bne.n	8003160 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	4b40      	ldr	r3, [pc, #256]	; (8003284 <HAL_RCC_OscConfig+0x6fc>)
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003194:	0212      	lsls	r2, r2, #8
 8003196:	4311      	orrs	r1, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800319c:	4311      	orrs	r1, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031a8:	430a      	orrs	r2, r1
 80031aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b2:	f7ff fc37 	bl	8002a24 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fc2d 	bl	8001a24 <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe fc29 	bl	8001a24 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b0a      	cmp	r3, #10
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e04c      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80031e0:	f7ff fc3c 	bl	8002a5c <LL_RCC_PLL_IsReady>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f1      	beq.n	80031ce <HAL_RCC_OscConfig+0x646>
 80031ea:	e045      	b.n	8003278 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ec:	f7ff fc28 	bl	8002a40 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe fc18 	bl	8001a24 <HAL_GetTick>
 80031f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fe fc14 	bl	8001a24 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b0a      	cmp	r3, #10
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e037      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800320a:	f7ff fc27 	bl	8002a5c <LL_RCC_PLL_IsReady>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f1      	bne.n	80031f8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <HAL_RCC_OscConfig+0x700>)
 8003220:	4013      	ands	r3, r2
 8003222:	60cb      	str	r3, [r1, #12]
 8003224:	e028      	b.n	8003278 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e023      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f003 0203 	and.w	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	429a      	cmp	r2, r3
 8003246:	d115      	bne.n	8003274 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	429a      	cmp	r2, r3
 8003254:	d10e      	bne.n	8003274 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	429a      	cmp	r2, r3
 8003264:	d106      	bne.n	8003274 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	11c1808c 	.word	0x11c1808c
 8003288:	eefefffc 	.word	0xeefefffc

0800328c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e12c      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a0:	4b98      	ldr	r3, [pc, #608]	; (8003504 <HAL_RCC_ClockConfig+0x278>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d91b      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b95      	ldr	r3, [pc, #596]	; (8003504 <HAL_RCC_ClockConfig+0x278>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0207 	bic.w	r2, r3, #7
 80032b6:	4993      	ldr	r1, [pc, #588]	; (8003504 <HAL_RCC_ClockConfig+0x278>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032be:	f7fe fbb1 	bl	8001a24 <HAL_GetTick>
 80032c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032c6:	f7fe fbad 	bl	8001a24 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e110      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d8:	4b8a      	ldr	r3, [pc, #552]	; (8003504 <HAL_RCC_ClockConfig+0x278>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d1ef      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fb02 	bl	8002900 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032fc:	f7fe fb92 	bl	8001a24 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003304:	f7fe fb8e 	bl	8001a24 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0f1      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003316:	f7ff fbdf 	bl	8002ad8 <LL_RCC_IsActiveFlag_HPRE>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f1      	beq.n	8003304 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d016      	beq.n	800335a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff faf8 	bl	8002926 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003336:	f7fe fb75 	bl	8001a24 <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800333e:	f7fe fb71 	bl	8001a24 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0d4      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003350:	f7ff fbd3 	bl	8002afa <LL_RCC_IsActiveFlag_C2HPRE>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f1      	beq.n	800333e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d016      	beq.n	8003394 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff faf0 	bl	8002950 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003370:	f7fe fb58 	bl	8001a24 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003378:	f7fe fb54 	bl	8001a24 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0b7      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800338a:	f7ff fbc8 	bl	8002b1e <LL_RCC_IsActiveFlag_SHDHPRE>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f1      	beq.n	8003378 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d016      	beq.n	80033ce <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fae9 	bl	800297c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033aa:	f7fe fb3b 	bl	8001a24 <HAL_GetTick>
 80033ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033b2:	f7fe fb37 	bl	8001a24 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e09a      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033c4:	f7ff fbbd 	bl	8002b42 <LL_RCC_IsActiveFlag_PPRE1>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f1      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d017      	beq.n	800340a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fade 	bl	80029a2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033e6:	f7fe fb1d 	bl	8001a24 <HAL_GetTick>
 80033ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033ee:	f7fe fb19 	bl	8001a24 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e07c      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003400:	f7ff fbb0 	bl	8002b64 <LL_RCC_IsActiveFlag_PPRE2>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f1      	beq.n	80033ee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d043      	beq.n	800349e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d106      	bne.n	800342c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800341e:	f7ff f956 	bl	80026ce <LL_RCC_HSE_IsReady>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11e      	bne.n	8003466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e066      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d106      	bne.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003434:	f7ff fb12 	bl	8002a5c <LL_RCC_PLL_IsReady>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d113      	bne.n	8003466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e05b      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800344a:	f7ff f9f0 	bl	800282e <LL_RCC_MSI_IsReady>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d108      	bne.n	8003466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e050      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003458:	f7ff f966 	bl	8002728 <LL_RCC_HSI_IsReady>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e049      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fa2a 	bl	80028c4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003470:	f7fe fad8 	bl	8001a24 <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	e00a      	b.n	800348e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003478:	f7fe fad4 	bl	8001a24 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e035      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	f7ff fa2c 	bl	80028ea <LL_RCC_GetSysClkSource>
 8003492:	4602      	mov	r2, r0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	429a      	cmp	r2, r3
 800349c:	d1ec      	bne.n	8003478 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_RCC_ClockConfig+0x278>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d21b      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_RCC_ClockConfig+0x278>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 0207 	bic.w	r2, r3, #7
 80034b4:	4913      	ldr	r1, [pc, #76]	; (8003504 <HAL_RCC_ClockConfig+0x278>)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7fe fab2 	bl	8001a24 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034c4:	f7fe faae 	bl	8001a24 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e011      	b.n	80034fa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_ClockConfig+0x278>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d1ef      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80034e4:	f000 f8b4 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4a07      	ldr	r2, [pc, #28]	; (8003508 <HAL_RCC_ClockConfig+0x27c>)
 80034ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_RCC_ClockConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe fa4a 	bl	800198c <HAL_InitTick>
 80034f8:	4603      	mov	r3, r0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	58004000 	.word	0x58004000
 8003508:	20000004 	.word	0x20000004
 800350c:	20000008 	.word	0x20000008

08003510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800351e:	f7ff f9e4 	bl	80028ea <LL_RCC_GetSysClkSource>
 8003522:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003524:	f7ff facd 	bl	8002ac2 <LL_RCC_PLL_GetMainSource>
 8003528:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x2c>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d139      	bne.n	80035aa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d136      	bne.n	80035aa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800353c:	f7ff f987 	bl	800284e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d115      	bne.n	8003572 <HAL_RCC_GetSysClockFreq+0x62>
 8003546:	f7ff f982 	bl	800284e <LL_RCC_MSI_IsEnabledRangeSelect>
 800354a:	4603      	mov	r3, r0
 800354c:	2b01      	cmp	r3, #1
 800354e:	d106      	bne.n	800355e <HAL_RCC_GetSysClockFreq+0x4e>
 8003550:	f7ff f98d 	bl	800286e <LL_RCC_MSI_GetRange>
 8003554:	4603      	mov	r3, r0
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	e005      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x5a>
 800355e:	f7ff f991 	bl	8002884 <LL_RCC_MSI_GetRangeAfterStandby>
 8003562:	4603      	mov	r3, r0
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	4a36      	ldr	r2, [pc, #216]	; (8003644 <HAL_RCC_GetSysClockFreq+0x134>)
 800356c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003570:	e014      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x8c>
 8003572:	f7ff f96c 	bl	800284e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003576:	4603      	mov	r3, r0
 8003578:	2b01      	cmp	r3, #1
 800357a:	d106      	bne.n	800358a <HAL_RCC_GetSysClockFreq+0x7a>
 800357c:	f7ff f977 	bl	800286e <LL_RCC_MSI_GetRange>
 8003580:	4603      	mov	r3, r0
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	e005      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x86>
 800358a:	f7ff f97b 	bl	8002884 <LL_RCC_MSI_GetRangeAfterStandby>
 800358e:	4603      	mov	r3, r0
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	4a2b      	ldr	r2, [pc, #172]	; (8003644 <HAL_RCC_GetSysClockFreq+0x134>)
 8003598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d115      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035a8:	e012      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <HAL_RCC_GetSysClockFreq+0x138>)
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e00c      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d109      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035bc:	f7ff f85a 	bl	8002674 <LL_RCC_HSE_IsEnabledDiv2>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d102      	bne.n	80035cc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCC_GetSysClockFreq+0x138>)
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	e001      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80035cc:	4b1f      	ldr	r3, [pc, #124]	; (800364c <HAL_RCC_GetSysClockFreq+0x13c>)
 80035ce:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d0:	f7ff f98b 	bl	80028ea <LL_RCC_GetSysClkSource>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d12f      	bne.n	800363a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80035da:	f7ff fa72 	bl	8002ac2 <LL_RCC_PLL_GetMainSource>
 80035de:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0xde>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d003      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0xe4>
 80035ec:	e00d      	b.n	800360a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <HAL_RCC_GetSysClockFreq+0x138>)
 80035f0:	60fb      	str	r3, [r7, #12]
        break;
 80035f2:	e00d      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035f4:	f7ff f83e 	bl	8002674 <LL_RCC_HSE_IsEnabledDiv2>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d102      	bne.n	8003604 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_RCC_GetSysClockFreq+0x138>)
 8003600:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003602:	e005      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003606:	60fb      	str	r3, [r7, #12]
        break;
 8003608:	e002      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	60fb      	str	r3, [r7, #12]
        break;
 800360e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003610:	f7ff fa35 	bl	8002a7e <LL_RCC_PLL_GetN>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	fb03 f402 	mul.w	r4, r3, r2
 800361c:	f7ff fa46 	bl	8002aac <LL_RCC_PLL_GetDivider>
 8003620:	4603      	mov	r3, r0
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	3301      	adds	r3, #1
 8003626:	fbb4 f4f3 	udiv	r4, r4, r3
 800362a:	f7ff fa34 	bl	8002a96 <LL_RCC_PLL_GetR>
 800362e:	4603      	mov	r3, r0
 8003630:	0f5b      	lsrs	r3, r3, #29
 8003632:	3301      	adds	r3, #1
 8003634:	fbb4 f3f3 	udiv	r3, r4, r3
 8003638:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800363a:	697b      	ldr	r3, [r7, #20]
}
 800363c:	4618      	mov	r0, r3
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}
 8003644:	08006d0c 	.word	0x08006d0c
 8003648:	00f42400 	.word	0x00f42400
 800364c:	01e84800 	.word	0x01e84800

08003650 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b598      	push	{r3, r4, r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003654:	f7ff ff5c 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 8003658:	4604      	mov	r4, r0
 800365a:	f7ff f9b5 	bl	80029c8 <LL_RCC_GetAHBPrescaler>
 800365e:	4603      	mov	r3, r0
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	4a03      	ldr	r2, [pc, #12]	; (8003674 <HAL_RCC_GetHCLKFreq+0x24>)
 8003668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd98      	pop	{r3, r4, r7, pc}
 8003674:	08006cac 	.word	0x08006cac

08003678 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003678:	b598      	push	{r3, r4, r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800367c:	f7ff ffe8 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003680:	4604      	mov	r4, r0
 8003682:	f7ff f9b9 	bl	80029f8 <LL_RCC_GetAPB1Prescaler>
 8003686:	4603      	mov	r3, r0
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	4a03      	ldr	r2, [pc, #12]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x20>)
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	bd98      	pop	{r3, r4, r7, pc}
 8003698:	08006cec 	.word	0x08006cec

0800369c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800369c:	b598      	push	{r3, r4, r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80036a0:	f7ff ffd6 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 80036a4:	4604      	mov	r4, r0
 80036a6:	f7ff f9b2 	bl	8002a0e <LL_RCC_GetAPB2Prescaler>
 80036aa:	4603      	mov	r3, r0
 80036ac:	0adb      	lsrs	r3, r3, #11
 80036ae:	4a03      	ldr	r2, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd98      	pop	{r3, r4, r7, pc}
 80036bc:	08006cec 	.word	0x08006cec

080036c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	4a10      	ldr	r2, [pc, #64]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80036d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80036d8:	f7ff f981 	bl	80029de <LL_RCC_GetAHB3Prescaler>
 80036dc:	4603      	mov	r3, r0
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80036e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4a09      	ldr	r2, [pc, #36]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	0c9c      	lsrs	r4, r3, #18
 80036fc:	f7fe ff80 	bl	8002600 <HAL_PWREx_GetVoltageRange>
 8003700:	4603      	mov	r3, r0
 8003702:	4619      	mov	r1, r3
 8003704:	4620      	mov	r0, r4
 8003706:	f000 f80b 	bl	8003720 <RCC_SetFlashLatency>
 800370a:	4603      	mov	r3, r0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bd90      	pop	{r4, r7, pc}
 8003714:	08006d0c 	.word	0x08006d0c
 8003718:	08006cac 	.word	0x08006cac
 800371c:	431bde83 	.word	0x431bde83

08003720 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	; 0x38
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800372a:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <RCC_SetFlashLatency+0xf4>)
 800372c:	f107 0320 	add.w	r3, r7, #32
 8003730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003734:	6018      	str	r0, [r3, #0]
 8003736:	3304      	adds	r3, #4
 8003738:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800373a:	4a37      	ldr	r2, [pc, #220]	; (8003818 <RCC_SetFlashLatency+0xf8>)
 800373c:	f107 0318 	add.w	r3, r7, #24
 8003740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003744:	6018      	str	r0, [r3, #0]
 8003746:	3304      	adds	r3, #4
 8003748:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800374a:	4a34      	ldr	r2, [pc, #208]	; (800381c <RCC_SetFlashLatency+0xfc>)
 800374c:	f107 030c 	add.w	r3, r7, #12
 8003750:	ca07      	ldmia	r2, {r0, r1, r2}
 8003752:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003756:	2300      	movs	r3, #0
 8003758:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003760:	d11b      	bne.n	800379a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003762:	2300      	movs	r3, #0
 8003764:	633b      	str	r3, [r7, #48]	; 0x30
 8003766:	e014      	b.n	8003792 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	3338      	adds	r3, #56	; 0x38
 800376e:	443b      	add	r3, r7
 8003770:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003774:	461a      	mov	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4293      	cmp	r3, r2
 800377a:	d807      	bhi.n	800378c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	3338      	adds	r3, #56	; 0x38
 8003782:	443b      	add	r3, r7
 8003784:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800378a:	e021      	b.n	80037d0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	3301      	adds	r3, #1
 8003790:	633b      	str	r3, [r7, #48]	; 0x30
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	2b02      	cmp	r3, #2
 8003796:	d9e7      	bls.n	8003768 <RCC_SetFlashLatency+0x48>
 8003798:	e01a      	b.n	80037d0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800379a:	2300      	movs	r3, #0
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379e:	e014      	b.n	80037ca <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	3338      	adds	r3, #56	; 0x38
 80037a6:	443b      	add	r3, r7
 80037a8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80037ac:	461a      	mov	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d807      	bhi.n	80037c4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	3338      	adds	r3, #56	; 0x38
 80037ba:	443b      	add	r3, r7
 80037bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037c2:	e005      	b.n	80037d0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	3301      	adds	r3, #1
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d9e7      	bls.n	80037a0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <RCC_SetFlashLatency+0x100>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 0207 	bic.w	r2, r3, #7
 80037d8:	4911      	ldr	r1, [pc, #68]	; (8003820 <RCC_SetFlashLatency+0x100>)
 80037da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037e0:	f7fe f920 	bl	8001a24 <HAL_GetTick>
 80037e4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037e6:	e008      	b.n	80037fa <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037e8:	f7fe f91c 	bl	8001a24 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e007      	b.n	800380a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <RCC_SetFlashLatency+0x100>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003804:	429a      	cmp	r2, r3
 8003806:	d1ef      	bne.n	80037e8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3738      	adds	r7, #56	; 0x38
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	08006050 	.word	0x08006050
 8003818:	08006058 	.word	0x08006058
 800381c:	08006060 	.word	0x08006060
 8003820:	58004000 	.word	0x58004000

08003824 <LL_RCC_LSE_IsReady>:
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b02      	cmp	r3, #2
 8003836:	d101      	bne.n	800383c <LL_RCC_LSE_IsReady+0x18>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <LL_RCC_LSE_IsReady+0x1a>
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <LL_RCC_SetUSARTClockSource>:
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800384e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003852:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	43db      	mvns	r3, r3
 800385c:	401a      	ands	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <LL_RCC_SetI2SClockSource>:
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800387e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800388a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <LL_RCC_SetLPUARTClockSource>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80038a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <LL_RCC_SetI2CClockSource>:
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80038d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80038e2:	43db      	mvns	r3, r3
 80038e4:	401a      	ands	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80038ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <LL_RCC_SetLPTIMClockSource>:
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800390a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	43db      	mvns	r3, r3
 800391a:	401a      	ands	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <LL_RCC_SetRNGClockSource>:
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800393c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003948:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <LL_RCC_SetADCClockSource>:
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <LL_RCC_SetRTCClockSource>:
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800399c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <LL_RCC_GetRTCClockSource>:
{
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <LL_RCC_ForceBackupDomainReset>:
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <LL_RCC_ReleaseBackupDomainReset>:
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a02:	bf00      	nop
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003a18:	2300      	movs	r3, #0
 8003a1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d058      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003a2c:	f7fe fdda 	bl	80025e4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a30:	f7fd fff8 	bl	8001a24 <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a36:	e009      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a38:	f7fd fff4 	bl	8001a24 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	74fb      	strb	r3, [r7, #19]
        break;
 8003a4a:	e006      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a4c:	4b7b      	ldr	r3, [pc, #492]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a58:	d1ee      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d13c      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003a60:	f7ff ffa7 	bl	80039b2 <LL_RCC_GetRTCClockSource>
 8003a64:	4602      	mov	r2, r0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d00f      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7c:	f7ff ffa5 	bl	80039ca <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a80:	f7ff ffb3 	bl	80039ea <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d014      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd ffc4 	bl	8001a24 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fd ffc0 	bl	8001a24 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d902      	bls.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	74fb      	strb	r3, [r7, #19]
            break;
 8003ab6:	e004      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ab8:	f7ff feb4 	bl	8003824 <LL_RCC_LSE_IsReady>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d1ee      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff5b 	bl	8003988 <LL_RCC_SetRTCClockSource>
 8003ad2:	e004      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	74bb      	strb	r3, [r7, #18]
 8003ad8:	e001      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fea9 	bl	8003846 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fe9e 	bl	8003846 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fec0 	bl	80038a0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fee6 	bl	8003902 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fedb 	bl	8003902 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fed0 	bl	8003902 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fea9 	bl	80038ca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fe9e 	bl	80038ca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fe93 	bl	80038ca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d011      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fe5e 	bl	8003876 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fea5 	bl	8003934 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c00:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d011      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fea3 	bl	800395e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c20:	d107      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003c32:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	58000400 	.word	0x58000400

08003c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0c6      	b.n	8003de0 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c62:	d009      	beq.n	8003c78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	61da      	str	r2, [r3, #28]
 8003c6a:	e005      	b.n	8003c78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7fd fc99 	bl	80015c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cb2:	d902      	bls.n	8003cba <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e002      	b.n	8003cc0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cbe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cc8:	d007      	beq.n	8003cda <HAL_SPI_Init+0x9a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cd2:	d002      	beq.n	8003cda <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1c:	ea42 0103 	orr.w	r1, r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d38:	d11b      	bne.n	8003d72 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d4a:	d903      	bls.n	8003d54 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
 8003d52:	e002      	b.n	8003d5a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d107      	bne.n	8003d72 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	f003 0204 	and.w	r2, r3, #4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d98:	ea42 0103 	orr.w	r1, r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db2:	d105      	bne.n	8003dc0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	b292      	uxth	r2, r2
 8003dbe:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_SPI_Transmit+0x22>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e17a      	b.n	8004100 <HAL_SPI_Transmit+0x318>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e12:	f7fd fe07 	bl	8001a24 <HAL_GetTick>
 8003e16:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d002      	beq.n	8003e2e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e2c:	e15f      	b.n	80040ee <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_Transmit+0x52>
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e3e:	e156      	b.n	80040ee <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2203      	movs	r2, #3
 8003e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8a:	d10f      	bne.n	8003eac <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eaa:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ed4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d007      	beq.n	8003ef4 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003efc:	d94b      	bls.n	8003f96 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_SPI_Transmit+0x124>
 8003f06:	8afb      	ldrh	r3, [r7, #22]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d13e      	bne.n	8003f8a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	1c9a      	adds	r2, r3, #2
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f30:	e02b      	b.n	8003f8a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d112      	bne.n	8003f66 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	1c9a      	adds	r2, r3, #2
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f64:	e011      	b.n	8003f8a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f66:	f7fd fd5d 	bl	8001a24 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d803      	bhi.n	8003f7e <HAL_SPI_Transmit+0x196>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d102      	bne.n	8003f84 <HAL_SPI_Transmit+0x19c>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d102      	bne.n	8003f8a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f88:	e0b1      	b.n	80040ee <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ce      	bne.n	8003f32 <HAL_SPI_Transmit+0x14a>
 8003f94:	e07c      	b.n	8004090 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_SPI_Transmit+0x1bc>
 8003f9e:	8afb      	ldrh	r3, [r7, #22]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d170      	bne.n	8004086 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d912      	bls.n	8003fd4 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	881a      	ldrh	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	1c9a      	adds	r2, r3, #2
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b02      	subs	r3, #2
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fd2:	e058      	b.n	8004086 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	7812      	ldrb	r2, [r2, #0]
 8003fe0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ffa:	e044      	b.n	8004086 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	d12b      	bne.n	8004062 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d912      	bls.n	800403a <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b02      	subs	r3, #2
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004038:	e025      	b.n	8004086 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004060:	e011      	b.n	8004086 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004062:	f7fd fcdf 	bl	8001a24 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d803      	bhi.n	800407a <HAL_SPI_Transmit+0x292>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d102      	bne.n	8004080 <HAL_SPI_Transmit+0x298>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004084:	e033      	b.n	80040ee <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1b5      	bne.n	8003ffc <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004098:	d107      	bne.n	80040aa <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040a8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fe6e 	bl	8004d90 <SPI_EndRxTxTransaction>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e000      	b.n	80040ee <HAL_SPI_Transmit+0x306>
  }

error:
 80040ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08c      	sub	sp, #48	; 0x30
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800412e:	d112      	bne.n	8004156 <HAL_SPI_Receive+0x4e>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10e      	bne.n	8004156 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2204      	movs	r2, #4
 800413c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004140:	88fa      	ldrh	r2, [r7, #6]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f9c4 	bl	80044da <HAL_SPI_TransmitReceive>
 8004152:	4603      	mov	r3, r0
 8004154:	e1bd      	b.n	80044d2 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_SPI_Receive+0x5c>
 8004160:	2302      	movs	r3, #2
 8004162:	e1b6      	b.n	80044d2 <HAL_SPI_Receive+0x3ca>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800416c:	f7fd fc5a 	bl	8001a24 <HAL_GetTick>
 8004170:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d003      	beq.n	8004186 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 800417e:	2302      	movs	r3, #2
 8004180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8004184:	e19b      	b.n	80044be <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_SPI_Receive+0x8a>
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8004198:	e191      	b.n	80044be <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2204      	movs	r2, #4
 800419e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	88fa      	ldrh	r2, [r7, #6]
 80041ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e4:	d118      	bne.n	8004218 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004204:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004220:	d908      	bls.n	8004234 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	e007      	b.n	8004244 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004242:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424c:	d10f      	bne.n	800426e <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800426c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d007      	beq.n	800428c <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004294:	d869      	bhi.n	800436a <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004296:	e031      	b.n	80042fc <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d117      	bne.n	80042d6 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f103 020c 	add.w	r2, r3, #12
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80042d4:	e012      	b.n	80042fc <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d6:	f7fd fba5 	bl	8001a24 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d803      	bhi.n	80042ee <HAL_SPI_Receive+0x1e6>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d102      	bne.n	80042f4 <HAL_SPI_Receive+0x1ec>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d103      	bne.n	80042fc <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80042fa:	e0e0      	b.n	80044be <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1c7      	bne.n	8004298 <HAL_SPI_Receive+0x190>
 8004308:	e035      	b.n	8004376 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d115      	bne.n	8004344 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	b292      	uxth	r2, r2
 8004324:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	1c9a      	adds	r2, r3, #2
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004342:	e012      	b.n	800436a <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004344:	f7fd fb6e 	bl	8001a24 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d803      	bhi.n	800435c <HAL_SPI_Receive+0x254>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d102      	bne.n	8004362 <HAL_SPI_Receive+0x25a>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004368:	e0a9      	b.n	80044be <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1c9      	bne.n	800430a <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437e:	d178      	bne.n	8004472 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800438e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2201      	movs	r2, #1
 8004398:	2101      	movs	r1, #1
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fb82 	bl	8004aa4 <SPI_WaitFlagStateUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80043ac:	e087      	b.n	80044be <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b6:	d907      	bls.n	80043c8 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	b292      	uxth	r2, r2
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	e008      	b.n	80043da <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f103 020c 	add.w	r2, r3, #12
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	7812      	ldrb	r2, [r2, #0]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	2101      	movs	r1, #1
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fb5d 	bl	8004aa4 <SPI_WaitFlagStateUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f4:	f043 0202 	orr.w	r2, r3, #2
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8004402:	e05c      	b.n	80044be <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800440c:	d105      	bne.n	800441a <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	e02b      	b.n	8004472 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800442a:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004434:	d11d      	bne.n	8004472 <HAL_SPI_Receive+0x36a>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	2b02      	cmp	r3, #2
 800443c:	d119      	bne.n	8004472 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2201      	movs	r2, #1
 8004446:	2101      	movs	r1, #1
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fb2b 	bl	8004aa4 <SPI_WaitFlagStateUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004458:	f043 0202 	orr.w	r2, r3, #2
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004466:	e02a      	b.n	80044be <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8004470:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004472:	6a3a      	ldr	r2, [r7, #32]
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fc32 	bl	8004ce0 <SPI_EndRxTransaction>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b10      	cmp	r3, #16
 8004494:	d10a      	bne.n	80044ac <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449a:	f043 0202 	orr.w	r2, r3, #2
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80044aa:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044ba:	e000      	b.n	80044be <HAL_SPI_Receive+0x3b6>
  }

error :
 80044bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3728      	adds	r7, #40	; 0x28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b092      	sub	sp, #72	; 0x48
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044f0:	2301      	movs	r3, #1
 80044f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x2e>
 8004504:	2302      	movs	r3, #2
 8004506:	e2c8      	b.n	8004a9a <HAL_SPI_TransmitReceive+0x5c0>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004510:	f7fd fa88 	bl	8001a24 <HAL_GetTick>
 8004514:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800451c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8004526:	887b      	ldrh	r3, [r7, #2]
 8004528:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800453e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004542:	2b01      	cmp	r3, #1
 8004544:	d00f      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x8c>
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454c:	d107      	bne.n	800455e <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <HAL_SPI_TransmitReceive+0x84>
 8004556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800455a:	2b04      	cmp	r3, #4
 800455c:	d003      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 800455e:	2302      	movs	r3, #2
 8004560:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8004564:	e28f      	b.n	8004a86 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x9e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x9e>
 8004572:	887b      	ldrh	r3, [r7, #2]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 800457e:	e282      	b.n	8004a86 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b04      	cmp	r3, #4
 800458a:	d003      	beq.n	8004594 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2205      	movs	r2, #5
 8004590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	887a      	ldrh	r2, [r7, #2]
 80045ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	887a      	ldrh	r2, [r7, #2]
 80045ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d6:	d10f      	bne.n	80045f8 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004600:	d802      	bhi.n	8004608 <HAL_SPI_TransmitReceive+0x12e>
 8004602:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004604:	2b01      	cmp	r3, #1
 8004606:	d908      	bls.n	800461a <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004616:	605a      	str	r2, [r3, #4]
 8004618:	e007      	b.n	800462a <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004628:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d007      	beq.n	8004648 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004650:	f240 80a4 	bls.w	800479c <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_SPI_TransmitReceive+0x18a>
 800465c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800465e:	2b01      	cmp	r3, #1
 8004660:	f040 808e 	bne.w	8004780 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	881a      	ldrh	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	1c9a      	adds	r2, r3, #2
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004688:	e07a      	b.n	8004780 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b02      	cmp	r3, #2
 8004696:	d13f      	bne.n	8004718 <HAL_SPI_TransmitReceive+0x23e>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d03a      	beq.n	8004718 <HAL_SPI_TransmitReceive+0x23e>
 80046a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d137      	bne.n	8004718 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	881a      	ldrh	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	1c9a      	adds	r2, r3, #2
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d11e      	bne.n	8004718 <HAL_SPI_TransmitReceive+0x23e>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e2:	d119      	bne.n	8004718 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10c      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x22e>
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004706:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004716:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b01      	cmp	r3, #1
 8004724:	d11c      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x286>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	b292      	uxth	r2, r2
 800473e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	1c9a      	adds	r2, r3, #2
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800475c:	2301      	movs	r3, #1
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004760:	f7fd f960 	bl	8001a24 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800476c:	429a      	cmp	r2, r3
 800476e:	d807      	bhi.n	8004780 <HAL_SPI_TransmitReceive+0x2a6>
 8004770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d003      	beq.n	8004780 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800477e:	e182      	b.n	8004a86 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	f47f af7f 	bne.w	800468a <HAL_SPI_TransmitReceive+0x1b0>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	f47f af78 	bne.w	800468a <HAL_SPI_TransmitReceive+0x1b0>
 800479a:	e103      	b.n	80049a4 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_SPI_TransmitReceive+0x2d2>
 80047a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	f040 80ef 	bne.w	800498a <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d912      	bls.n	80047dc <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	881a      	ldrh	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	1c9a      	adds	r2, r3, #2
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b02      	subs	r3, #2
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047da:	e0d6      	b.n	800498a <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	7812      	ldrb	r2, [r2, #0]
 80047e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004802:	e0c2      	b.n	800498a <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d158      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x3ea>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d053      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x3ea>
 800481c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d150      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d912      	bls.n	8004852 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	881a      	ldrh	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	1c9a      	adds	r2, r3, #2
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b02      	subs	r3, #2
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004850:	e012      	b.n	8004878 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d11e      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x3ea>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488e:	d119      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10c      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x3da>
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b2:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048c2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d148      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x48a>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d042      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d923      	bls.n	8004932 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	b292      	uxth	r2, r2
 80048f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	1c9a      	adds	r2, r3, #2
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b02      	subs	r3, #2
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d81f      	bhi.n	8004960 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	e016      	b.n	8004960 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f103 020c 	add.w	r2, r3, #12
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004960:	2301      	movs	r3, #1
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004964:	f7fd f85e 	bl	8001a24 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004970:	429a      	cmp	r2, r3
 8004972:	d803      	bhi.n	800497c <HAL_SPI_TransmitReceive+0x4a2>
 8004974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d102      	bne.n	8004982 <HAL_SPI_TransmitReceive+0x4a8>
 800497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8004988:	e07d      	b.n	8004a86 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	f47f af37 	bne.w	8004804 <HAL_SPI_TransmitReceive+0x32a>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f47f af30 	bne.w	8004804 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ac:	d146      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80049ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b4:	2201      	movs	r2, #1
 80049b6:	2101      	movs	r1, #1
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f873 	bl	8004aa4 <SPI_WaitFlagStateUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c8:	f043 0202 	orr.w	r2, r3, #2
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80049d6:	e056      	b.n	8004a86 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049e0:	d105      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	e026      	b.n	8004a3c <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	330c      	adds	r3, #12
 80049f4:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049fe:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d119      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0e:	2201      	movs	r2, #1
 8004a10:	2101      	movs	r1, #1
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f846 	bl	8004aa4 <SPI_WaitFlagStateUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d009      	beq.n	8004a32 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a22:	f043 0202 	orr.w	r2, r3, #2
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8004a30:	e029      	b.n	8004a86 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d10d      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	f043 0202 	orr.w	r2, r3, #2
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004a5e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f990 	bl	8004d90 <SPI_EndRxTxTransaction>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d006      	beq.n	8004a84 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	661a      	str	r2, [r3, #96]	; 0x60
 8004a82:	e000      	b.n	8004a86 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8004a84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3740      	adds	r7, #64	; 0x40
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ab4:	f7fc ffb6 	bl	8001a24 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ac4:	f7fc ffae 	bl	8001a24 <HAL_GetTick>
 8004ac8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aca:	4b39      	ldr	r3, [pc, #228]	; (8004bb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	015b      	lsls	r3, r3, #5
 8004ad0:	0d1b      	lsrs	r3, r3, #20
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	fb02 f303 	mul.w	r3, r2, r3
 8004ad8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ada:	e054      	b.n	8004b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d050      	beq.n	8004b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ae4:	f7fc ff9e 	bl	8001a24 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d902      	bls.n	8004afa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d13d      	bne.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b12:	d111      	bne.n	8004b38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1c:	d004      	beq.n	8004b28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b26:	d107      	bne.n	8004b38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b40:	d10f      	bne.n	8004b62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e017      	b.n	8004ba6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	bf0c      	ite	eq
 8004b96:	2301      	moveq	r3, #1
 8004b98:	2300      	movne	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d19b      	bne.n	8004adc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000004 	.word	0x20000004

08004bb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004bc6:	f7fc ff2d 	bl	8001a24 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004bd6:	f7fc ff25 	bl	8001a24 <HAL_GetTick>
 8004bda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004be4:	4b3d      	ldr	r3, [pc, #244]	; (8004cdc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	00da      	lsls	r2, r3, #3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	0d1b      	lsrs	r3, r3, #20
 8004bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bfc:	e060      	b.n	8004cc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c04:	d107      	bne.n	8004c16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d050      	beq.n	8004cc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c1e:	f7fc ff01 	bl	8001a24 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d902      	bls.n	8004c34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d13d      	bne.n	8004cb0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4c:	d111      	bne.n	8004c72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c56:	d004      	beq.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c60:	d107      	bne.n	8004c72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7a:	d10f      	bne.n	8004c9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e010      	b.n	8004cd2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d196      	bne.n	8004bfe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3728      	adds	r7, #40	; 0x28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000004 	.word	0x20000004

08004ce0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf4:	d111      	bne.n	8004d1a <SPI_EndRxTransaction+0x3a>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cfe:	d004      	beq.n	8004d0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d08:	d107      	bne.n	8004d1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d18:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2200      	movs	r2, #0
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff febd 	bl	8004aa4 <SPI_WaitFlagStateUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d34:	f043 0220 	orr.w	r2, r3, #32
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e023      	b.n	8004d88 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d48:	d11d      	bne.n	8004d86 <SPI_EndRxTransaction+0xa6>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d52:	d004      	beq.n	8004d5e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5c:	d113      	bne.n	8004d86 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff ff22 	bl	8004bb4 <SPI_WaitFifoStateUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e000      	b.n	8004d88 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff ff03 	bl	8004bb4 <SPI_WaitFifoStateUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e027      	b.n	8004e14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2180      	movs	r1, #128	; 0x80
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff fe68 	bl	8004aa4 <SPI_WaitFlagStateUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e014      	b.n	8004e14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7ff fedc 	bl	8004bb4 <SPI_WaitFifoStateUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e000      	b.n	8004e14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e049      	b.n	8004ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc fcbc 	bl	80017c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f000 f944 	bl	80050e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d001      	beq.n	8004ee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e02e      	b.n	8004f42 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a16      	ldr	r2, [pc, #88]	; (8004f4c <HAL_TIM_Base_Start+0x80>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_TIM_Base_Start+0x34>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d115      	bne.n	8004f2c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <HAL_TIM_Base_Start+0x84>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b06      	cmp	r3, #6
 8004f10:	d015      	beq.n	8004f3e <HAL_TIM_Base_Start+0x72>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f18:	d011      	beq.n	8004f3e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0201 	orr.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2a:	e008      	b.n	8004f3e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e000      	b.n	8004f40 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	00010007 	.word	0x00010007

08004f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_TIM_ConfigClockSource+0x1c>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e0b6      	b.n	80050de <HAL_TIM_ConfigClockSource+0x18a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fac:	d03e      	beq.n	800502c <HAL_TIM_ConfigClockSource+0xd8>
 8004fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb2:	f200 8087 	bhi.w	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fba:	f000 8086 	beq.w	80050ca <HAL_TIM_ConfigClockSource+0x176>
 8004fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc2:	d87f      	bhi.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fc4:	2b70      	cmp	r3, #112	; 0x70
 8004fc6:	d01a      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0xaa>
 8004fc8:	2b70      	cmp	r3, #112	; 0x70
 8004fca:	d87b      	bhi.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fcc:	2b60      	cmp	r3, #96	; 0x60
 8004fce:	d050      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x11e>
 8004fd0:	2b60      	cmp	r3, #96	; 0x60
 8004fd2:	d877      	bhi.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fd4:	2b50      	cmp	r3, #80	; 0x50
 8004fd6:	d03c      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0xfe>
 8004fd8:	2b50      	cmp	r3, #80	; 0x50
 8004fda:	d873      	bhi.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	d058      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x13e>
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	d86f      	bhi.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fe4:	2b30      	cmp	r3, #48	; 0x30
 8004fe6:	d064      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x15e>
 8004fe8:	2b30      	cmp	r3, #48	; 0x30
 8004fea:	d86b      	bhi.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d060      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d867      	bhi.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d05c      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d05a      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ffc:	e062      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6899      	ldr	r1, [r3, #8]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f000 f946 	bl	800529e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	609a      	str	r2, [r3, #8]
      break;
 800502a:	e04f      	b.n	80050cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	6899      	ldr	r1, [r3, #8]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f000 f92f 	bl	800529e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800504e:	609a      	str	r2, [r3, #8]
      break;
 8005050:	e03c      	b.n	80050cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	461a      	mov	r2, r3
 8005060:	f000 f8a4 	bl	80051ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2150      	movs	r1, #80	; 0x50
 800506a:	4618      	mov	r0, r3
 800506c:	f000 f8fb 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 8005070:	e02c      	b.n	80050cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6859      	ldr	r1, [r3, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	461a      	mov	r2, r3
 8005080:	f000 f8c2 	bl	8005208 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2160      	movs	r1, #96	; 0x60
 800508a:	4618      	mov	r0, r3
 800508c:	f000 f8eb 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 8005090:	e01c      	b.n	80050cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6859      	ldr	r1, [r3, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	461a      	mov	r2, r3
 80050a0:	f000 f884 	bl	80051ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2140      	movs	r1, #64	; 0x40
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f8db 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 80050b0:	e00c      	b.n	80050cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4619      	mov	r1, r3
 80050bc:	4610      	mov	r0, r2
 80050be:	f000 f8d2 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 80050c2:	e003      	b.n	80050cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
      break;
 80050c8:	e000      	b.n	80050cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a29      	ldr	r2, [pc, #164]	; (80051a0 <TIM_Base_SetConfig+0xb8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_Base_SetConfig+0x20>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005106:	d108      	bne.n	800511a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <TIM_Base_SetConfig+0xb8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_Base_SetConfig+0x52>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005128:	d007      	beq.n	800513a <TIM_Base_SetConfig+0x52>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <TIM_Base_SetConfig+0xbc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_Base_SetConfig+0x52>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <TIM_Base_SetConfig+0xc0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d108      	bne.n	800514c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a0b      	ldr	r2, [pc, #44]	; (80051a0 <TIM_Base_SetConfig+0xb8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d007      	beq.n	8005188 <TIM_Base_SetConfig+0xa0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <TIM_Base_SetConfig+0xbc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_Base_SetConfig+0xa0>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a09      	ldr	r2, [pc, #36]	; (80051a8 <TIM_Base_SetConfig+0xc0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d103      	bne.n	8005190 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	615a      	str	r2, [r3, #20]
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800

080051ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 030a 	bic.w	r3, r3, #10
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr

08005208 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f023 0210 	bic.w	r2, r3, #16
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005232:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	031b      	lsls	r3, r3, #12
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005244:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	621a      	str	r2, [r3, #32]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	f043 0307 	orr.w	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	021a      	lsls	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	609a      	str	r2, [r3, #8]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr

080052dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e04a      	b.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d108      	bne.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005324:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a11      	ldr	r2, [pc, #68]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d10c      	bne.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4313      	orrs	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	40012c00 	.word	0x40012c00

08005398 <LL_RCC_GetUSARTClockSource>:
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80053a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	401a      	ands	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	4313      	orrs	r3, r2
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <LL_RCC_GetLPUARTClockSource>:
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80053c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4013      	ands	r3, r2
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr

080053da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e042      	b.n	8005472 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fc f9f2 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	; 0x24
 8005408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8b3 	bl	8005588 <UART_SetConfig>
 8005422:	4603      	mov	r3, r0
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e022      	b.n	8005472 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fb1b 	bl	8005a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005448:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005458:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fba1 	bl	8005bb2 <UART_CheckIdleState>
 8005470:	4603      	mov	r3, r0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b08a      	sub	sp, #40	; 0x28
 800547e:	af02      	add	r7, sp, #8
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005490:	2b20      	cmp	r3, #32
 8005492:	d173      	bne.n	800557c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_UART_Transmit+0x26>
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e06c      	b.n	800557e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2221      	movs	r2, #33	; 0x21
 80054b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b4:	f7fc fab6 	bl	8001a24 <HAL_GetTick>
 80054b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	88fa      	ldrh	r2, [r7, #6]
 80054c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d2:	d108      	bne.n	80054e6 <HAL_UART_Transmit+0x6c>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	e003      	b.n	80054ee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054ee:	e02c      	b.n	800554a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2200      	movs	r2, #0
 80054f8:	2180      	movs	r1, #128	; 0x80
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fba7 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e039      	b.n	800557e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10b      	bne.n	8005528 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	3302      	adds	r3, #2
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	e007      	b.n	8005538 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	781a      	ldrb	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	3301      	adds	r3, #1
 8005536:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1cc      	bne.n	80054f0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	2140      	movs	r1, #64	; 0x40
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fb74 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e006      	b.n	800557e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e000      	b.n	800557e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800557c:	2302      	movs	r3, #2
  }
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800558c:	b08c      	sub	sp, #48	; 0x30
 800558e:	af00      	add	r7, sp, #0
 8005590:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4b94      	ldr	r3, [pc, #592]	; (8005808 <UART_SetConfig+0x280>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a89      	ldr	r2, [pc, #548]	; (800580c <UART_SetConfig+0x284>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f0:	4313      	orrs	r3, r2
 80055f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80055fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005608:	430b      	orrs	r3, r1
 800560a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	f023 010f 	bic.w	r1, r3, #15
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a7a      	ldr	r2, [pc, #488]	; (8005810 <UART_SetConfig+0x288>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d127      	bne.n	800567c <UART_SetConfig+0xf4>
 800562c:	2003      	movs	r0, #3
 800562e:	f7ff feb3 	bl	8005398 <LL_RCC_GetUSARTClockSource>
 8005632:	4603      	mov	r3, r0
 8005634:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005638:	2b03      	cmp	r3, #3
 800563a:	d81b      	bhi.n	8005674 <UART_SetConfig+0xec>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0xbc>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005655 	.word	0x08005655
 8005648:	08005665 	.word	0x08005665
 800564c:	0800565d 	.word	0x0800565d
 8005650:	0800566d 	.word	0x0800566d
 8005654:	2301      	movs	r3, #1
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800565a:	e080      	b.n	800575e <UART_SetConfig+0x1d6>
 800565c:	2302      	movs	r3, #2
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005662:	e07c      	b.n	800575e <UART_SetConfig+0x1d6>
 8005664:	2304      	movs	r3, #4
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800566a:	e078      	b.n	800575e <UART_SetConfig+0x1d6>
 800566c:	2308      	movs	r3, #8
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005672:	e074      	b.n	800575e <UART_SetConfig+0x1d6>
 8005674:	2310      	movs	r3, #16
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567a:	e070      	b.n	800575e <UART_SetConfig+0x1d6>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a64      	ldr	r2, [pc, #400]	; (8005814 <UART_SetConfig+0x28c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d138      	bne.n	80056f8 <UART_SetConfig+0x170>
 8005686:	200c      	movs	r0, #12
 8005688:	f7ff fe86 	bl	8005398 <LL_RCC_GetUSARTClockSource>
 800568c:	4603      	mov	r3, r0
 800568e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d82c      	bhi.n	80056f0 <UART_SetConfig+0x168>
 8005696:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x114>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	080056d1 	.word	0x080056d1
 80056a0:	080056f1 	.word	0x080056f1
 80056a4:	080056f1 	.word	0x080056f1
 80056a8:	080056f1 	.word	0x080056f1
 80056ac:	080056e1 	.word	0x080056e1
 80056b0:	080056f1 	.word	0x080056f1
 80056b4:	080056f1 	.word	0x080056f1
 80056b8:	080056f1 	.word	0x080056f1
 80056bc:	080056d9 	.word	0x080056d9
 80056c0:	080056f1 	.word	0x080056f1
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d6:	e042      	b.n	800575e <UART_SetConfig+0x1d6>
 80056d8:	2302      	movs	r3, #2
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056de:	e03e      	b.n	800575e <UART_SetConfig+0x1d6>
 80056e0:	2304      	movs	r3, #4
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056e6:	e03a      	b.n	800575e <UART_SetConfig+0x1d6>
 80056e8:	2308      	movs	r3, #8
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ee:	e036      	b.n	800575e <UART_SetConfig+0x1d6>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f6:	e032      	b.n	800575e <UART_SetConfig+0x1d6>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a43      	ldr	r2, [pc, #268]	; (800580c <UART_SetConfig+0x284>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d12a      	bne.n	8005758 <UART_SetConfig+0x1d0>
 8005702:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005706:	f7ff fe59 	bl	80053bc <LL_RCC_GetLPUARTClockSource>
 800570a:	4603      	mov	r3, r0
 800570c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005710:	d01a      	beq.n	8005748 <UART_SetConfig+0x1c0>
 8005712:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005716:	d81b      	bhi.n	8005750 <UART_SetConfig+0x1c8>
 8005718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571c:	d00c      	beq.n	8005738 <UART_SetConfig+0x1b0>
 800571e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005722:	d815      	bhi.n	8005750 <UART_SetConfig+0x1c8>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <UART_SetConfig+0x1a8>
 8005728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572c:	d008      	beq.n	8005740 <UART_SetConfig+0x1b8>
 800572e:	e00f      	b.n	8005750 <UART_SetConfig+0x1c8>
 8005730:	2300      	movs	r3, #0
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005736:	e012      	b.n	800575e <UART_SetConfig+0x1d6>
 8005738:	2302      	movs	r3, #2
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573e:	e00e      	b.n	800575e <UART_SetConfig+0x1d6>
 8005740:	2304      	movs	r3, #4
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005746:	e00a      	b.n	800575e <UART_SetConfig+0x1d6>
 8005748:	2308      	movs	r3, #8
 800574a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800574e:	e006      	b.n	800575e <UART_SetConfig+0x1d6>
 8005750:	2310      	movs	r3, #16
 8005752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005756:	e002      	b.n	800575e <UART_SetConfig+0x1d6>
 8005758:	2310      	movs	r3, #16
 800575a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a2a      	ldr	r2, [pc, #168]	; (800580c <UART_SetConfig+0x284>)
 8005764:	4293      	cmp	r3, r2
 8005766:	f040 80a4 	bne.w	80058b2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800576a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800576e:	2b08      	cmp	r3, #8
 8005770:	d823      	bhi.n	80057ba <UART_SetConfig+0x232>
 8005772:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <UART_SetConfig+0x1f0>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	0800579d 	.word	0x0800579d
 800577c:	080057bb 	.word	0x080057bb
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057bb 	.word	0x080057bb
 8005788:	080057ab 	.word	0x080057ab
 800578c:	080057bb 	.word	0x080057bb
 8005790:	080057bb 	.word	0x080057bb
 8005794:	080057bb 	.word	0x080057bb
 8005798:	080057b3 	.word	0x080057b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800579c:	f7fd ff6c 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 80057a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057a2:	e010      	b.n	80057c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a4:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <UART_SetConfig+0x290>)
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057a8:	e00d      	b.n	80057c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057aa:	f7fd feb1 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80057ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057b0:	e009      	b.n	80057c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057b8:	e005      	b.n	80057c6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80057c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8137 	beq.w	8005a3c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	4a12      	ldr	r2, [pc, #72]	; (800581c <UART_SetConfig+0x294>)
 80057d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d8:	461a      	mov	r2, r3
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	4413      	add	r3, r2
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d305      	bcc.n	80057fe <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d910      	bls.n	8005820 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005804:	e11a      	b.n	8005a3c <UART_SetConfig+0x4b4>
 8005806:	bf00      	nop
 8005808:	cfff69f3 	.word	0xcfff69f3
 800580c:	40008000 	.word	0x40008000
 8005810:	40013800 	.word	0x40013800
 8005814:	40004400 	.word	0x40004400
 8005818:	00f42400 	.word	0x00f42400
 800581c:	08006d4c 	.word	0x08006d4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	2200      	movs	r2, #0
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	4a8e      	ldr	r2, [pc, #568]	; (8005a68 <UART_SetConfig+0x4e0>)
 800582e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005832:	b29b      	uxth	r3, r3
 8005834:	2200      	movs	r2, #0
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005842:	f7fa fc99 	bl	8000178 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	020b      	lsls	r3, r1, #8
 8005858:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800585c:	0202      	lsls	r2, r0, #8
 800585e:	6979      	ldr	r1, [r7, #20]
 8005860:	6849      	ldr	r1, [r1, #4]
 8005862:	0849      	lsrs	r1, r1, #1
 8005864:	2000      	movs	r0, #0
 8005866:	460c      	mov	r4, r1
 8005868:	4605      	mov	r5, r0
 800586a:	eb12 0804 	adds.w	r8, r2, r4
 800586e:	eb43 0905 	adc.w	r9, r3, r5
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	469a      	mov	sl, r3
 800587a:	4693      	mov	fp, r2
 800587c:	4652      	mov	r2, sl
 800587e:	465b      	mov	r3, fp
 8005880:	4640      	mov	r0, r8
 8005882:	4649      	mov	r1, r9
 8005884:	f7fa fc78 	bl	8000178 <__aeabi_uldivmod>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	4613      	mov	r3, r2
 800588e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005896:	d308      	bcc.n	80058aa <UART_SetConfig+0x322>
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589e:	d204      	bcs.n	80058aa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	e0c8      	b.n	8005a3c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058b0:	e0c4      	b.n	8005a3c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ba:	d167      	bne.n	800598c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80058bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d828      	bhi.n	8005916 <UART_SetConfig+0x38e>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0x344>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	08005901 	.word	0x08005901
 80058d8:	08005917 	.word	0x08005917
 80058dc:	08005907 	.word	0x08005907
 80058e0:	08005917 	.word	0x08005917
 80058e4:	08005917 	.word	0x08005917
 80058e8:	08005917 	.word	0x08005917
 80058ec:	0800590f 	.word	0x0800590f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f0:	f7fd fec2 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 80058f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058f6:	e014      	b.n	8005922 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f8:	f7fd fed0 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 80058fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058fe:	e010      	b.n	8005922 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005900:	4b5a      	ldr	r3, [pc, #360]	; (8005a6c <UART_SetConfig+0x4e4>)
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005904:	e00d      	b.n	8005922 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005906:	f7fd fe03 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800590c:	e009      	b.n	8005922 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005914:	e005      	b.n	8005922 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8089 	beq.w	8005a3c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	4a4e      	ldr	r2, [pc, #312]	; (8005a68 <UART_SetConfig+0x4e0>)
 8005930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005934:	461a      	mov	r2, r3
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	fbb3 f3f2 	udiv	r3, r3, r2
 800593c:	005a      	lsls	r2, r3, #1
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	441a      	add	r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	2b0f      	cmp	r3, #15
 8005954:	d916      	bls.n	8005984 <UART_SetConfig+0x3fc>
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595c:	d212      	bcs.n	8005984 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f023 030f 	bic.w	r3, r3, #15
 8005966:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	b29b      	uxth	r3, r3
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	b29a      	uxth	r2, r3
 8005974:	8bfb      	ldrh	r3, [r7, #30]
 8005976:	4313      	orrs	r3, r2
 8005978:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	8bfa      	ldrh	r2, [r7, #30]
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	e05b      	b.n	8005a3c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800598a:	e057      	b.n	8005a3c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800598c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005990:	2b08      	cmp	r3, #8
 8005992:	d828      	bhi.n	80059e6 <UART_SetConfig+0x45e>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0x414>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059c1 	.word	0x080059c1
 80059a0:	080059c9 	.word	0x080059c9
 80059a4:	080059d1 	.word	0x080059d1
 80059a8:	080059e7 	.word	0x080059e7
 80059ac:	080059d7 	.word	0x080059d7
 80059b0:	080059e7 	.word	0x080059e7
 80059b4:	080059e7 	.word	0x080059e7
 80059b8:	080059e7 	.word	0x080059e7
 80059bc:	080059df 	.word	0x080059df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c0:	f7fd fe5a 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 80059c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059c6:	e014      	b.n	80059f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c8:	f7fd fe68 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 80059cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059ce:	e010      	b.n	80059f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d0:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <UART_SetConfig+0x4e4>)
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059d4:	e00d      	b.n	80059f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d6:	f7fd fd9b 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80059da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059dc:	e009      	b.n	80059f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059e4:	e005      	b.n	80059f2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059f0:	bf00      	nop
    }

    if (pclk != 0U)
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d021      	beq.n	8005a3c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <UART_SetConfig+0x4e0>)
 80059fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a02:	461a      	mov	r2, r3
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	085b      	lsrs	r3, r3, #1
 8005a10:	441a      	add	r2, r3
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	2b0f      	cmp	r3, #15
 8005a20:	d909      	bls.n	8005a36 <UART_SetConfig+0x4ae>
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a28:	d205      	bcs.n	8005a36 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	e002      	b.n	8005a3c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005a58:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3730      	adds	r7, #48	; 0x30
 8005a60:	46bd      	mov	sp, r7
 8005a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a66:	bf00      	nop
 8005a68:	08006d4c 	.word	0x08006d4c
 8005a6c:	00f42400 	.word	0x00f42400

08005a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01a      	beq.n	8005b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b6e:	d10a      	bne.n	8005b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	605a      	str	r2, [r3, #4]
  }
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af02      	add	r7, sp, #8
 8005bb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc2:	f7fb ff2f 	bl	8001a24 <HAL_GetTick>
 8005bc6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d10e      	bne.n	8005bf4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f832 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e028      	b.n	8005c46 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d10e      	bne.n	8005c20 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f81c 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e012      	b.n	8005c46 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b09c      	sub	sp, #112	; 0x70
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	603b      	str	r3, [r7, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5e:	e0a9      	b.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c66:	f000 80a5 	beq.w	8005db4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6a:	f7fb fedb 	bl	8001a24 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d302      	bcc.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d140      	bne.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c94:	667b      	str	r3, [r7, #100]	; 0x64
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e6      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	663b      	str	r3, [r7, #96]	; 0x60
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3308      	adds	r3, #8
 8005cd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e5      	bne.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e069      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d051      	beq.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1e:	d149      	bne.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e6      	bne.n	8005d2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3308      	adds	r3, #8
 8005d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d7c:	623a      	str	r2, [r7, #32]
 8005d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	69f9      	ldr	r1, [r7, #28]
 8005d82:	6a3a      	ldr	r2, [r7, #32]
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e5      	bne.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e010      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2301      	moveq	r3, #1
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	f43f af46 	beq.w	8005c60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3770      	adds	r7, #112	; 0x70
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e027      	b.n	8005e44 <HAL_UARTEx_DisableFifoMode+0x66>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2224      	movs	r2, #36	; 0x24
 8005e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e02d      	b.n	8005ec2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2224      	movs	r2, #36	; 0x24
 8005e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0201 	bic.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f850 	bl	8005f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e02d      	b.n	8005f3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2224      	movs	r2, #36	; 0x24
 8005eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f812 	bl	8005f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d108      	bne.n	8005f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f68:	e031      	b.n	8005fce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f6a:	2308      	movs	r3, #8
 8005f6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f6e:	2308      	movs	r3, #8
 8005f70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	0e5b      	lsrs	r3, r3, #25
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	0f5b      	lsrs	r3, r3, #29
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f92:	7bbb      	ldrb	r3, [r7, #14]
 8005f94:	7b3a      	ldrb	r2, [r7, #12]
 8005f96:	4910      	ldr	r1, [pc, #64]	; (8005fd8 <UARTEx_SetNbDataToProcess+0x90>)
 8005f98:	5c8a      	ldrb	r2, [r1, r2]
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f9e:	7b3a      	ldrb	r2, [r7, #12]
 8005fa0:	490e      	ldr	r1, [pc, #56]	; (8005fdc <UARTEx_SetNbDataToProcess+0x94>)
 8005fa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	7b7a      	ldrb	r2, [r7, #13]
 8005fb4:	4908      	ldr	r1, [pc, #32]	; (8005fd8 <UARTEx_SetNbDataToProcess+0x90>)
 8005fb6:	5c8a      	ldrb	r2, [r1, r2]
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fbc:	7b7a      	ldrb	r2, [r7, #13]
 8005fbe:	4907      	ldr	r1, [pc, #28]	; (8005fdc <UARTEx_SetNbDataToProcess+0x94>)
 8005fc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr
 8005fd8:	08006d64 	.word	0x08006d64
 8005fdc:	08006d6c 	.word	0x08006d6c

08005fe0 <__libc_init_array>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	4d0d      	ldr	r5, [pc, #52]	; (8006018 <__libc_init_array+0x38>)
 8005fe4:	4c0d      	ldr	r4, [pc, #52]	; (800601c <__libc_init_array+0x3c>)
 8005fe6:	1b64      	subs	r4, r4, r5
 8005fe8:	10a4      	asrs	r4, r4, #2
 8005fea:	2600      	movs	r6, #0
 8005fec:	42a6      	cmp	r6, r4
 8005fee:	d109      	bne.n	8006004 <__libc_init_array+0x24>
 8005ff0:	4d0b      	ldr	r5, [pc, #44]	; (8006020 <__libc_init_array+0x40>)
 8005ff2:	4c0c      	ldr	r4, [pc, #48]	; (8006024 <__libc_init_array+0x44>)
 8005ff4:	f000 f820 	bl	8006038 <_init>
 8005ff8:	1b64      	subs	r4, r4, r5
 8005ffa:	10a4      	asrs	r4, r4, #2
 8005ffc:	2600      	movs	r6, #0
 8005ffe:	42a6      	cmp	r6, r4
 8006000:	d105      	bne.n	800600e <__libc_init_array+0x2e>
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	f855 3b04 	ldr.w	r3, [r5], #4
 8006008:	4798      	blx	r3
 800600a:	3601      	adds	r6, #1
 800600c:	e7ee      	b.n	8005fec <__libc_init_array+0xc>
 800600e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006012:	4798      	blx	r3
 8006014:	3601      	adds	r6, #1
 8006016:	e7f2      	b.n	8005ffe <__libc_init_array+0x1e>
 8006018:	08006d7c 	.word	0x08006d7c
 800601c:	08006d7c 	.word	0x08006d7c
 8006020:	08006d7c 	.word	0x08006d7c
 8006024:	08006d80 	.word	0x08006d80

08006028 <memset>:
 8006028:	4402      	add	r2, r0
 800602a:	4603      	mov	r3, r0
 800602c:	4293      	cmp	r3, r2
 800602e:	d100      	bne.n	8006032 <memset+0xa>
 8006030:	4770      	bx	lr
 8006032:	f803 1b01 	strb.w	r1, [r3], #1
 8006036:	e7f9      	b.n	800602c <memset+0x4>

08006038 <_init>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	bf00      	nop
 800603c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603e:	bc08      	pop	{r3}
 8006040:	469e      	mov	lr, r3
 8006042:	4770      	bx	lr

08006044 <_fini>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	bf00      	nop
 8006048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604a:	bc08      	pop	{r3}
 800604c:	469e      	mov	lr, r3
 800604e:	4770      	bx	lr
