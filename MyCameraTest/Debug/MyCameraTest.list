
MyCameraTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e68  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d24  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cc4  08006cc4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006cc4  08006cc4  00016cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ccc  08006ccc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000010  08006ce4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006ce4  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c552  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000374e  00000000  00000000  0003c58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf0  00000000  00000000  0003fce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa8  00000000  00000000  000418d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f965  00000000  00000000  00043378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df12  00000000  00000000  00062cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1577  00000000  00000000  00080bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000770c  00000000  00000000  001421b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000010 	.word	0x20000010
 8000154:	00000000 	.word	0x00000000
 8000158:	08005f88 	.word	0x08005f88

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000014 	.word	0x20000014
 8000174:	08005f88 	.word	0x08005f88

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <ArduCAM_Init>:
byte m_fmt = JPEG;
uint32_t length = 0;
uint8_t is_header= false ;

void ArduCAM_Init(byte model) 
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	  wrSensorReg8_8(0xff, 0x01);
 8000486:	2101      	movs	r1, #1
 8000488:	20ff      	movs	r0, #255	; 0xff
 800048a:	f000 f973 	bl	8000774 <wrSensorReg8_8>
      wrSensorReg8_8(0x12, 0x80);
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	2012      	movs	r0, #18
 8000492:	f000 f96f 	bl	8000774 <wrSensorReg8_8>
      if(m_fmt == JPEG)
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <ArduCAM_Init+0x5c>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d114      	bne.n	80004c8 <ArduCAM_Init+0x4c>
      {
				wrSensorRegs8_8(OV2640_JPEG_INIT);
 800049e:	480f      	ldr	r0, [pc, #60]	; (80004dc <ArduCAM_Init+0x60>)
 80004a0:	f000 f9f6 	bl	8000890 <wrSensorRegs8_8>
				wrSensorRegs8_8(OV2640_YUV422);
 80004a4:	480e      	ldr	r0, [pc, #56]	; (80004e0 <ArduCAM_Init+0x64>)
 80004a6:	f000 f9f3 	bl	8000890 <wrSensorRegs8_8>
				wrSensorRegs8_8(OV2640_JPEG);
 80004aa:	480e      	ldr	r0, [pc, #56]	; (80004e4 <ArduCAM_Init+0x68>)
 80004ac:	f000 f9f0 	bl	8000890 <wrSensorRegs8_8>
				wrSensorReg8_8(0xff, 0x01);
 80004b0:	2101      	movs	r1, #1
 80004b2:	20ff      	movs	r0, #255	; 0xff
 80004b4:	f000 f95e 	bl	8000774 <wrSensorReg8_8>
				wrSensorReg8_8(0x15, 0x00);
 80004b8:	2100      	movs	r1, #0
 80004ba:	2015      	movs	r0, #21
 80004bc:	f000 f95a 	bl	8000774 <wrSensorReg8_8>
				wrSensorRegs8_8(OV2640_320x240_JPEG);
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <ArduCAM_Init+0x6c>)
 80004c2:	f000 f9e5 	bl	8000890 <wrSensorRegs8_8>
      }
      else
      {
        wrSensorRegs8_8(OV2640_QVGA);
      }
}
 80004c6:	e002      	b.n	80004ce <ArduCAM_Init+0x52>
        wrSensorRegs8_8(OV2640_QVGA);
 80004c8:	4808      	ldr	r0, [pc, #32]	; (80004ec <ArduCAM_Init+0x70>)
 80004ca:	f000 f9e1 	bl	8000890 <wrSensorRegs8_8>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000000 	.word	0x20000000
 80004dc:	080062c4 	.word	0x080062c4
 80004e0:	080065c0 	.word	0x080065c0
 80004e4:	080065e8 	.word	0x080065e8
 80004e8:	0800674c 	.word	0x0800674c
 80004ec:	08005fbc 	.word	0x08005fbc

080004f0 <CS_HIGH>:
//************************************************/
}

//Control the CS pin
void CS_HIGH(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
 	//GPIO_SetBits(CS_PORT,CS_PIN);
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <CS_HIGH+0x14>)
 80004fc:	f001 fede 	bl	80022bc <HAL_GPIO_WritePin>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	48000400 	.word	0x48000400

08000508 <CS_LOW>:

void CS_LOW(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
 	//GPIO_ResetBits(CS_PORT,CS_PIN);
 	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <CS_LOW+0x14>)
 8000514:	f001 fed2 	bl	80022bc <HAL_GPIO_WritePin>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000400 	.word	0x48000400

08000520 <set_format>:

void set_format(byte fmt)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
  if (fmt == BMP)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d103      	bne.n	8000538 <set_format+0x18>
    m_fmt = BMP;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <set_format+0x28>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
  else
    m_fmt = JPEG;
}
 8000536:	e002      	b.n	800053e <set_format+0x1e>
    m_fmt = JPEG;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <set_format+0x28>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	20000000 	.word	0x20000000

0800054c <bus_read>:

uint8_t bus_read(int address)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	 uint8_t value;
	 CS_LOW();
 8000554:	f7ff ffd8 	bl	8000508 <CS_LOW>
	 SPI1_ReadWriteByte(address);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fe85 	bl	800126c <SPI1_ReadWriteByte>
	 value = SPI1_ReadWriteByte(0x00);
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fe82 	bl	800126c <SPI1_ReadWriteByte>
 8000568:	4603      	mov	r3, r0
 800056a:	73fb      	strb	r3, [r7, #15]
	 CS_HIGH();
 800056c:	f7ff ffc0 	bl	80004f0 <CS_HIGH>
	 return value;
 8000570:	7bfb      	ldrb	r3, [r7, #15]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <bus_write>:

uint8_t bus_write(int address,int value)
{	
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	6039      	str	r1, [r7, #0]
	CS_LOW();
 8000584:	f7ff ffc0 	bl	8000508 <CS_LOW>
	us_delay(10);
 8000588:	200a      	movs	r0, #10
 800058a:	f000 f9ff 	bl	800098c <us_delay>
	SPI1_ReadWriteByte(address);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fe6a 	bl	800126c <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(value);
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fe65 	bl	800126c <SPI1_ReadWriteByte>
	us_delay(10);
 80005a2:	200a      	movs	r0, #10
 80005a4:	f000 f9f2 	bl	800098c <us_delay>
	CS_HIGH();
 80005a8:	f7ff ffa2 	bl	80004f0 <CS_HIGH>
	return 1;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <read_reg>:

uint8_t read_reg(uint8_t addr)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b084      	sub	sp, #16
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	4603      	mov	r3, r0
 80005be:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	data = bus_read(addr & 0x7F);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ffc0 	bl	800054c <bus_read>
 80005cc:	4603      	mov	r3, r0
 80005ce:	73fb      	strb	r3, [r7, #15]
	return data;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <write_reg>:
void write_reg(uint8_t addr, uint8_t data)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	460a      	mov	r2, r1
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	4613      	mov	r3, r2
 80005e8:	71bb      	strb	r3, [r7, #6]
	 bus_write(addr | 0x80, data); 
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	4619      	mov	r1, r3
 80005f8:	4610      	mov	r0, r2
 80005fa:	f7ff ffbe 	bl	800057a <bus_write>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <set_fifo_burst>:
	uint8_t data;
	data = bus_read(SINGLE_FIFO_READ);
	return data;
}
void set_fifo_burst()
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
	SPI1_ReadWriteByte(BURST_FIFO_READ);
 800060a:	203c      	movs	r0, #60	; 0x3c
 800060c:	f000 fe2e 	bl	800126c <SPI1_ReadWriteByte>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <flush_fifo>:


void flush_fifo(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8000618:	2101      	movs	r1, #1
 800061a:	2004      	movs	r0, #4
 800061c:	f7ff ffdd 	bl	80005da <write_reg>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <start_capture>:

void start_capture(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
 8000628:	2102      	movs	r1, #2
 800062a:	2004      	movs	r0, #4
 800062c:	f7ff ffd5 	bl	80005da <write_reg>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <clear_fifo_flag>:

void clear_fifo_flag(void )
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8000638:	2101      	movs	r1, #1
 800063a:	2004      	movs	r0, #4
 800063c:	f7ff ffcd 	bl	80005da <write_reg>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <read_fifo_length>:

uint32_t read_fifo_length(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
	uint32_t len1,len2,len3,len=0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
	len1 = read_reg(FIFO_SIZE1);
 800064e:	2042      	movs	r0, #66	; 0x42
 8000650:	f7ff ffb1 	bl	80005b6 <read_reg>
 8000654:	4603      	mov	r3, r0
 8000656:	60bb      	str	r3, [r7, #8]
	len2 = read_reg(FIFO_SIZE2);
 8000658:	2043      	movs	r0, #67	; 0x43
 800065a:	f7ff ffac 	bl	80005b6 <read_reg>
 800065e:	4603      	mov	r3, r0
 8000660:	607b      	str	r3, [r7, #4]
	len3 = read_reg(FIFO_SIZE3) & 0x7f;
 8000662:	2044      	movs	r0, #68	; 0x44
 8000664:	f7ff ffa7 	bl	80005b6 <read_reg>
 8000668:	4603      	mov	r3, r0
 800066a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800066e:	603b      	str	r3, [r7, #0]
	len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	041a      	lsls	r2, r3, #16
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	431a      	orrs	r2, r3
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	4313      	orrs	r3, r2
 800067e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000682:	60fb      	str	r3, [r7, #12]
	return len;	
 8000684:	68fb      	ldr	r3, [r7, #12]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <get_bit>:
	write_reg(addr, temp & (~bit));
}

//Get corresponding bit status
uint8_t get_bit(uint8_t addr, uint8_t bit)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b084      	sub	sp, #16
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	460a      	mov	r2, r1
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	4613      	mov	r3, r2
 800069c:	71bb      	strb	r3, [r7, #6]
  uint8_t temp;
  temp = read_reg(addr);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff88 	bl	80005b6 <read_reg>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]
  temp = temp & bit;
 80006aa:	7bfa      	ldrb	r2, [r7, #15]
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	4013      	ands	r3, r2
 80006b0:	73fb      	strb	r3, [r7, #15]
  return temp;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <OV2640_set_JPEG_size>:
  }
}


void OV2640_set_JPEG_size(uint8_t size)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	switch(size)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b08      	cmp	r3, #8
 80006ca:	d839      	bhi.n	8000740 <OV2640_set_JPEG_size+0x84>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <OV2640_set_JPEG_size+0x18>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	080006f9 	.word	0x080006f9
 80006d8:	08000701 	.word	0x08000701
 80006dc:	08000709 	.word	0x08000709
 80006e0:	08000711 	.word	0x08000711
 80006e4:	08000719 	.word	0x08000719
 80006e8:	08000721 	.word	0x08000721
 80006ec:	08000729 	.word	0x08000729
 80006f0:	08000731 	.word	0x08000731
 80006f4:	08000739 	.word	0x08000739
	{
		case OV2640_160x120:
			wrSensorRegs8_8(OV2640_160x120_JPEG);
 80006f8:	4815      	ldr	r0, [pc, #84]	; (8000750 <OV2640_set_JPEG_size+0x94>)
 80006fa:	f000 f8c9 	bl	8000890 <wrSensorRegs8_8>
			break;
 80006fe:	e023      	b.n	8000748 <OV2640_set_JPEG_size+0x8c>
		case OV2640_176x144:
			wrSensorRegs8_8(OV2640_176x144_JPEG);
 8000700:	4814      	ldr	r0, [pc, #80]	; (8000754 <OV2640_set_JPEG_size+0x98>)
 8000702:	f000 f8c5 	bl	8000890 <wrSensorRegs8_8>
			break;
 8000706:	e01f      	b.n	8000748 <OV2640_set_JPEG_size+0x8c>
		case OV2640_320x240:
			wrSensorRegs8_8(OV2640_320x240_JPEG);
 8000708:	4813      	ldr	r0, [pc, #76]	; (8000758 <OV2640_set_JPEG_size+0x9c>)
 800070a:	f000 f8c1 	bl	8000890 <wrSensorRegs8_8>
			break;
 800070e:	e01b      	b.n	8000748 <OV2640_set_JPEG_size+0x8c>
		case OV2640_352x288:
	  	wrSensorRegs8_8(OV2640_352x288_JPEG);
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <OV2640_set_JPEG_size+0xa0>)
 8000712:	f000 f8bd 	bl	8000890 <wrSensorRegs8_8>
			break;
 8000716:	e017      	b.n	8000748 <OV2640_set_JPEG_size+0x8c>
		case OV2640_640x480:
			wrSensorRegs8_8(OV2640_640x480_JPEG);
 8000718:	4811      	ldr	r0, [pc, #68]	; (8000760 <OV2640_set_JPEG_size+0xa4>)
 800071a:	f000 f8b9 	bl	8000890 <wrSensorRegs8_8>
			break;
 800071e:	e013      	b.n	8000748 <OV2640_set_JPEG_size+0x8c>
		case OV2640_800x600:
			wrSensorRegs8_8(OV2640_800x600_JPEG);
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <OV2640_set_JPEG_size+0xa8>)
 8000722:	f000 f8b5 	bl	8000890 <wrSensorRegs8_8>
			break;
 8000726:	e00f      	b.n	8000748 <OV2640_set_JPEG_size+0x8c>
		case OV2640_1024x768:
			wrSensorRegs8_8(OV2640_1024x768_JPEG);
 8000728:	480f      	ldr	r0, [pc, #60]	; (8000768 <OV2640_set_JPEG_size+0xac>)
 800072a:	f000 f8b1 	bl	8000890 <wrSensorRegs8_8>
			break;
 800072e:	e00b      	b.n	8000748 <OV2640_set_JPEG_size+0x8c>
		case OV2640_1280x1024:
			wrSensorRegs8_8(OV2640_1280x1024_JPEG);
 8000730:	480e      	ldr	r0, [pc, #56]	; (800076c <OV2640_set_JPEG_size+0xb0>)
 8000732:	f000 f8ad 	bl	8000890 <wrSensorRegs8_8>
			break;
 8000736:	e007      	b.n	8000748 <OV2640_set_JPEG_size+0x8c>
		case OV2640_1600x1200:
			wrSensorRegs8_8(OV2640_1600x1200_JPEG);
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <OV2640_set_JPEG_size+0xb4>)
 800073a:	f000 f8a9 	bl	8000890 <wrSensorRegs8_8>
			break;
 800073e:	e003      	b.n	8000748 <OV2640_set_JPEG_size+0x8c>
		default:
			wrSensorRegs8_8(OV2640_320x240_JPEG);
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <OV2640_set_JPEG_size+0x9c>)
 8000742:	f000 f8a5 	bl	8000890 <wrSensorRegs8_8>
			break;
 8000746:	bf00      	nop
	}
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	0800660c 	.word	0x0800660c
 8000754:	080066ac 	.word	0x080066ac
 8000758:	0800674c 	.word	0x0800674c
 800075c:	080067ec 	.word	0x080067ec
 8000760:	0800688c 	.word	0x0800688c
 8000764:	08006930 	.word	0x08006930
 8000768:	080069d4 	.word	0x080069d4
 800076c:	08006a70 	.word	0x08006a70
 8000770:	08006b14 	.word	0x08006b14

08000774 <wrSensorReg8_8>:

byte wrSensorReg8_8(int regID, int regDat)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	us_delay(5);
 800077e:	2005      	movs	r0, #5
 8000780:	f000 f904 	bl	800098c <us_delay>
	sccb_bus_start();                          
 8000784:	f000 fc66 	bl	8001054 <sccb_bus_start>
	if(sccb_bus_write_byte(sensor_addr) == 0)         
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <wrSensorReg8_8+0x78>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fcd1 	bl	8001134 <sccb_bus_write_byte>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d103      	bne.n	80007a0 <wrSensorReg8_8+0x2c>
	{
		sccb_bus_stop();                        
 8000798:	f000 fc84 	bl	80010a4 <sccb_bus_stop>
		return 1;
 800079c:	2301      	movs	r3, #1
 800079e:	e020      	b.n	80007e2 <wrSensorReg8_8+0x6e>
	}
	us_delay(5);
 80007a0:	2005      	movs	r0, #5
 80007a2:	f000 f8f3 	bl	800098c <us_delay>
	if(sccb_bus_write_byte(regID) == 0)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fcc2 	bl	8001134 <sccb_bus_write_byte>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <wrSensorReg8_8+0x4a>
	{
		sccb_bus_stop();                              
 80007b6:	f000 fc75 	bl	80010a4 <sccb_bus_stop>
		return 2;                                       
 80007ba:	2302      	movs	r3, #2
 80007bc:	e011      	b.n	80007e2 <wrSensorReg8_8+0x6e>
	}
	us_delay(5);
 80007be:	2005      	movs	r0, #5
 80007c0:	f000 f8e4 	bl	800098c <us_delay>
	if(sccb_bus_write_byte(regDat)==0)                    
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fcb3 	bl	8001134 <sccb_bus_write_byte>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d103      	bne.n	80007dc <wrSensorReg8_8+0x68>
	{
		sccb_bus_stop();                                 
 80007d4:	f000 fc66 	bl	80010a4 <sccb_bus_stop>
		return 3;
 80007d8:	2303      	movs	r3, #3
 80007da:	e002      	b.n	80007e2 <wrSensorReg8_8+0x6e>
	}
	sccb_bus_stop();                                    
 80007dc:	f000 fc62 	bl	80010a4 <sccb_bus_stop>
	return 0;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000002d 	.word	0x2000002d

080007f0 <rdSensorReg8_8>:


byte rdSensorReg8_8(uint8_t regID, uint8_t* regDat)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	us_delay(10);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f000 f8c5 	bl	800098c <us_delay>
	
	sccb_bus_start();
 8000802:	f000 fc27 	bl	8001054 <sccb_bus_start>
	if(sccb_bus_write_byte(sensor_addr) == 0)                 
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <rdSensorReg8_8+0x9c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fc92 	bl	8001134 <sccb_bus_write_byte>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d103      	bne.n	800081e <rdSensorReg8_8+0x2e>
	{
		sccb_bus_stop();                                
 8000816:	f000 fc45 	bl	80010a4 <sccb_bus_stop>
		//goto start;
		return 1;                                        
 800081a:	2301      	movs	r3, #1
 800081c:	e031      	b.n	8000882 <rdSensorReg8_8+0x92>
	}
	us_delay(10);
 800081e:	200a      	movs	r0, #10
 8000820:	f000 f8b4 	bl	800098c <us_delay>
	if(sccb_bus_write_byte(regID)==0)//ID
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fc84 	bl	8001134 <sccb_bus_write_byte>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d103      	bne.n	800083a <rdSensorReg8_8+0x4a>
	{
		sccb_bus_stop();                                  
 8000832:	f000 fc37 	bl	80010a4 <sccb_bus_stop>
		//goto start;
		return 2;                                       
 8000836:	2302      	movs	r3, #2
 8000838:	e023      	b.n	8000882 <rdSensorReg8_8+0x92>
	}
	sccb_bus_stop();                                   
 800083a:	f000 fc33 	bl	80010a4 <sccb_bus_stop>
	us_delay(10);
 800083e:	200a      	movs	r0, #10
 8000840:	f000 f8a4 	bl	800098c <us_delay>
	sccb_bus_start();
 8000844:	f000 fc06 	bl	8001054 <sccb_bus_start>
	if(sccb_bus_write_byte(sensor_addr|0x01)==0)                    
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <rdSensorReg8_8+0x9c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fc6e 	bl	8001134 <sccb_bus_write_byte>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d103      	bne.n	8000866 <rdSensorReg8_8+0x76>
	{
		sccb_bus_stop();                                   
 800085e:	f000 fc21 	bl	80010a4 <sccb_bus_stop>
		//goto start;
		return 3;                                          
 8000862:	2303      	movs	r3, #3
 8000864:	e00d      	b.n	8000882 <rdSensorReg8_8+0x92>
	}
	us_delay(10);
 8000866:	200a      	movs	r0, #10
 8000868:	f000 f890 	bl	800098c <us_delay>
	*regDat = sccb_bus_read_byte();                    
 800086c:	f000 fcc0 	bl	80011f0 <sccb_bus_read_byte>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	701a      	strb	r2, [r3, #0]
	sccb_bus_send_noack();                                
 8000878:	f000 fc34 	bl	80010e4 <sccb_bus_send_noack>
	sccb_bus_stop();                                      
 800087c:	f000 fc12 	bl	80010a4 <sccb_bus_stop>
	return 0;                
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000002d 	.word	0x2000002d

08000890 <wrSensorRegs8_8>:

//I2C Array Write 8bit address, 8bit data
int wrSensorRegs8_8(const struct sensor_reg reglist[])
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  int err = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  uint16_t reg_addr = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	827b      	strh	r3, [r7, #18]
  uint16_t reg_val = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	823b      	strh	r3, [r7, #16]
  const struct sensor_reg *next = reglist;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	60fb      	str	r3, [r7, #12]
  while ((reg_addr != 0xff) | (reg_val != 0xff))
 80008a8:	e010      	b.n	80008cc <wrSensorRegs8_8+0x3c>
  {
    reg_addr = next->reg;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	827b      	strh	r3, [r7, #18]
    reg_val = next->val;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	885b      	ldrh	r3, [r3, #2]
 80008b4:	823b      	strh	r3, [r7, #16]
    err = wrSensorReg8_8(reg_addr, reg_val);
 80008b6:	8a7b      	ldrh	r3, [r7, #18]
 80008b8:	8a3a      	ldrh	r2, [r7, #16]
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff59 	bl	8000774 <wrSensorReg8_8>
 80008c2:	4603      	mov	r3, r0
 80008c4:	617b      	str	r3, [r7, #20]
 //   us_delay(400);
    next++;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3304      	adds	r3, #4
 80008ca:	60fb      	str	r3, [r7, #12]
  while ((reg_addr != 0xff) | (reg_val != 0xff))
 80008cc:	8a7b      	ldrh	r3, [r7, #18]
 80008ce:	2bff      	cmp	r3, #255	; 0xff
 80008d0:	bf14      	ite	ne
 80008d2:	2301      	movne	r3, #1
 80008d4:	2300      	moveq	r3, #0
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	8a3b      	ldrh	r3, [r7, #16]
 80008da:	2bff      	cmp	r3, #255	; 0xff
 80008dc:	bf14      	ite	ne
 80008de:	2301      	movne	r3, #1
 80008e0:	2300      	moveq	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1de      	bne.n	80008aa <wrSensorRegs8_8+0x1a>
  }

  return err;
 80008ec:	697b      	ldr	r3, [r7, #20]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <wrSensorReg16_8>:

byte wrSensorReg16_8(int regID, int regDat)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	sccb_bus_start();
 8000902:	f000 fba7 	bl	8001054 <sccb_bus_start>
	if(0==sccb_bus_write_byte(sensor_addr))
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <wrSensorReg16_8+0x90>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fc12 	bl	8001134 <sccb_bus_write_byte>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d103      	bne.n	800091e <wrSensorReg16_8+0x26>
	{
		sccb_bus_stop();
 8000916:	f000 fbc5 	bl	80010a4 <sccb_bus_stop>
		return(0);
 800091a:	2300      	movs	r3, #0
 800091c:	e030      	b.n	8000980 <wrSensorReg16_8+0x88>
	}
	us_delay(5);
 800091e:	2005      	movs	r0, #5
 8000920:	f000 f834 	bl	800098c <us_delay>
  if(0==sccb_bus_write_byte(regID>>8))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	121b      	asrs	r3, r3, #8
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fc02 	bl	8001134 <sccb_bus_write_byte>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d103      	bne.n	800093e <wrSensorReg16_8+0x46>
	{
		sccb_bus_stop();
 8000936:	f000 fbb5 	bl	80010a4 <sccb_bus_stop>
		return(0);
 800093a:	2300      	movs	r3, #0
 800093c:	e020      	b.n	8000980 <wrSensorReg16_8+0x88>
	}
	us_delay(5);
 800093e:	2005      	movs	r0, #5
 8000940:	f000 f824 	bl	800098c <us_delay>
  if(0==sccb_bus_write_byte(regID))
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fbf3 	bl	8001134 <sccb_bus_write_byte>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d103      	bne.n	800095c <wrSensorReg16_8+0x64>
	{
		sccb_bus_stop();
 8000954:	f000 fba6 	bl	80010a4 <sccb_bus_stop>
		return(0);
 8000958:	2300      	movs	r3, #0
 800095a:	e011      	b.n	8000980 <wrSensorReg16_8+0x88>
	}
	us_delay(5);
 800095c:	2005      	movs	r0, #5
 800095e:	f000 f815 	bl	800098c <us_delay>
  if(0==sccb_bus_write_byte(regDat))
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fbe4 	bl	8001134 <sccb_bus_write_byte>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <wrSensorReg16_8+0x82>
	{
		sccb_bus_stop();
 8000972:	f000 fb97 	bl	80010a4 <sccb_bus_stop>
		return(0);
 8000976:	2300      	movs	r3, #0
 8000978:	e002      	b.n	8000980 <wrSensorReg16_8+0x88>
	}
  sccb_bus_stop();
 800097a:	f000 fb93 	bl	80010a4 <sccb_bus_stop>
	
  return(1);
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000002d 	.word	0x2000002d

0800098c <us_delay>:
#include "delay.h"
extern TIM_HandleTypeDef htim1;


void us_delay(uint16_t us)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <us_delay+0x2c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us); //May want to change this to enable an interrupt, so that we aren't blocking. 1us = 48 sys clk cycles
 800099e:	bf00      	nop
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <us_delay+0x2c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d3f9      	bcc.n	80009a0 <us_delay+0x14>
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000210 	.word	0x20000210

080009bc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80009c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009cc:	f023 0218 	bic.w	r2, r3, #24
 80009d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b085      	sub	sp, #20
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4013      	ands	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
	...

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t vid, pid, temp ;
	uint8_t Camera_WorkMode = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71fb      	strb	r3, [r7, #7]
	uint8_t start_shoot = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	71bb      	strb	r3, [r7, #6]
	uint8_t stop = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	717b      	strb	r3, [r7, #5]
	//NVIC_Configuration();
	//SystemInit();
	//delay_init();
	//USART1_UART_Init(921600);
	//ArduCAM_LED_init();
	CS_HIGH();//ArduCAM_CS_init();
 8000a5a:	f7ff fd49 	bl	80004f0 <CS_HIGH>
	sccb_bus_init();
 8000a5e:	f000 fab0 	bl	8000fc2 <sccb_bus_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a62:	f000 ff1b 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a66:	f000 f85b 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6a:	f000 fa3d 	bl	8000ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a6e:	f000 fa21 	bl	8000eb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a72:	f000 f9d3 	bl	8000e1c <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000a76:	f000 f8c1 	bl	8000bfc <MX_I2C3_Init>
  MX_SPI2_Init();
 8000a7a:	f000 f93d 	bl	8000cf8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000a7e:	f000 f979 	bl	8000d74 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000a82:	f000 f8fb 	bl	8000c7c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000a86:	4823      	ldr	r0, [pc, #140]	; (8000b14 <main+0xcc>)
 8000a88:	f004 f9c8 	bl	8004e1c <HAL_TIM_Base_Start>

  do//ACK CMD SPI OK
  {
	write_reg(ARDUCHIP_TEST1, 0x55);
 8000a8c:	2155      	movs	r1, #85	; 0x55
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fda3 	bl	80005da <write_reg>
	temp = read_reg(ARDUCHIP_TEST1);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f7ff fd8e 	bl	80005b6 <read_reg>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	713b      	strb	r3, [r7, #4]
	HAL_Delay(1000);
 8000a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa2:	f000 ff71 	bl	8001988 <HAL_Delay>
  }
  while(temp != 0x55);
 8000aa6:	793b      	ldrb	r3, [r7, #4]
 8000aa8:	2b55      	cmp	r3, #85	; 0x55
 8000aaa:	d1ef      	bne.n	8000a8c <main+0x44>

  do//Probs not needed, just for determining that OV2640 is connected
  {
	sensor_addr = 0x60;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <main+0xd0>)
 8000aae:	2260      	movs	r2, #96	; 0x60
 8000ab0:	701a      	strb	r2, [r3, #0]
	wrSensorReg8_8(0xff, 0x01);//SCCB_SIC_H and SID HIGH and LOW. sccb_data_in() and out.
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	20ff      	movs	r0, #255	; 0xff
 8000ab6:	f7ff fe5d 	bl	8000774 <wrSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
 8000aba:	1cfb      	adds	r3, r7, #3
 8000abc:	4619      	mov	r1, r3
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f7ff fe96 	bl	80007f0 <rdSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
 8000ac4:	1cbb      	adds	r3, r7, #2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	200b      	movs	r0, #11
 8000aca:	f7ff fe91 	bl	80007f0 <rdSensorReg8_8>
  }
  while ((vid != 0x26 ) && (( pid != 0x41 ) || ( pid != 0x42 )));
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	2b26      	cmp	r3, #38	; 0x26
 8000ad2:	d005      	beq.n	8000ae0 <main+0x98>
 8000ad4:	78bb      	ldrb	r3, [r7, #2]
 8000ad6:	2b41      	cmp	r3, #65	; 0x41
 8000ad8:	d1e8      	bne.n	8000aac <main+0x64>
 8000ada:	78bb      	ldrb	r3, [r7, #2]
 8000adc:	2b42      	cmp	r3, #66	; 0x42
 8000ade:	d1e5      	bne.n	8000aac <main+0x64>
  sensor_model =  OV2640 ;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <main+0xd4>)
 8000ae2:	2205      	movs	r2, #5
 8000ae4:	701a      	strb	r2, [r3, #0]
  ArduCAM_Init(OV2640);
 8000ae6:	2005      	movs	r0, #5
 8000ae8:	f7ff fcc8 	bl	800047c <ArduCAM_Init>
  OV2640_set_JPEG_size(OV2640_320x240);//Want this one for TFT
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff fde5 	bl	80006bc <OV2640_set_JPEG_size>
  set_format(BMP);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff fd14 	bl	8000520 <set_format>
  //ArduCAM_Init(sensor_model);
  wrSensorReg16_8(0x3818,0x81);//Need wr and rd stuff
 8000af8:	2181      	movs	r1, #129	; 0x81
 8000afa:	f643 0018 	movw	r0, #14360	; 0x3818
 8000afe:	f7ff fefb 	bl	80008f8 <wrSensorReg16_8>
  wrSensorReg16_8(0x3621,0xa7);
 8000b02:	21a7      	movs	r1, #167	; 0xa7
 8000b04:	f243 6021 	movw	r0, #13857	; 0x3621
 8000b08:	f7ff fef6 	bl	80008f8 <wrSensorReg16_8>
  StartBMPcapture();//This will probs go in while loop. Need BMP capture stuff
 8000b0c:	f000 fbce 	bl	80012ac <StartBMPcapture>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <main+0xc8>
 8000b12:	bf00      	nop
 8000b14:	20000210 	.word	0x20000210
 8000b18:	2000002d 	.word	0x2000002d
 8000b1c:	2000002c 	.word	0x2000002c

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09a      	sub	sp, #104	; 0x68
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2248      	movs	r2, #72	; 0x48
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f005 fa22 	bl	8005f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b46:	f001 fcf5 	bl	8002534 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff ff36 	bl	80009bc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <SystemClock_Config+0xd8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b58:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <SystemClock_Config+0xd8>)
 8000b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <SystemClock_Config+0xd8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000b6c:	2326      	movs	r3, #38	; 0x26
 8000b6e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b70:	2381      	movs	r3, #129	; 0x81
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7e:	2340      	movs	r3, #64	; 0x40
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000b86:	23b0      	movs	r3, #176	; 0xb0
 8000b88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8000b96:	2306      	movs	r3, #6
 8000b98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ba0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ba4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000ba6:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8000baa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 ff91 	bl	8002ad8 <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000bbc:	f000 f9fc 	bl	8000fb8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000bc0:	234f      	movs	r3, #79	; 0x4f
 8000bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000bd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 fafc 	bl	80031dc <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000bea:	f000 f9e5 	bl	8000fb8 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3768      	adds	r7, #104	; 0x68
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	58000400 	.word	0x58000400

08000bfc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <MX_I2C3_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <MX_I2C3_Init+0x7c>)
 8000c0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c36:	480e      	ldr	r0, [pc, #56]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c38:	f001 fb57 	bl	80022ea <HAL_I2C_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c42:	f000 f9b9 	bl	8000fb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4809      	ldr	r0, [pc, #36]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c4a:	f001 fbdd 	bl	8002408 <HAL_I2CEx_ConfigAnalogFilter>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c54:	f000 f9b0 	bl	8000fb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_I2C3_Init+0x74>)
 8000c5c:	f001 fc1e 	bl	800249c <HAL_I2CEx_ConfigDigitalFilter>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f000 f9a7 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000034 	.word	0x20000034
 8000c74:	40005c00 	.word	0x40005c00
 8000c78:	20303e5d 	.word	0x20303e5d

08000c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <MX_SPI1_Init+0x78>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000c96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cca:	2207      	movs	r2, #7
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cdc:	f002 ff58 	bl	8003b90 <HAL_SPI_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 f967 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000088 	.word	0x20000088
 8000cf4:	40013000 	.word	0x40013000

08000cf8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <MX_SPI2_Init+0x78>)
 8000d00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d16:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d46:	2207      	movs	r2, #7
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d52:	2208      	movs	r2, #8
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_SPI2_Init+0x74>)
 8000d58:	f002 ff1a 	bl	8003b90 <HAL_SPI_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 f929 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000ec 	.word	0x200000ec
 8000d70:	40003800 	.word	0x40003800

08000d74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <MX_TIM1_Init+0xa0>)
 8000d94:	4a20      	ldr	r2, [pc, #128]	; (8000e18 <MX_TIM1_Init+0xa4>)
 8000d96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <MX_TIM1_Init+0xa0>)
 8000d9a:	220b      	movs	r2, #11
 8000d9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_TIM1_Init+0xa0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_TIM1_Init+0xa0>)
 8000da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000daa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <MX_TIM1_Init+0xa0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_TIM1_Init+0xa0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <MX_TIM1_Init+0xa0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dbe:	4815      	ldr	r0, [pc, #84]	; (8000e14 <MX_TIM1_Init+0xa0>)
 8000dc0:	f003 ffd4 	bl	8004d6c <HAL_TIM_Base_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000dca:	f000 f8f5 	bl	8000fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480e      	ldr	r0, [pc, #56]	; (8000e14 <MX_TIM1_Init+0xa0>)
 8000ddc:	f004 f862 	bl	8004ea4 <HAL_TIM_ConfigClockSource>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000de6:	f000 f8e7 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <MX_TIM1_Init+0xa0>)
 8000dfc:	f004 fa16 	bl	800522c <HAL_TIMEx_MasterConfigSynchronization>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e06:	f000 f8d7 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000210 	.word	0x20000210
 8000e18:	40012c00 	.word	0x40012c00

08000e1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e22:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e28:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e66:	f004 fa60 	bl	800532a <HAL_UART_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e70:	f000 f8a2 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e74:	2100      	movs	r1, #0
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e78:	f004 ff91 	bl	8005d9e <HAL_UARTEx_SetTxFifoThreshold>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e82:	f000 f899 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e86:	2100      	movs	r1, #0
 8000e88:	4808      	ldr	r0, [pc, #32]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e8a:	f004 ffc6 	bl	8005e1a <HAL_UARTEx_SetRxFifoThreshold>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e94:	f000 f890 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_USART2_UART_Init+0x90>)
 8000e9a:	f004 ff48 	bl	8005d2e <HAL_UARTEx_DisableFifoMode>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f000 f888 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000025c 	.word	0x2000025c
 8000eb0:	40004400 	.word	0x40004400

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f7ff fd94 	bl	80009e6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fd91 	bl	80009e6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	200b      	movs	r0, #11
 8000eca:	f000 fe58 	bl	8001b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ece:	200b      	movs	r0, #11
 8000ed0:	f000 fe6f 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	200c      	movs	r0, #12
 8000eda:	f000 fe50 	bl	8001b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ede:	200c      	movs	r0, #12
 8000ee0:	f000 fe67 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff fd8a 	bl	8000a16 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	2002      	movs	r0, #2
 8000f04:	f7ff fd87 	bl	8000a16 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f08:	2004      	movs	r0, #4
 8000f0a:	f7ff fd84 	bl	8000a16 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|CS_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8000f14:	4826      	ldr	r0, [pc, #152]	; (8000fb0 <MX_GPIO_Init+0xc8>)
 8000f16:	f001 f9d1 	bl	80022bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2138      	movs	r1, #56	; 0x38
 8000f1e:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <MX_GPIO_Init+0xcc>)
 8000f20:	f001 f9cc 	bl	80022bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000f24:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000f28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f32:	2302      	movs	r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481d      	ldr	r0, [pc, #116]	; (8000fb0 <MX_GPIO_Init+0xc8>)
 8000f3c:	f001 f85e 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <MX_GPIO_Init+0xc8>)
 8000f58:	f001 f850 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000f5c:	2338      	movs	r3, #56	; 0x38
 8000f5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <MX_GPIO_Init+0xcc>)
 8000f72:	f001 f843 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000f76:	2303      	movs	r3, #3
 8000f78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f001 f836 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000f90:	2340      	movs	r3, #64	; 0x40
 8000f92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_GPIO_Init+0xcc>)
 8000fa4:	f001 f82a 	bl	8001ffc <HAL_GPIO_Init>

}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	48000800 	.word	0x48000800

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>

08000fc2 <sccb_bus_init>:
  * @brief  init i2c bus
  * @param  None
  * @retval None
  */
void sccb_bus_init(void)//Once GPIO is gone, this turns into sccb_data_out();. May just want to replace-all
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;			//Port B Pin 10
 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //Push Pull (Normal Output, not open drain)
 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 	GPIO_SetBits(GPIOB,GPIO_Pin_10);	*/
	sccb_data_out();
 8000fc6:	f000 f823 	bl	8001010 <sccb_data_out>

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <sccb_data_in>:


void sccb_data_in(void)//Replace sccb_data_in()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};//Created by ChatGPT, may not be correct
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = I2C3_SDA_Pin; // SCCB data pins
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(I2C3_SDA_Port, &GPIO_InitStruct);
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <sccb_data_in+0x38>)
 8000ff6:	f001 f801 	bl	8001ffc <HAL_GPIO_Init>
	sccb_state = 1;
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <sccb_data_in+0x3c>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	48000400 	.word	0x48000400
 800100c:	200002f0 	.word	0x200002f0

08001010 <sccb_data_out>:
 * how it is connected to the Arducam module.
 *
 * Would be worth checking the arduino equivalent.
 * */
void sccb_data_out(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};//Created by ChatGPT
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = I2C3_SDA_Pin; // SCCB data pins.
 8001024:	2310      	movs	r3, #16
 8001026:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001030:	2302      	movs	r3, #2
 8001032:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(I2C3_SDA_Port, &GPIO_InitStruct);
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <sccb_data_out+0x3c>)
 800103a:	f000 ffdf 	bl	8001ffc <HAL_GPIO_Init>
	sccb_state = 0;
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <sccb_data_out+0x40>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	48000400 	.word	0x48000400
 8001050:	200002f0 	.word	0x200002f0

08001054 <sccb_bus_start>:


void sccb_bus_start(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    SCCB_SID_H();             
 8001058:	2201      	movs	r2, #1
 800105a:	2110      	movs	r1, #16
 800105c:	4810      	ldr	r0, [pc, #64]	; (80010a0 <sccb_bus_start+0x4c>)
 800105e:	f001 f92d 	bl	80022bc <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff fc92 	bl	800098c <us_delay>
    SCCB_SIC_H();	           
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106e:	480c      	ldr	r0, [pc, #48]	; (80010a0 <sccb_bus_start+0x4c>)
 8001070:	f001 f924 	bl	80022bc <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff fc89 	bl	800098c <us_delay>
    SCCB_SID_L();
 800107a:	2200      	movs	r2, #0
 800107c:	2110      	movs	r1, #16
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <sccb_bus_start+0x4c>)
 8001080:	f001 f91c 	bl	80022bc <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff fc81 	bl	800098c <us_delay>
    SCCB_SIC_L();	           
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <sccb_bus_start+0x4c>)
 8001092:	f001 f913 	bl	80022bc <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff fc78 	bl	800098c <us_delay>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	48000400 	.word	0x48000400

080010a4 <sccb_bus_stop>:


void sccb_bus_stop(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    SCCB_SID_L();
 80010a8:	2200      	movs	r2, #0
 80010aa:	2110      	movs	r1, #16
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <sccb_bus_stop+0x3c>)
 80010ae:	f001 f905 	bl	80022bc <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff fc6a 	bl	800098c <us_delay>
    SCCB_SIC_H();	
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	4808      	ldr	r0, [pc, #32]	; (80010e0 <sccb_bus_stop+0x3c>)
 80010c0:	f001 f8fc 	bl	80022bc <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff fc61 	bl	800098c <us_delay>
    SCCB_SID_H();	
 80010ca:	2201      	movs	r2, #1
 80010cc:	2110      	movs	r1, #16
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <sccb_bus_stop+0x3c>)
 80010d0:	f001 f8f4 	bl	80022bc <HAL_GPIO_WritePin>
    us_delay(I2C_TIM);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff fc59 	bl	800098c <us_delay>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	48000400 	.word	0x48000400

080010e4 <sccb_bus_send_noack>:


void sccb_bus_send_noack(void)
{	
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	SCCB_SID_H();	
 80010e8:	2201      	movs	r2, #1
 80010ea:	2110      	movs	r1, #16
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <sccb_bus_send_noack+0x4c>)
 80010ee:	f001 f8e5 	bl	80022bc <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff fc4a 	bl	800098c <us_delay>
	SCCB_SIC_H();	
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <sccb_bus_send_noack+0x4c>)
 8001100:	f001 f8dc 	bl	80022bc <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff fc41 	bl	800098c <us_delay>
	SCCB_SIC_L();	
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001110:	4807      	ldr	r0, [pc, #28]	; (8001130 <sccb_bus_send_noack+0x4c>)
 8001112:	f001 f8d3 	bl	80022bc <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff fc38 	bl	800098c <us_delay>
	SCCB_SID_L();	
 800111c:	2200      	movs	r2, #0
 800111e:	2110      	movs	r1, #16
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <sccb_bus_send_noack+0x4c>)
 8001122:	f001 f8cb 	bl	80022bc <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fc30 	bl	800098c <us_delay>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	48000400 	.word	0x48000400

08001134 <sccb_bus_write_byte>:
	SCCB_SID_L();	
	us_delay(I2C_TIM);
}

uint8_t sccb_bus_write_byte(uint8_t data)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	uint8_t tem;

	for(i = 0; i < 8; i++) 
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e027      	b.n	8001194 <sccb_bus_write_byte+0x60>
	{
		if((data<<i) & 0x80)
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <sccb_bus_write_byte+0x2c>
		{
			SCCB_SID_H();
 8001154:	2201      	movs	r2, #1
 8001156:	2110      	movs	r1, #16
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <sccb_bus_write_byte+0xb4>)
 800115a:	f001 f8af 	bl	80022bc <HAL_GPIO_WritePin>
 800115e:	e004      	b.n	800116a <sccb_bus_write_byte+0x36>
		}
		else 
		{
			SCCB_SID_L();
 8001160:	2200      	movs	r2, #0
 8001162:	2110      	movs	r1, #16
 8001164:	4820      	ldr	r0, [pc, #128]	; (80011e8 <sccb_bus_write_byte+0xb4>)
 8001166:	f001 f8a9 	bl	80022bc <HAL_GPIO_WritePin>
		}
		us_delay(I2C_TIM);
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fc0e 	bl	800098c <us_delay>
		SCCB_SIC_H();	
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001176:	481c      	ldr	r0, [pc, #112]	; (80011e8 <sccb_bus_write_byte+0xb4>)
 8001178:	f001 f8a0 	bl	80022bc <HAL_GPIO_WritePin>
		us_delay(I2C_TIM);
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff fc05 	bl	800098c <us_delay>
		SCCB_SIC_L();	
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <sccb_bus_write_byte+0xb4>)
 800118a:	f001 f897 	bl	80022bc <HAL_GPIO_WritePin>
	for(i = 0; i < 8; i++) 
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3301      	adds	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b07      	cmp	r3, #7
 8001198:	d9d4      	bls.n	8001144 <sccb_bus_write_byte+0x10>

	}
	sccb_data_in();
 800119a:	f7ff ff19 	bl	8000fd0 <sccb_data_in>
	us_delay(I2C_TIM);
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff fbf4 	bl	800098c <us_delay>
	SCCB_SIC_H();	
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011aa:	480f      	ldr	r0, [pc, #60]	; (80011e8 <sccb_bus_write_byte+0xb4>)
 80011ac:	f001 f886 	bl	80022bc <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff fbeb 	bl	800098c <us_delay>
	//if(SCCB_SID_STATE)
	if(sccb_state)
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <sccb_bus_write_byte+0xb8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <sccb_bus_write_byte+0x90>
	{
		tem = 0;               
 80011be:	2300      	movs	r3, #0
 80011c0:	72fb      	strb	r3, [r7, #11]
 80011c2:	e001      	b.n	80011c8 <sccb_bus_write_byte+0x94>
	}
	else 
	{
		tem = 1;                
 80011c4:	2301      	movs	r3, #1
 80011c6:	72fb      	strb	r3, [r7, #11]
	}

	SCCB_SIC_L();	
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <sccb_bus_write_byte+0xb4>)
 80011d0:	f001 f874 	bl	80022bc <HAL_GPIO_WritePin>
	us_delay(I2C_TIM);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff fbd9 	bl	800098c <us_delay>
	sccb_data_out();
 80011da:	f7ff ff19 	bl	8001010 <sccb_data_out>
	return tem;  
 80011de:	7afb      	ldrb	r3, [r7, #11]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	48000400 	.word	0x48000400
 80011ec:	200002f0 	.word	0x200002f0

080011f0 <sccb_bus_read_byte>:

uint8_t sccb_bus_read_byte(void)
{	
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t read = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	70fb      	strb	r3, [r7, #3]
	
	sccb_data_in();
 80011fa:	f7ff fee9 	bl	8000fd0 <sccb_data_in>
	us_delay(I2C_TIM);
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff fbc4 	bl	800098c <us_delay>
	for(i = 8; i > 0; i--) 
 8001204:	2308      	movs	r3, #8
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	e021      	b.n	800124e <sccb_bus_read_byte+0x5e>
	{		     
		us_delay(I2C_TIM);
 800120a:	2001      	movs	r0, #1
 800120c:	f7ff fbbe 	bl	800098c <us_delay>
		SCCB_SIC_H();
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001216:	4813      	ldr	r0, [pc, #76]	; (8001264 <sccb_bus_read_byte+0x74>)
 8001218:	f001 f850 	bl	80022bc <HAL_GPIO_WritePin>
		us_delay(I2C_TIM);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff fbb5 	bl	800098c <us_delay>
		read = read << 1;
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	70fb      	strb	r3, [r7, #3]
		//if(SCCB_SID_STATE)
		if(sccb_state)
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <sccb_bus_read_byte+0x78>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <sccb_bus_read_byte+0x46>
		{
			read += 1; 
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	3301      	adds	r3, #1
 8001234:	70fb      	strb	r3, [r7, #3]
		}
		SCCB_SIC_L();
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <sccb_bus_read_byte+0x74>)
 800123e:	f001 f83d 	bl	80022bc <HAL_GPIO_WritePin>
		us_delay(I2C_TIM);
 8001242:	2001      	movs	r0, #1
 8001244:	f7ff fba2 	bl	800098c <us_delay>
	for(i = 8; i > 0; i--) 
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1da      	bne.n	800120a <sccb_bus_read_byte+0x1a>
	}	
    sccb_data_out();
 8001254:	f7ff fedc 	bl	8001010 <sccb_data_out>
	return read;
 8001258:	78fb      	ldrb	r3, [r7, #3]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	48000400 	.word	0x48000400
 8001268:	200002f0 	.word	0x200002f0

0800126c <SPI1_ReadWriteByte>:
	DMA_ITConfig(PB_SPI_RX_DMA_Channel, DMA_IT_TC, ENABLE);
	DMA_ITConfig(DMA1_Channel7, DMA_IT_TC, ENABLE);
}*/
 
uint8_t SPI1_ReadWriteByte(uint8_t TxData)
{		
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	{
		retry++;
		if(retry>200)return 0;
	}*/
	//SPI_I2S_SendData(SPI1, TxData);//Appears to send 1 byte. STM32F4 function
	us_delay(100);
 8001276:	2064      	movs	r0, #100	; 0x64
 8001278:	f7ff fb88 	bl	800098c <us_delay>
	HAL_SPI_Transmit(&hspi1, &TxData, 1, 400);//Should handle the blocking above
 800127c:	1df9      	adds	r1, r7, #7
 800127e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001282:	2201      	movs	r2, #1
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <SPI1_ReadWriteByte+0x3c>)
 8001286:	f002 fd57 	bl	8003d38 <HAL_SPI_Transmit>
	/*while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)
	{
		retry++;
		if(retry>200)return 0;
	}*/
	us_delay(100);
 800128a:	2064      	movs	r0, #100	; 0x64
 800128c:	f7ff fb7e 	bl	800098c <us_delay>
	HAL_SPI_Receive(&hspi1, &TxData, 1, 400);
 8001290:	1df9      	adds	r1, r7, #7
 8001292:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001296:	2201      	movs	r2, #1
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <SPI1_ReadWriteByte+0x3c>)
 800129a:	f002 fedd 	bl	8004058 <HAL_SPI_Receive>
	return TxData;
 800129e:	79fb      	ldrb	r3, [r7, #7]
			//SPI_I2S_ReceiveData(SPI1);
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000088 	.word	0x20000088

080012ac <StartBMPcapture>:
	haveRev = 0;
	DMA1_RX(picbuf, sendlen);
}*/

void StartBMPcapture(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
	flush_fifo();
 80012b2:	f7ff f9af 	bl	8000614 <flush_fifo>
	clear_fifo_flag();
 80012b6:	f7ff f9bd 	bl	8000634 <clear_fifo_flag>
	start_capture(); 
 80012ba:	f7ff f9b3 	bl	8000624 <start_capture>
	uint8_t d1 = 0xff;
 80012be:	23ff      	movs	r3, #255	; 0xff
 80012c0:	72fb      	strb	r3, [r7, #11]
	uint8_t d2 = 0xaa;
 80012c2:	23aa      	movs	r3, #170	; 0xaa
 80012c4:	72bb      	strb	r3, [r7, #10]
	uint8_t data_to_send;
	while(!get_bit(ARDUCHIP_TRIG , CAP_DONE_MASK)){;}
 80012c6:	bf00      	nop
 80012c8:	2108      	movs	r1, #8
 80012ca:	2041      	movs	r0, #65	; 0x41
 80012cc:	f7ff f9df 	bl	800068e <get_bit>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f8      	beq.n	80012c8 <StartBMPcapture+0x1c>
	//printf("ACK CMD capture done\r\n");
	length= read_fifo_length();
 80012d6:	f7ff f9b5 	bl	8000644 <read_fifo_length>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <StartBMPcapture+0x130>)
 80012de:	6013      	str	r3, [r2, #0]
//	printf("ACK CMD the length is %d\r\n",length);		
	//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
	//USART_SendData(USART1, 0xff);
	//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
	//USART_SendData(USART1, 0xaa);
	HAL_UART_Transmit(&huart2, &d1, 1, 400);
 80012e0:	f107 010b 	add.w	r1, r7, #11
 80012e4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80012e8:	2201      	movs	r2, #1
 80012ea:	483d      	ldr	r0, [pc, #244]	; (80013e0 <StartBMPcapture+0x134>)
 80012ec:	f004 f86d 	bl	80053ca <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &d2, 1, 400);
 80012f0:	f107 010a 	add.w	r1, r7, #10
 80012f4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80012f8:	2201      	movs	r2, #1
 80012fa:	4839      	ldr	r0, [pc, #228]	; (80013e0 <StartBMPcapture+0x134>)
 80012fc:	f004 f865 	bl	80053ca <HAL_UART_Transmit>
	for(int temp = 0; temp < BMPIMAGEOFFSET; temp++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e00f      	b.n	8001326 <StartBMPcapture+0x7a>
	{
		//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
		//USART_SendData(USART1, pgm_read_byte(&bmp_header[temp]));
		data_to_send = pgm_read_byte(&bmp_header[temp]);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4a36      	ldr	r2, [pc, #216]	; (80013e4 <StartBMPcapture+0x138>)
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	727b      	strb	r3, [r7, #9]
		HAL_UART_Transmit(&huart2, &data_to_send, 1, 400);
 8001310:	f107 0109 	add.w	r1, r7, #9
 8001314:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001318:	2201      	movs	r2, #1
 800131a:	4831      	ldr	r0, [pc, #196]	; (80013e0 <StartBMPcapture+0x134>)
 800131c:	f004 f855 	bl	80053ca <HAL_UART_Transmit>
	for(int temp = 0; temp < BMPIMAGEOFFSET; temp++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b41      	cmp	r3, #65	; 0x41
 800132a:	ddec      	ble.n	8001306 <StartBMPcapture+0x5a>

	}
	CS_LOW();
 800132c:	f7ff f8ec 	bl	8000508 <CS_LOW>
	set_fifo_burst();
 8001330:	f7ff f969 	bl	8000606 <set_fifo_burst>
	char VH, VL;
	int i = 0, j = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < 240; i++)
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	e02b      	b.n	800139a <StartBMPcapture+0xee>
	{
		for (j = 0; j < 320; j++)
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e021      	b.n	800138c <StartBMPcapture+0xe0>
		{
			VH = SPI1_ReadWriteByte(0x00);			
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ff8f 	bl	800126c <SPI1_ReadWriteByte>
 800134e:	4603      	mov	r3, r0
 8001350:	723b      	strb	r3, [r7, #8]
			VL = SPI1_ReadWriteByte(0x00);		
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff ff8a 	bl	800126c <SPI1_ReadWriteByte>
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
			//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
			//USART_SendData(USART1, VL);
			HAL_UART_Transmit(&huart2, &VL, 1, 400);
 800135c:	1df9      	adds	r1, r7, #7
 800135e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001362:	2201      	movs	r2, #1
 8001364:	481e      	ldr	r0, [pc, #120]	; (80013e0 <StartBMPcapture+0x134>)
 8001366:	f004 f830 	bl	80053ca <HAL_UART_Transmit>
			us_delay(15);
 800136a:	200f      	movs	r0, #15
 800136c:	f7ff fb0e 	bl	800098c <us_delay>
			//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
			//USART_SendData(USART1, VH);
			HAL_UART_Transmit(&huart2, &VH, 1, 400);
 8001370:	f107 0108 	add.w	r1, r7, #8
 8001374:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001378:	2201      	movs	r2, #1
 800137a:	4819      	ldr	r0, [pc, #100]	; (80013e0 <StartBMPcapture+0x134>)
 800137c:	f004 f825 	bl	80053ca <HAL_UART_Transmit>
			us_delay(15);
 8001380:	200f      	movs	r0, #15
 8001382:	f7ff fb03 	bl	800098c <us_delay>
		for (j = 0; j < 320; j++)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001392:	dbd9      	blt.n	8001348 <StartBMPcapture+0x9c>
	for (i = 0; i < 240; i++)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	3301      	adds	r3, #1
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2bef      	cmp	r3, #239	; 0xef
 800139e:	ddd0      	ble.n	8001342 <StartBMPcapture+0x96>
		}
	}
	d1 = 0xbb;
 80013a0:	23bb      	movs	r3, #187	; 0xbb
 80013a2:	72fb      	strb	r3, [r7, #11]
	d2 = 0xcc;
 80013a4:	23cc      	movs	r3, #204	; 0xcc
 80013a6:	72bb      	strb	r3, [r7, #10]
	//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
	//USART_SendData(USART1, 0xbb);
	HAL_UART_Transmit(&huart2, &d1, 1, 400);
 80013a8:	f107 010b 	add.w	r1, r7, #11
 80013ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013b0:	2201      	movs	r2, #1
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <StartBMPcapture+0x134>)
 80013b4:	f004 f809 	bl	80053ca <HAL_UART_Transmit>
	us_delay(12);
 80013b8:	200c      	movs	r0, #12
 80013ba:	f7ff fae7 	bl	800098c <us_delay>
	//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
	//USART_SendData(USART1, 0xcc);
	HAL_UART_Transmit(&huart2, &d2, 1, 400);
 80013be:	f107 010a 	add.w	r1, r7, #10
 80013c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013c6:	2201      	movs	r2, #1
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <StartBMPcapture+0x134>)
 80013ca:	f003 fffe 	bl	80053ca <HAL_UART_Transmit>
	CS_HIGH();
 80013ce:	f7ff f88f 	bl	80004f0 <CS_HIGH>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000030 	.word	0x20000030
 80013e0:	2000025c 	.word	0x2000025c
 80013e4:	08006bb8 	.word	0x08006bb8

080013e8 <LL_AHB2_GRP1_EnableClock>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001404:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800140c:	68fb      	ldr	r3, [r7, #12]
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001434:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4313      	orrs	r3, r2
 800145e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b096      	sub	sp, #88	; 0x58
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2238      	movs	r2, #56	; 0x38
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 fd67 	bl	8005f78 <memset>
  if(hi2c->Instance==I2C3)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d127      	bne.n	8001504 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014ba:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 fa49 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80014d0:	f7ff fd72 	bl	8000fb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	2002      	movs	r0, #2
 80014d6:	f7ff ff87 	bl	80013e8 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB4     ------> I2C3_SDA
    PB13     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_13;
 80014da:	f242 0310 	movw	r3, #8208	; 0x2010
 80014de:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e0:	2312      	movs	r3, #18
 80014e2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014ec:	2304      	movs	r3, #4
 80014ee:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <HAL_I2C_MspInit+0x8c>)
 80014f8:	f000 fd80 	bl	8001ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001500:	f7ff ff8a 	bl	8001418 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3758      	adds	r7, #88	; 0x58
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40005c00 	.word	0x40005c00
 8001510:	48000400 	.word	0x48000400

08001514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b096      	sub	sp, #88	; 0x58
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2238      	movs	r2, #56	; 0x38
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f004 fd1f 	bl	8005f78 <memset>
  if(hspi->Instance==SPI1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6d      	ldr	r2, [pc, #436]	; (80016f4 <HAL_SPI_MspInit+0x1e0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d12c      	bne.n	800159e <HAL_SPI_MspInit+0x8a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001544:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001548:	f7ff ff7e 	bl	8001448 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff ff4b 	bl	80013e8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2002      	movs	r0, #2
 8001554:	f7ff ff48 	bl	80013e8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001558:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800155c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800156a:	2305      	movs	r3, #5
 800156c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001578:	f000 fd40 	bl	8001ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800157c:	2308      	movs	r3, #8
 800157e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158c:	2305      	movs	r3, #5
 800158e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001594:	4619      	mov	r1, r3
 8001596:	4858      	ldr	r0, [pc, #352]	; (80016f8 <HAL_SPI_MspInit+0x1e4>)
 8001598:	f000 fd30 	bl	8001ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800159c:	e0a5      	b.n	80016ea <HAL_SPI_MspInit+0x1d6>
  else if(hspi->Instance==SPI2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a56      	ldr	r2, [pc, #344]	; (80016fc <HAL_SPI_MspInit+0x1e8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	f040 80a0 	bne.w	80016ea <HAL_SPI_MspInit+0x1d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80015aa:	2310      	movs	r3, #16
 80015ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_PLL;
 80015ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 f9cf 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_SPI_MspInit+0xb4>
      Error_Handler();
 80015c4:	f7ff fcf8 	bl	8000fb8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015cc:	f7ff ff24 	bl	8001418 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	2002      	movs	r0, #2
 80015d2:	f7ff ff09 	bl	80013e8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff ff06 	bl	80013e8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ee:	2305      	movs	r3, #5
 80015f0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015f6:	4619      	mov	r1, r3
 80015f8:	483f      	ldr	r0, [pc, #252]	; (80016f8 <HAL_SPI_MspInit+0x1e4>)
 80015fa:	f000 fcff 	bl	8001ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80015fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001602:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001610:	2305      	movs	r3, #5
 8001612:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001618:	4619      	mov	r1, r3
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f000 fced 	bl	8001ffc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel1;
 8001622:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 8001624:	4a37      	ldr	r2, [pc, #220]	; (8001704 <HAL_SPI_MspInit+0x1f0>)
 8001626:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 800162a:	2209      	movs	r2, #9
 800162c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162e:	4b34      	ldr	r3, [pc, #208]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001646:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001658:	4829      	ldr	r0, [pc, #164]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 800165a:	f000 fac5 	bl	8001be8 <HAL_DMA_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_SPI_MspInit+0x154>
      Error_Handler();
 8001664:	f7ff fca8 	bl	8000fb8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001668:	2110      	movs	r1, #16
 800166a:	4825      	ldr	r0, [pc, #148]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 800166c:	f000 fc2a 	bl	8001ec4 <HAL_DMA_ConfigChannelAttributes>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_SPI_MspInit+0x166>
      Error_Handler();
 8001676:	f7ff fc9f 	bl	8000fb8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a20      	ldr	r2, [pc, #128]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 800167e:	659a      	str	r2, [r3, #88]	; 0x58
 8001680:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_SPI_MspInit+0x1ec>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 8001688:	4a20      	ldr	r2, [pc, #128]	; (800170c <HAL_SPI_MspInit+0x1f8>)
 800168a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 800168e:	220a      	movs	r2, #10
 8001690:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 8001694:	2210      	movs	r2, #16
 8001696:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80016bc:	4812      	ldr	r0, [pc, #72]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 80016be:	f000 fa93 	bl	8001be8 <HAL_DMA_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_SPI_MspInit+0x1b8>
      Error_Handler();
 80016c8:	f7ff fc76 	bl	8000fb8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80016cc:	2110      	movs	r1, #16
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 80016d0:	f000 fbf8 	bl	8001ec4 <HAL_DMA_ConfigChannelAttributes>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_SPI_MspInit+0x1ca>
      Error_Handler();
 80016da:	f7ff fc6d 	bl	8000fb8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
 80016e4:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_SPI_MspInit+0x1f4>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80016ea:	bf00      	nop
 80016ec:	3758      	adds	r7, #88	; 0x58
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40013000 	.word	0x40013000
 80016f8:	48000400 	.word	0x48000400
 80016fc:	40003800 	.word	0x40003800
 8001700:	20000150 	.word	0x20000150
 8001704:	40020008 	.word	0x40020008
 8001708:	200001b0 	.word	0x200001b0
 800170c:	4002001c 	.word	0x4002001c

08001710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a05      	ldr	r2, [pc, #20]	; (8001734 <HAL_TIM_Base_MspInit+0x24>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d103      	bne.n	800172a <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001722:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001726:	f7ff fe8f 	bl	8001448 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40012c00 	.word	0x40012c00

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b096      	sub	sp, #88	; 0x58
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2238      	movs	r2, #56	; 0x38
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f004 fc0d 	bl	8005f78 <memset>
  if(huart->Instance==USART2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a16      	ldr	r2, [pc, #88]	; (80017bc <HAL_UART_MspInit+0x84>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d125      	bne.n	80017b4 <HAL_UART_MspInit+0x7c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001768:	2302      	movs	r3, #2
 800176a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_UART_MspInit+0x88>)
 800176e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	4618      	mov	r0, r3
 8001776:	f002 f8f1 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001780:	f7ff fc1a 	bl	8000fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001784:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001788:	f7ff fe46 	bl	8001418 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff fe2b 	bl	80013e8 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001792:	230c      	movs	r3, #12
 8001794:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a2:	2307      	movs	r3, #7
 80017a4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f000 fc24 	bl	8001ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3758      	adds	r7, #88	; 0x58
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40004400 	.word	0x40004400
 80017c0:	000c0004 	.word	0x000c0004

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180a:	f000 f8a1 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA1_Channel1_IRQHandler+0x10>)
 800181a:	f000 fa8d 	bl	8001d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000150 	.word	0x20000150

08001828 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <DMA1_Channel2_IRQHandler+0x10>)
 800182e:	f000 fa83 	bl	8001d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200001b0 	.word	0x200001b0

0800183c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800184a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800184c:	f7ff fff6 	bl	800183c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <LoopForever+0x6>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	; (8001888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <LoopForever+0xe>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	; (8001894 <LoopForever+0x16>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001876:	f004 fb5b 	bl	8005f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187a:	f7ff f8e5 	bl	8000a48 <main>

0800187e <LoopForever>:

LoopForever:
    b LoopForever
 800187e:	e7fe      	b.n	800187e <LoopForever>
  ldr   r0, =_estack
 8001880:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800188c:	08006cd4 	.word	0x08006cd4
  ldr r2, =_sbss
 8001890:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001894:	200002f8 	.word	0x200002f8

08001898 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a6:	2003      	movs	r0, #3
 80018a8:	f000 f95e 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018ac:	f001 fe78 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <HAL_Init+0x3c>)
 80018b4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f810 	bl	80018dc <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	e001      	b.n	80018cc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c8:	f7ff fdd6 	bl	8001478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018cc:	79fb      	ldrb	r3, [r7, #7]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_InitTick+0x6c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d024      	beq.n	800193a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018f0:	f001 fe56 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_InitTick+0x6c>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4619      	mov	r1, r3
 80018fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001900:	fbb3 f3f1 	udiv	r3, r3, r1
 8001904:	fbb2 f3f3 	udiv	r3, r2, r3
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f960 	bl	8001bce <HAL_SYSTICK_Config>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10f      	bne.n	8001934 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b0f      	cmp	r3, #15
 8001918:	d809      	bhi.n	800192e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191a:	2200      	movs	r2, #0
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	f04f 30ff 	mov.w	r0, #4294967295
 8001922:	f000 f92c 	bl	8001b7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_InitTick+0x70>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e007      	b.n	800193e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	e004      	b.n	800193e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e001      	b.n	800193e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000000c 	.word	0x2000000c
 800194c:	20000008 	.word	0x20000008

08001950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_IncTick+0x1c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_IncTick+0x20>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a03      	ldr	r2, [pc, #12]	; (8001970 <HAL_IncTick+0x20>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	2000000c 	.word	0x2000000c
 8001970:	200002f4 	.word	0x200002f4

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b02      	ldr	r3, [pc, #8]	; (8001984 <HAL_GetTick+0x10>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	200002f4 	.word	0x200002f4

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff fff0 	bl	8001974 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffe0 	bl	8001974 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000000c 	.word	0x2000000c

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4906      	ldr	r1, [pc, #24]	; (8001a68 <__NVIC_EnableIRQ+0x34>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f7ff ff90 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff2d 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff44 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff92 	bl	8001ac0 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff61 	bl	8001a6c <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff37 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa4 	bl	8001b24 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e08e      	b.n	8001d18 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_DMA_Init+0x138>)
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d80f      	bhi.n	8001c26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b45      	ldr	r3, [pc, #276]	; (8001d24 <HAL_DMA_Init+0x13c>)
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a45      	ldr	r2, [pc, #276]	; (8001d28 <HAL_DMA_Init+0x140>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	009a      	lsls	r2, r3, #2
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a42      	ldr	r2, [pc, #264]	; (8001d2c <HAL_DMA_Init+0x144>)
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
 8001c24:	e00e      	b.n	8001c44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <HAL_DMA_Init+0x148>)
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a3d      	ldr	r2, [pc, #244]	; (8001d28 <HAL_DMA_Init+0x140>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	009a      	lsls	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a3c      	ldr	r2, [pc, #240]	; (8001d34 <HAL_DMA_Init+0x14c>)
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f944 	bl	8001f24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ca4:	d102      	bne.n	8001cac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cb8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cc2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_DMA_Init+0x106>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d80c      	bhi.n	8001cee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f96d 	bl	8001fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	e008      	b.n	8001d00 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020407 	.word	0x40020407
 8001d24:	bffdfff8 	.word	0xbffdfff8
 8001d28:	cccccccd 	.word	0xcccccccd
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	bffdfbf8 	.word	0xbffdfbf8
 8001d34:	40020400 	.word	0x40020400

08001d38 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f003 031c 	and.w	r3, r3, #28
 8001d58:	2204      	movs	r2, #4
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d027      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x7c>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d022      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0204 	bic.w	r2, r2, #4
 8001d8a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	f003 021c 	and.w	r2, r3, #28
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	2104      	movs	r1, #4
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8081 	beq.w	8001eac <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001db2:	e07b      	b.n	8001eac <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	f003 031c 	and.w	r3, r3, #28
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d03d      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x10c>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d038      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 020a 	bic.w	r2, r2, #10
 8001dee:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <HAL_DMA_IRQHandler+0x180>)
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d909      	bls.n	8001e18 <HAL_DMA_IRQHandler+0xe0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f003 031c 	and.w	r3, r3, #28
 8001e0c:	4a2b      	ldr	r2, [pc, #172]	; (8001ebc <HAL_DMA_IRQHandler+0x184>)
 8001e0e:	2102      	movs	r1, #2
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	6053      	str	r3, [r2, #4]
 8001e16:	e008      	b.n	8001e2a <HAL_DMA_IRQHandler+0xf2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	f003 031c 	and.w	r3, r3, #28
 8001e20:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <HAL_DMA_IRQHandler+0x188>)
 8001e22:	2102      	movs	r1, #2
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d038      	beq.n	8001eac <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001e42:	e033      	b.n	8001eac <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	f003 031c 	and.w	r3, r3, #28
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d02a      	beq.n	8001eae <HAL_DMA_IRQHandler+0x176>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d025      	beq.n	8001eae <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 020e 	bic.w	r2, r2, #14
 8001e70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f003 021c 	and.w	r2, r3, #28
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f202 	lsl.w	r2, r1, r2
 8001e84:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
}
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40020080 	.word	0x40020080
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d103      	bne.n	8001ee0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	72fb      	strb	r3, [r7, #11]
    return status;
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	e01b      	b.n	8001f18 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00d      	beq.n	8001f0e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e003      	b.n	8001f0e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	601a      	str	r2, [r3, #0]

  return status;
 8001f16:	7afb      	ldrb	r3, [r7, #11]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
	...

08001f24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d813      	bhi.n	8001f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f44:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	3b08      	subs	r3, #8
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	e011      	b.n	8001f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	009a      	lsls	r2, r3, #2
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001f6a:	4413      	add	r3, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	3b08      	subs	r3, #8
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	3307      	adds	r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001f88:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2201      	movs	r2, #1
 8001f92:	409a      	lsls	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40020407 	.word	0x40020407
 8001fa8:	cccccccd 	.word	0xcccccccd
 8001fac:	4002081c 	.word	0x4002081c
 8001fb0:	40020880 	.word	0x40020880

08001fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	461a      	mov	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001fd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	1000823f 	.word	0x1000823f
 8001ff8:	40020940 	.word	0x40020940

08001ffc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	e140      	b.n	800228e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8132 	beq.w	8002288 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d005      	beq.n	800203c <HAL_GPIO_Init+0x40>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d130      	bne.n	800209e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002072:	2201      	movs	r2, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	f003 0201 	and.w	r2, r3, #1
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d017      	beq.n	80020da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d123      	bne.n	800212e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	6939      	ldr	r1, [r7, #16]
 800212a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2203      	movs	r2, #3
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0203 	and.w	r2, r3, #3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 808c 	beq.w	8002288 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002170:	4a4e      	ldr	r2, [pc, #312]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	2207      	movs	r2, #7
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800219a:	d00d      	beq.n	80021b8 <HAL_GPIO_Init+0x1bc>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a44      	ldr	r2, [pc, #272]	; (80022b0 <HAL_GPIO_Init+0x2b4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d007      	beq.n	80021b4 <HAL_GPIO_Init+0x1b8>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a43      	ldr	r2, [pc, #268]	; (80022b4 <HAL_GPIO_Init+0x2b8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d101      	bne.n	80021b0 <HAL_GPIO_Init+0x1b4>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e004      	b.n	80021ba <HAL_GPIO_Init+0x1be>
 80021b0:	2307      	movs	r3, #7
 80021b2:	e002      	b.n	80021ba <HAL_GPIO_Init+0x1be>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_GPIO_Init+0x1be>
 80021b8:	2300      	movs	r3, #0
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	f002 0203 	and.w	r2, r2, #3
 80021c0:	0092      	lsls	r2, r2, #2
 80021c2:	4093      	lsls	r3, r2
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ca:	4938      	ldr	r1, [pc, #224]	; (80022ac <HAL_GPIO_Init+0x2b0>)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021d8:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <HAL_GPIO_Init+0x2bc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021fc:	4a2e      	ldr	r2, [pc, #184]	; (80022b8 <HAL_GPIO_Init+0x2bc>)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002202:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_GPIO_Init+0x2bc>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002226:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <HAL_GPIO_Init+0x2bc>)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800222c:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_GPIO_Init+0x2bc>)
 800222e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002232:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002252:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_GPIO_Init+0x2bc>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_GPIO_Init+0x2bc>)
 800225c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002260:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <HAL_GPIO_Init+0x2bc>)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f aeb7 	bne.w	800200c <HAL_GPIO_Init+0x10>
  }
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40010000 	.word	0x40010000
 80022b0:	48000400 	.word	0x48000400
 80022b4:	48000800 	.word	0x48000800
 80022b8:	58000800 	.word	0x58000800

080022bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
 80022c8:	4613      	mov	r3, r2
 80022ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022cc:	787b      	ldrb	r3, [r7, #1]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022d8:	e002      	b.n	80022e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e081      	b.n	8002400 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d106      	bne.n	8002316 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff f8b7 	bl	8001484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2224      	movs	r2, #36	; 0x24
 800231a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800233a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800234a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	e006      	b.n	8002372 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002370:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d104      	bne.n	8002384 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002382:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002396:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69d9      	ldr	r1, [r3, #28]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1a      	ldr	r2, [r3, #32]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b20      	cmp	r3, #32
 800241c:	d138      	bne.n	8002490 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002428:	2302      	movs	r3, #2
 800242a:	e032      	b.n	8002492 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	; 0x24
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800245a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6819      	ldr	r1, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d139      	bne.n	8002526 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024bc:	2302      	movs	r3, #2
 80024be:	e033      	b.n	8002528 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2224      	movs	r2, #36	; 0x24
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
  }
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
	...

08002534 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_PWR_EnableBkUpAccess+0x18>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a03      	ldr	r2, [pc, #12]	; (800254c <HAL_PWR_EnableBkUpAccess+0x18>)
 800253e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	58000400 	.word	0x58000400

08002550 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_PWREx_GetVoltageRange+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	58000400 	.word	0x58000400

08002568 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002578:	d101      	bne.n	800257e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	58000400 	.word	0x58000400

0800258c <LL_RCC_HSE_EnableTcxo>:
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800259a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <LL_RCC_HSE_DisableTcxo>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d6:	d101      	bne.n	80025dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <LL_RCC_HSE_Enable>:
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <LL_RCC_HSE_Disable>:
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <LL_RCC_HSE_IsReady>:
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002630:	d101      	bne.n	8002636 <LL_RCC_HSE_IsReady+0x18>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_RCC_HSE_IsReady+0x1a>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <LL_RCC_HSI_Enable>:
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <LL_RCC_HSI_Disable>:
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <LL_RCC_HSI_IsReady>:
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800267c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d101      	bne.n	8002690 <LL_RCC_HSI_IsReady+0x18>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <LL_RCC_HSI_IsReady+0x1a>
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <LL_RCC_HSI_SetCalibTrimming>:
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80026a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	061b      	lsls	r3, r3, #24
 80026b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d101      	bne.n	80026da <LL_RCC_LSE_IsReady+0x18>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_RCC_LSE_IsReady+0x1a>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80026e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b02      	cmp	r3, #2
 8002736:	d101      	bne.n	800273c <LL_RCC_LSI_IsReady+0x18>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <LL_RCC_LSI_IsReady+0x1a>
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6013      	str	r3, [r2, #0]
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6013      	str	r3, [r2, #0]
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d101      	bne.n	8002794 <LL_RCC_MSI_IsReady+0x16>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_RCC_MSI_IsReady+0x18>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d101      	bne.n	80027b4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80027c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80027d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f023 0203 	bic.w	r2, r3, #3
 8002826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4313      	orrs	r3, r2
 800282e:	608b      	str	r3, [r1, #8]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800283e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 030c 	and.w	r3, r3, #12
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4313      	orrs	r3, r2
 800286a:	608b      	str	r3, [r1, #8]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028b0:	f023 020f 	bic.w	r2, r3, #15
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002936:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800299e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80029b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029be:	d101      	bne.n	80029c4 <LL_RCC_PLL_IsReady+0x18>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <LL_RCC_PLL_IsReady+0x1a>
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3a:	d101      	bne.n	8002a40 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a5e:	d101      	bne.n	8002a64 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a82:	d101      	bne.n	8002a88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aa4:	d101      	bne.n	8002aaa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ac6:	d101      	bne.n	8002acc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e36f      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aea:	f7ff fea6 	bl	800283a <LL_RCC_GetSysClkSource>
 8002aee:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af0:	f7ff ff8f 	bl	8002a12 <LL_RCC_PLL_GetMainSource>
 8002af4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80c4 	beq.w	8002c8c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RCC_OscConfig+0x3e>
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d176      	bne.n	8002bfe <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d173      	bne.n	8002bfe <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e353      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_OscConfig+0x68>
 8002b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b3e:	e006      	b.n	8002b4e <HAL_RCC_OscConfig+0x76>
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d222      	bcs.n	8002b98 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fd5a 	bl	8003610 <RCC_SetFlashLatencyFromMSIRange>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e331      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fe2b 	bl	80027ec <LL_RCC_MSI_SetCalibTrimming>
 8002b96:	e021      	b.n	8002bdc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba2:	f043 0308 	orr.w	r3, r3, #8
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fe12 	bl	80027ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fd1f 	bl	8003610 <RCC_SetFlashLatencyFromMSIRange>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e2f6      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bdc:	f000 fce0 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4aa7      	ldr	r2, [pc, #668]	; (8002e80 <HAL_RCC_OscConfig+0x3a8>)
 8002be4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002be6:	4ba7      	ldr	r3, [pc, #668]	; (8002e84 <HAL_RCC_OscConfig+0x3ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fe76 	bl	80018dc <HAL_InitTick>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d047      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	e2e5      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d02c      	beq.n	8002c60 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c06:	f7ff fd9e 	bl	8002746 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe feb3 	bl	8001974 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c12:	f7fe feaf 	bl	8001974 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e2d2      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c24:	f7ff fdab 	bl	800277e <LL_RCC_MSI_IsReady>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f1      	beq.n	8002c12 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c50:	4313      	orrs	r3, r2
 8002c52:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fdc7 	bl	80027ec <LL_RCC_MSI_SetCalibTrimming>
 8002c5e:	e015      	b.n	8002c8c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c60:	f7ff fd7f 	bl	8002762 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fe86 	bl	8001974 <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c6c:	f7fe fe82 	bl	8001974 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e2a5      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c7e:	f7ff fd7e 	bl	800277e <LL_RCC_MSI_IsReady>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f1      	bne.n	8002c6c <HAL_RCC_OscConfig+0x194>
 8002c88:	e000      	b.n	8002c8c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c8a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d058      	beq.n	8002d4a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d005      	beq.n	8002caa <HAL_RCC_OscConfig+0x1d2>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d108      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d14b      	bne.n	8002d4a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e289      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd4:	d102      	bne.n	8002cdc <HAL_RCC_OscConfig+0x204>
 8002cd6:	f7ff fc86 	bl	80025e6 <LL_RCC_HSE_Enable>
 8002cda:	e00d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x220>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002ce4:	d104      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x218>
 8002ce6:	f7ff fc51 	bl	800258c <LL_RCC_HSE_EnableTcxo>
 8002cea:	f7ff fc7c 	bl	80025e6 <LL_RCC_HSE_Enable>
 8002cee:	e003      	b.n	8002cf8 <HAL_RCC_OscConfig+0x220>
 8002cf0:	f7ff fc87 	bl	8002602 <LL_RCC_HSE_Disable>
 8002cf4:	f7ff fc58 	bl	80025a8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d012      	beq.n	8002d26 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fe fe38 	bl	8001974 <HAL_GetTick>
 8002d04:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe fe34 	bl	8001974 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e257      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d1a:	f7ff fc80 	bl	800261e <LL_RCC_HSE_IsReady>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f1      	beq.n	8002d08 <HAL_RCC_OscConfig+0x230>
 8002d24:	e011      	b.n	8002d4a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fe fe25 	bl	8001974 <HAL_GetTick>
 8002d2a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fe21 	bl	8001974 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	; 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e244      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d40:	f7ff fc6d 	bl	800261e <LL_RCC_HSE_IsReady>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f1      	bne.n	8002d2e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d046      	beq.n	8002de4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x290>
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d10e      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e22a      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fc8e 	bl	800269a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d7e:	e031      	b.n	8002de4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d019      	beq.n	8002dbc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	f7ff fc5a 	bl	8002640 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fdf2 	bl	8001974 <HAL_GetTick>
 8002d90:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d94:	f7fe fdee 	bl	8001974 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e211      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002da6:	f7ff fc67 	bl	8002678 <LL_RCC_HSI_IsReady>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f1      	beq.n	8002d94 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fc70 	bl	800269a <LL_RCC_HSI_SetCalibTrimming>
 8002dba:	e013      	b.n	8002de4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbc:	f7ff fc4e 	bl	800265c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fdd8 	bl	8001974 <HAL_GetTick>
 8002dc4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fdd4 	bl	8001974 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1f7      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dda:	f7ff fc4d 	bl	8002678 <LL_RCC_HSI_IsReady>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f1      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d06e      	beq.n	8002ece <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d056      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e00:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d031      	beq.n	8002e74 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e1d0      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d013      	beq.n	8002e5a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002e32:	f7ff fc67 	bl	8002704 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e36:	f7fe fd9d 	bl	8001974 <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fd99 	bl	8001974 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b11      	cmp	r3, #17
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1bc      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e50:	f7ff fc68 	bl	8002724 <LL_RCC_LSI_IsReady>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f1      	bne.n	8002e3e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e62:	f023 0210 	bic.w	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e74:	f7ff fc36 	bl	80026e4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e78:	f7fe fd7c 	bl	8001974 <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e7e:	e00c      	b.n	8002e9a <HAL_RCC_OscConfig+0x3c2>
 8002e80:	20000004 	.word	0x20000004
 8002e84:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e88:	f7fe fd74 	bl	8001974 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b11      	cmp	r3, #17
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e197      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e9a:	f7ff fc43 	bl	8002724 <LL_RCC_LSI_IsReady>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f1      	beq.n	8002e88 <HAL_RCC_OscConfig+0x3b0>
 8002ea4:	e013      	b.n	8002ece <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea6:	f7ff fc2d 	bl	8002704 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fd63 	bl	8001974 <HAL_GetTick>
 8002eae:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fd5f 	bl	8001974 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b11      	cmp	r3, #17
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e182      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ec4:	f7ff fc2e 	bl	8002724 <LL_RCC_LSI_IsReady>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f1      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80d8 	beq.w	800308c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002edc:	f7ff fb44 	bl	8002568 <LL_PWR_IsEnabledBkUpAccess>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d113      	bne.n	8002f0e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ee6:	f7ff fb25 	bl	8002534 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fd43 	bl	8001974 <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe fd3f 	bl	8001974 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e162      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f04:	f7ff fb30 	bl	8002568 <LL_PWR_IsEnabledBkUpAccess>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f1      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d07b      	beq.n	800300e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b85      	cmp	r3, #133	; 0x85
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fd1b 	bl	8001974 <HAL_GetTick>
 8002f3e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe fd0d 	bl	8001974 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e12e      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f6c:	f7ff fba9 	bl	80026c2 <LL_RCC_LSE_IsReady>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ef      	beq.n	8002f56 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b81      	cmp	r3, #129	; 0x81
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b85      	cmp	r3, #133	; 0x85
 8002f84:	d121      	bne.n	8002fca <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe fcf5 	bl	8001974 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fe fce7 	bl	8001974 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e108      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ec      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002fc8:	e060      	b.n	800308c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fe fcd3 	bl	8001974 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fe fcc5 	bl	8001974 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0e6      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1ec      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x50e>
 800300c:	e03e      	b.n	800308c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300e:	f7fe fcb1 	bl	8001974 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fca3 	bl	8001974 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0c4      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ec      	bne.n	800302a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fe fc90 	bl	8001974 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800306a:	e00a      	b.n	8003082 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fe fc82 	bl	8001974 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0a3      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003082:	f7ff fb1e 	bl	80026c2 <LL_RCC_LSE_IsReady>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ef      	bne.n	800306c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8099 	beq.w	80031c8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b0c      	cmp	r3, #12
 800309a:	d06c      	beq.n	8003176 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d14b      	bne.n	800313c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	f7ff fc74 	bl	8002990 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe fc64 	bl	8001974 <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fc60 	bl	8001974 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b0a      	cmp	r3, #10
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e083      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80030c2:	f7ff fc73 	bl	80029ac <LL_RCC_PLL_IsReady>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f1      	bne.n	80030b0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <HAL_RCC_OscConfig+0x6fc>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030de:	4311      	orrs	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030e4:	0212      	lsls	r2, r2, #8
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030f2:	4311      	orrs	r1, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030f8:	430a      	orrs	r2, r1
 80030fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030fe:	4313      	orrs	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003102:	f7ff fc37 	bl	8002974 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003114:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe fc2d 	bl	8001974 <HAL_GetTick>
 800311a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe fc29 	bl	8001974 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b0a      	cmp	r3, #10
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e04c      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003130:	f7ff fc3c 	bl	80029ac <LL_RCC_PLL_IsReady>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f1      	beq.n	800311e <HAL_RCC_OscConfig+0x646>
 800313a:	e045      	b.n	80031c8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	f7ff fc28 	bl	8002990 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fc18 	bl	8001974 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fc14 	bl	8001974 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b0a      	cmp	r3, #10
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e037      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800315a:	f7ff fc27 	bl	80029ac <LL_RCC_PLL_IsReady>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f1      	bne.n	8003148 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_RCC_OscConfig+0x700>)
 8003170:	4013      	ands	r3, r2
 8003172:	60cb      	str	r3, [r1, #12]
 8003174:	e028      	b.n	80031c8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e023      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f003 0203 	and.w	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	429a      	cmp	r2, r3
 8003196:	d115      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d10e      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	11c1808c 	.word	0x11c1808c
 80031d8:	eefefffc 	.word	0xeefefffc

080031dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e12c      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b98      	ldr	r3, [pc, #608]	; (8003454 <HAL_RCC_ClockConfig+0x278>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d91b      	bls.n	8003236 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b95      	ldr	r3, [pc, #596]	; (8003454 <HAL_RCC_ClockConfig+0x278>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 0207 	bic.w	r2, r3, #7
 8003206:	4993      	ldr	r1, [pc, #588]	; (8003454 <HAL_RCC_ClockConfig+0x278>)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320e:	f7fe fbb1 	bl	8001974 <HAL_GetTick>
 8003212:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003214:	e008      	b.n	8003228 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003216:	f7fe fbad 	bl	8001974 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e110      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003228:	4b8a      	ldr	r3, [pc, #552]	; (8003454 <HAL_RCC_ClockConfig+0x278>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d1ef      	bne.n	8003216 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fb02 	bl	8002850 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800324c:	f7fe fb92 	bl	8001974 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003254:	f7fe fb8e 	bl	8001974 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0f1      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003266:	f7ff fbdf 	bl	8002a28 <LL_RCC_IsActiveFlag_HPRE>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f1      	beq.n	8003254 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff faf8 	bl	8002876 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003286:	f7fe fb75 	bl	8001974 <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800328e:	f7fe fb71 	bl	8001974 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e0d4      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80032a0:	f7ff fbd3 	bl	8002a4a <LL_RCC_IsActiveFlag_C2HPRE>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f1      	beq.n	800328e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff faf0 	bl	80028a0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032c0:	f7fe fb58 	bl	8001974 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032c8:	f7fe fb54 	bl	8001974 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e0b7      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032da:	f7ff fbc8 	bl	8002a6e <LL_RCC_IsActiveFlag_SHDHPRE>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f1      	beq.n	80032c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d016      	beq.n	800331e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fae9 	bl	80028cc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032fa:	f7fe fb3b 	bl	8001974 <HAL_GetTick>
 80032fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003302:	f7fe fb37 	bl	8001974 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e09a      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003314:	f7ff fbbd 	bl	8002a92 <LL_RCC_IsActiveFlag_PPRE1>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f1      	beq.n	8003302 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d017      	beq.n	800335a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fade 	bl	80028f2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003336:	f7fe fb1d 	bl	8001974 <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800333e:	f7fe fb19 	bl	8001974 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e07c      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003350:	f7ff fbb0 	bl	8002ab4 <LL_RCC_IsActiveFlag_PPRE2>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f1      	beq.n	800333e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d043      	beq.n	80033ee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d106      	bne.n	800337c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800336e:	f7ff f956 	bl	800261e <LL_RCC_HSE_IsReady>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d11e      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e066      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d106      	bne.n	8003392 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003384:	f7ff fb12 	bl	80029ac <LL_RCC_PLL_IsReady>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d113      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e05b      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800339a:	f7ff f9f0 	bl	800277e <LL_RCC_MSI_IsReady>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d108      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e050      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80033a8:	f7ff f966 	bl	8002678 <LL_RCC_HSI_IsReady>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e049      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fa2a 	bl	8002814 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fe fad8 	bl	8001974 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fe fad4 	bl	8001974 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e035      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	f7ff fa2c 	bl	800283a <LL_RCC_GetSysClkSource>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d1ec      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_RCC_ClockConfig+0x278>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d21b      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fc:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_RCC_ClockConfig+0x278>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f023 0207 	bic.w	r2, r3, #7
 8003404:	4913      	ldr	r1, [pc, #76]	; (8003454 <HAL_RCC_ClockConfig+0x278>)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800340c:	f7fe fab2 	bl	8001974 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	e008      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003414:	f7fe faae 	bl	8001974 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e011      	b.n	800344a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_ClockConfig+0x278>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d1ef      	bne.n	8003414 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003434:	f000 f8b4 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 8003438:	4603      	mov	r3, r0
 800343a:	4a07      	ldr	r2, [pc, #28]	; (8003458 <HAL_RCC_ClockConfig+0x27c>)
 800343c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <HAL_RCC_ClockConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fa4a 	bl	80018dc <HAL_InitTick>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	58004000 	.word	0x58004000
 8003458:	20000004 	.word	0x20000004
 800345c:	20000008 	.word	0x20000008

08003460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	f7ff f9e4 	bl	800283a <LL_RCC_GetSysClkSource>
 8003472:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003474:	f7ff facd 	bl	8002a12 <LL_RCC_PLL_GetMainSource>
 8003478:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x2c>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d139      	bne.n	80034fa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d136      	bne.n	80034fa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800348c:	f7ff f987 	bl	800279e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d115      	bne.n	80034c2 <HAL_RCC_GetSysClockFreq+0x62>
 8003496:	f7ff f982 	bl	800279e <LL_RCC_MSI_IsEnabledRangeSelect>
 800349a:	4603      	mov	r3, r0
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <HAL_RCC_GetSysClockFreq+0x4e>
 80034a0:	f7ff f98d 	bl	80027be <LL_RCC_MSI_GetRange>
 80034a4:	4603      	mov	r3, r0
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	e005      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x5a>
 80034ae:	f7ff f991 	bl	80027d4 <LL_RCC_MSI_GetRangeAfterStandby>
 80034b2:	4603      	mov	r3, r0
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	4a36      	ldr	r2, [pc, #216]	; (8003594 <HAL_RCC_GetSysClockFreq+0x134>)
 80034bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c0:	e014      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x8c>
 80034c2:	f7ff f96c 	bl	800279e <LL_RCC_MSI_IsEnabledRangeSelect>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d106      	bne.n	80034da <HAL_RCC_GetSysClockFreq+0x7a>
 80034cc:	f7ff f977 	bl	80027be <LL_RCC_MSI_GetRange>
 80034d0:	4603      	mov	r3, r0
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	e005      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x86>
 80034da:	f7ff f97b 	bl	80027d4 <LL_RCC_MSI_GetRangeAfterStandby>
 80034de:	4603      	mov	r3, r0
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	4a2b      	ldr	r2, [pc, #172]	; (8003594 <HAL_RCC_GetSysClockFreq+0x134>)
 80034e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ec:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d115      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034f8:	e012      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d102      	bne.n	8003506 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003500:	4b25      	ldr	r3, [pc, #148]	; (8003598 <HAL_RCC_GetSysClockFreq+0x138>)
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e00c      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d109      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800350c:	f7ff f85a 	bl	80025c4 <LL_RCC_HSE_IsEnabledDiv2>
 8003510:	4603      	mov	r3, r0
 8003512:	2b01      	cmp	r3, #1
 8003514:	d102      	bne.n	800351c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_RCC_GetSysClockFreq+0x138>)
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e001      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_GetSysClockFreq+0x13c>)
 800351e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003520:	f7ff f98b 	bl	800283a <LL_RCC_GetSysClkSource>
 8003524:	4603      	mov	r3, r0
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d12f      	bne.n	800358a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800352a:	f7ff fa72 	bl	8002a12 <LL_RCC_PLL_GetMainSource>
 800352e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d003      	beq.n	800353e <HAL_RCC_GetSysClockFreq+0xde>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d003      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0xe4>
 800353c:	e00d      	b.n	800355a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800353e:	4b16      	ldr	r3, [pc, #88]	; (8003598 <HAL_RCC_GetSysClockFreq+0x138>)
 8003540:	60fb      	str	r3, [r7, #12]
        break;
 8003542:	e00d      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003544:	f7ff f83e 	bl	80025c4 <LL_RCC_HSE_IsEnabledDiv2>
 8003548:	4603      	mov	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d102      	bne.n	8003554 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCC_GetSysClockFreq+0x138>)
 8003550:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003552:	e005      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003556:	60fb      	str	r3, [r7, #12]
        break;
 8003558:	e002      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	60fb      	str	r3, [r7, #12]
        break;
 800355e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003560:	f7ff fa35 	bl	80029ce <LL_RCC_PLL_GetN>
 8003564:	4602      	mov	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	fb03 f402 	mul.w	r4, r3, r2
 800356c:	f7ff fa46 	bl	80029fc <LL_RCC_PLL_GetDivider>
 8003570:	4603      	mov	r3, r0
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	3301      	adds	r3, #1
 8003576:	fbb4 f4f3 	udiv	r4, r4, r3
 800357a:	f7ff fa34 	bl	80029e6 <LL_RCC_PLL_GetR>
 800357e:	4603      	mov	r3, r0
 8003580:	0f5b      	lsrs	r3, r3, #29
 8003582:	3301      	adds	r3, #1
 8003584:	fbb4 f3f3 	udiv	r3, r4, r3
 8003588:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800358a:	697b      	ldr	r3, [r7, #20]
}
 800358c:	4618      	mov	r0, r3
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	bd90      	pop	{r4, r7, pc}
 8003594:	08006c5c 	.word	0x08006c5c
 8003598:	00f42400 	.word	0x00f42400
 800359c:	01e84800 	.word	0x01e84800

080035a0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a0:	b598      	push	{r3, r4, r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80035a4:	f7ff ff5c 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 80035a8:	4604      	mov	r4, r0
 80035aa:	f7ff f9b5 	bl	8002918 <LL_RCC_GetAHBPrescaler>
 80035ae:	4603      	mov	r3, r0
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	4a03      	ldr	r2, [pc, #12]	; (80035c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80035b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035bc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd98      	pop	{r3, r4, r7, pc}
 80035c4:	08006bfc 	.word	0x08006bfc

080035c8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c8:	b598      	push	{r3, r4, r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80035cc:	f7ff ffe8 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 80035d0:	4604      	mov	r4, r0
 80035d2:	f7ff f9b9 	bl	8002948 <LL_RCC_GetAPB1Prescaler>
 80035d6:	4603      	mov	r3, r0
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	4a03      	ldr	r2, [pc, #12]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd98      	pop	{r3, r4, r7, pc}
 80035e8:	08006c3c 	.word	0x08006c3c

080035ec <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ec:	b598      	push	{r3, r4, r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80035f0:	f7ff ffd6 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 80035f4:	4604      	mov	r4, r0
 80035f6:	f7ff f9b2 	bl	800295e <LL_RCC_GetAPB2Prescaler>
 80035fa:	4603      	mov	r3, r0
 80035fc:	0adb      	lsrs	r3, r3, #11
 80035fe:	4a03      	ldr	r2, [pc, #12]	; (800360c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003604:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd98      	pop	{r3, r4, r7, pc}
 800360c:	08006c3c 	.word	0x08006c3c

08003610 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	4a10      	ldr	r2, [pc, #64]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003626:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003628:	f7ff f981 	bl	800292e <LL_RCC_GetAHB3Prescaler>
 800362c:	4603      	mov	r3, r0
 800362e:	091b      	lsrs	r3, r3, #4
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4a09      	ldr	r2, [pc, #36]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	0c9c      	lsrs	r4, r3, #18
 800364c:	f7fe ff80 	bl	8002550 <HAL_PWREx_GetVoltageRange>
 8003650:	4603      	mov	r3, r0
 8003652:	4619      	mov	r1, r3
 8003654:	4620      	mov	r0, r4
 8003656:	f000 f80b 	bl	8003670 <RCC_SetFlashLatency>
 800365a:	4603      	mov	r3, r0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	bd90      	pop	{r4, r7, pc}
 8003664:	08006c5c 	.word	0x08006c5c
 8003668:	08006bfc 	.word	0x08006bfc
 800366c:	431bde83 	.word	0x431bde83

08003670 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08e      	sub	sp, #56	; 0x38
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800367a:	4a3a      	ldr	r2, [pc, #232]	; (8003764 <RCC_SetFlashLatency+0xf4>)
 800367c:	f107 0320 	add.w	r3, r7, #32
 8003680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003684:	6018      	str	r0, [r3, #0]
 8003686:	3304      	adds	r3, #4
 8003688:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800368a:	4a37      	ldr	r2, [pc, #220]	; (8003768 <RCC_SetFlashLatency+0xf8>)
 800368c:	f107 0318 	add.w	r3, r7, #24
 8003690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003694:	6018      	str	r0, [r3, #0]
 8003696:	3304      	adds	r3, #4
 8003698:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800369a:	4a34      	ldr	r2, [pc, #208]	; (800376c <RCC_SetFlashLatency+0xfc>)
 800369c:	f107 030c 	add.w	r3, r7, #12
 80036a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80036a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80036a6:	2300      	movs	r3, #0
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b0:	d11b      	bne.n	80036ea <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	633b      	str	r3, [r7, #48]	; 0x30
 80036b6:	e014      	b.n	80036e2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	3338      	adds	r3, #56	; 0x38
 80036be:	443b      	add	r3, r7
 80036c0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80036c4:	461a      	mov	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d807      	bhi.n	80036dc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	3338      	adds	r3, #56	; 0x38
 80036d2:	443b      	add	r3, r7
 80036d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036da:	e021      	b.n	8003720 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	3301      	adds	r3, #1
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d9e7      	bls.n	80036b8 <RCC_SetFlashLatency+0x48>
 80036e8:	e01a      	b.n	8003720 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ee:	e014      	b.n	800371a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	3338      	adds	r3, #56	; 0x38
 80036f6:	443b      	add	r3, r7
 80036f8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80036fc:	461a      	mov	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4293      	cmp	r3, r2
 8003702:	d807      	bhi.n	8003714 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	3338      	adds	r3, #56	; 0x38
 800370a:	443b      	add	r3, r7
 800370c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003712:	e005      	b.n	8003720 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	3301      	adds	r3, #1
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	2b02      	cmp	r3, #2
 800371e:	d9e7      	bls.n	80036f0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <RCC_SetFlashLatency+0x100>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 0207 	bic.w	r2, r3, #7
 8003728:	4911      	ldr	r1, [pc, #68]	; (8003770 <RCC_SetFlashLatency+0x100>)
 800372a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003730:	f7fe f920 	bl	8001974 <HAL_GetTick>
 8003734:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003736:	e008      	b.n	800374a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003738:	f7fe f91c 	bl	8001974 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e007      	b.n	800375a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <RCC_SetFlashLatency+0x100>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003754:	429a      	cmp	r2, r3
 8003756:	d1ef      	bne.n	8003738 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3738      	adds	r7, #56	; 0x38
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	08005fa0 	.word	0x08005fa0
 8003768:	08005fa8 	.word	0x08005fa8
 800376c:	08005fb0 	.word	0x08005fb0
 8003770:	58004000 	.word	0x58004000

08003774 <LL_RCC_LSE_IsReady>:
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	d101      	bne.n	800378c <LL_RCC_LSE_IsReady+0x18>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <LL_RCC_LSE_IsReady+0x1a>
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <LL_RCC_SetUSARTClockSource>:
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800379e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	43db      	mvns	r3, r3
 80037ac:	401a      	ands	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_SetI2SClockSource>:
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80037ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <LL_RCC_SetLPUARTClockSource>:
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80037f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <LL_RCC_SetI2CClockSource>:
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003826:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003832:	43db      	mvns	r3, r3
 8003834:	401a      	ands	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800383e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <LL_RCC_SetLPTIMClockSource>:
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	041b      	lsls	r3, r3, #16
 8003868:	43db      	mvns	r3, r3
 800386a:	401a      	ands	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <LL_RCC_SetRNGClockSource>:
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <LL_RCC_SetADCClockSource>:
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80038b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <LL_RCC_SetRTCClockSource>:
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <LL_RCC_GetRTCClockSource>:
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <LL_RCC_ForceBackupDomainReset>:
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800391e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <LL_RCC_ReleaseBackupDomainReset>:
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800393e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003952:	bf00      	nop
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
	...

0800395c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003968:	2300      	movs	r3, #0
 800396a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800396c:	2300      	movs	r3, #0
 800396e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d058      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800397c:	f7fe fdda 	bl	8002534 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003980:	f7fd fff8 	bl	8001974 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003986:	e009      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003988:	f7fd fff4 	bl	8001974 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d902      	bls.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	74fb      	strb	r3, [r7, #19]
        break;
 800399a:	e006      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800399c:	4b7b      	ldr	r3, [pc, #492]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a8:	d1ee      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80039aa:	7cfb      	ldrb	r3, [r7, #19]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d13c      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80039b0:	f7ff ffa7 	bl	8003902 <LL_RCC_GetRTCClockSource>
 80039b4:	4602      	mov	r2, r0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d00f      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039cc:	f7ff ffa5 	bl	800391a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039d0:	f7ff ffb3 	bl	800393a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d014      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd ffc4 	bl	8001974 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80039ee:	e00b      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fd ffc0 	bl	8001974 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d902      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	74fb      	strb	r3, [r7, #19]
            break;
 8003a06:	e004      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003a08:	f7ff feb4 	bl	8003774 <LL_RCC_LSE_IsReady>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d1ee      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff5b 	bl	80038d8 <LL_RCC_SetRTCClockSource>
 8003a22:	e004      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	74bb      	strb	r3, [r7, #18]
 8003a28:	e001      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fea9 	bl	8003796 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fe9e 	bl	8003796 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fec0 	bl	80037f0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fee6 	bl	8003852 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fedb 	bl	8003852 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fed0 	bl	8003852 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d004      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fea9 	bl	800381a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fe9e 	bl	800381a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fe93 	bl	800381a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d011      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fe5e 	bl	80037c6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b12:	d107      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d010      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fea5 	bl	8003884 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d107      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d011      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fea3 	bl	80038ae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b70:	d107      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b80:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003b82:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	58000400 	.word	0x58000400

08003b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0c6      	b.n	8003d30 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb2:	d009      	beq.n	8003bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	61da      	str	r2, [r3, #28]
 8003bba:	e005      	b.n	8003bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fd fc99 	bl	8001514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c02:	d902      	bls.n	8003c0a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e002      	b.n	8003c10 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c18:	d007      	beq.n	8003c2a <HAL_SPI_Init+0x9a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c22:	d002      	beq.n	8003c2a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6c:	ea42 0103 	orr.w	r1, r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c88:	d11b      	bne.n	8003cc2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c9a:	d903      	bls.n	8003ca4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ca2:	e002      	b.n	8003caa <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d107      	bne.n	8003cc2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	f003 0204 	and.w	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ce8:	ea42 0103 	orr.w	r1, r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d02:	d105      	bne.n	8003d10 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	b292      	uxth	r2, r2
 8003d0e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_SPI_Transmit+0x22>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e17a      	b.n	8004050 <HAL_SPI_Transmit+0x318>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d62:	f7fd fe07 	bl	8001974 <HAL_GetTick>
 8003d66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d002      	beq.n	8003d7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d7c:	e15f      	b.n	800403e <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_Transmit+0x52>
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d8e:	e156      	b.n	800403e <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2203      	movs	r2, #3
 8003d94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	88fa      	ldrh	r2, [r7, #6]
 8003da8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dda:	d10f      	bne.n	8003dfc <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dfa:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e04:	d10f      	bne.n	8003e26 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e24:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d007      	beq.n	8003e44 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e4c:	d94b      	bls.n	8003ee6 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_SPI_Transmit+0x124>
 8003e56:	8afb      	ldrh	r3, [r7, #22]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d13e      	bne.n	8003eda <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	881a      	ldrh	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	1c9a      	adds	r2, r3, #2
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e80:	e02b      	b.n	8003eda <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d112      	bne.n	8003eb6 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	881a      	ldrh	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	1c9a      	adds	r2, r3, #2
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eb4:	e011      	b.n	8003eda <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb6:	f7fd fd5d 	bl	8001974 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d803      	bhi.n	8003ece <HAL_SPI_Transmit+0x196>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d102      	bne.n	8003ed4 <HAL_SPI_Transmit+0x19c>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ed8:	e0b1      	b.n	800403e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1ce      	bne.n	8003e82 <HAL_SPI_Transmit+0x14a>
 8003ee4:	e07c      	b.n	8003fe0 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_SPI_Transmit+0x1bc>
 8003eee:	8afb      	ldrh	r3, [r7, #22]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d170      	bne.n	8003fd6 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d912      	bls.n	8003f24 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	881a      	ldrh	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	1c9a      	adds	r2, r3, #2
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b02      	subs	r3, #2
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f22:	e058      	b.n	8003fd6 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f4a:	e044      	b.n	8003fd6 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d12b      	bne.n	8003fb2 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d912      	bls.n	8003f8a <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	881a      	ldrh	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	1c9a      	adds	r2, r3, #2
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b02      	subs	r3, #2
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f88:	e025      	b.n	8003fd6 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb0:	e011      	b.n	8003fd6 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fb2:	f7fd fcdf 	bl	8001974 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d803      	bhi.n	8003fca <HAL_SPI_Transmit+0x292>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d102      	bne.n	8003fd0 <HAL_SPI_Transmit+0x298>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fd4:	e033      	b.n	800403e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1b5      	bne.n	8003f4c <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe8:	d107      	bne.n	8003ffa <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ff8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	6839      	ldr	r1, [r7, #0]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fe6e 	bl	8004ce0 <SPI_EndRxTxTransaction>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	77fb      	strb	r3, [r7, #31]
 800403a:	e000      	b.n	800403e <HAL_SPI_Transmit+0x306>
  }

error:
 800403c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800404e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3720      	adds	r7, #32
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08c      	sub	sp, #48	; 0x30
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800407e:	d112      	bne.n	80040a6 <HAL_SPI_Receive+0x4e>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10e      	bne.n	80040a6 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2204      	movs	r2, #4
 800408c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f9c4 	bl	800442a <HAL_SPI_TransmitReceive>
 80040a2:	4603      	mov	r3, r0
 80040a4:	e1bd      	b.n	8004422 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_SPI_Receive+0x5c>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e1b6      	b.n	8004422 <HAL_SPI_Receive+0x3ca>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040bc:	f7fd fc5a 	bl	8001974 <HAL_GetTick>
 80040c0:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d003      	beq.n	80040d6 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
 80040d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80040d4:	e19b      	b.n	800440e <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_SPI_Receive+0x8a>
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d103      	bne.n	80040ea <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80040e8:	e191      	b.n	800440e <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2204      	movs	r2, #4
 80040ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	88fa      	ldrh	r2, [r7, #6]
 8004102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004134:	d118      	bne.n	8004168 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004154:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004170:	d908      	bls.n	8004184 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	e007      	b.n	8004194 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	d10f      	bne.n	80041be <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d007      	beq.n	80041dc <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041e4:	d869      	bhi.n	80042ba <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041e6:	e031      	b.n	800424c <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d117      	bne.n	8004226 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f103 020c 	add.w	r2, r3, #12
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	7812      	ldrb	r2, [r2, #0]
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004224:	e012      	b.n	800424c <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004226:	f7fd fba5 	bl	8001974 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d803      	bhi.n	800423e <HAL_SPI_Receive+0x1e6>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d102      	bne.n	8004244 <HAL_SPI_Receive+0x1ec>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d103      	bne.n	800424c <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800424a:	e0e0      	b.n	800440e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1c7      	bne.n	80041e8 <HAL_SPI_Receive+0x190>
 8004258:	e035      	b.n	80042c6 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d115      	bne.n	8004294 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	b292      	uxth	r2, r2
 8004274:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	1c9a      	adds	r2, r3, #2
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004292:	e012      	b.n	80042ba <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004294:	f7fd fb6e 	bl	8001974 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d803      	bhi.n	80042ac <HAL_SPI_Receive+0x254>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d102      	bne.n	80042b2 <HAL_SPI_Receive+0x25a>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d103      	bne.n	80042ba <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80042b8:	e0a9      	b.n	800440e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1c9      	bne.n	800425a <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ce:	d178      	bne.n	80043c2 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042de:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	2101      	movs	r1, #1
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fb82 	bl	80049f4 <SPI_WaitFlagStateUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80042fc:	e087      	b.n	800440e <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004306:	d907      	bls.n	8004318 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	b292      	uxth	r2, r2
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	e008      	b.n	800432a <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f103 020c 	add.w	r2, r3, #12
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2201      	movs	r2, #1
 8004332:	2101      	movs	r1, #1
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fb5d 	bl	80049f4 <SPI_WaitFlagStateUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004344:	f043 0202 	orr.w	r2, r3, #2
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8004352:	e05c      	b.n	800440e <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800435c:	d105      	bne.n	800436a <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	e02b      	b.n	80043c2 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800437a:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004384:	d11d      	bne.n	80043c2 <HAL_SPI_Receive+0x36a>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	2b02      	cmp	r3, #2
 800438c:	d119      	bne.n	80043c2 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	2101      	movs	r1, #1
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fb2b 	bl	80049f4 <SPI_WaitFlagStateUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d009      	beq.n	80043b8 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a8:	f043 0202 	orr.w	r2, r3, #2
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80043b6:	e02a      	b.n	800440e <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043c2:	6a3a      	ldr	r2, [r7, #32]
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fc32 	bl	8004c30 <SPI_EndRxTransaction>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d10a      	bne.n	80043fc <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ea:	f043 0202 	orr.w	r2, r3, #2
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80043fa:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800440a:	e000      	b.n	800440e <HAL_SPI_Receive+0x3b6>
  }

error :
 800440c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800441e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004422:	4618      	mov	r0, r3
 8004424:	3728      	adds	r7, #40	; 0x28
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b092      	sub	sp, #72	; 0x48
 800442e:	af02      	add	r7, sp, #8
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004440:	2301      	movs	r3, #1
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_SPI_TransmitReceive+0x2e>
 8004454:	2302      	movs	r3, #2
 8004456:	e2c8      	b.n	80049ea <HAL_SPI_TransmitReceive+0x5c0>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004460:	f7fd fa88 	bl	8001974 <HAL_GetTick>
 8004464:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800446c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8004476:	887b      	ldrh	r3, [r7, #2]
 8004478:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800447a:	887b      	ldrh	r3, [r7, #2]
 800447c:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800448e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004492:	2b01      	cmp	r3, #1
 8004494:	d00f      	beq.n	80044b6 <HAL_SPI_TransmitReceive+0x8c>
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449c:	d107      	bne.n	80044ae <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <HAL_SPI_TransmitReceive+0x84>
 80044a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d003      	beq.n	80044b6 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
 80044b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80044b4:	e28f      	b.n	80049d6 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_SPI_TransmitReceive+0x9e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_SPI_TransmitReceive+0x9e>
 80044c2:	887b      	ldrh	r3, [r7, #2]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d103      	bne.n	80044d0 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80044ce:	e282      	b.n	80049d6 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d003      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2205      	movs	r2, #5
 80044e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	887a      	ldrh	r2, [r7, #2]
 80044fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	887a      	ldrh	r2, [r7, #2]
 800450a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004526:	d10f      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004546:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004550:	d802      	bhi.n	8004558 <HAL_SPI_TransmitReceive+0x12e>
 8004552:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004554:	2b01      	cmp	r3, #1
 8004556:	d908      	bls.n	800456a <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	e007      	b.n	800457a <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004578:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d007      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a0:	f240 80a4 	bls.w	80046ec <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_SPI_TransmitReceive+0x18a>
 80045ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	f040 808e 	bne.w	80046d0 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d8:	e07a      	b.n	80046d0 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d13f      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x23e>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d03a      	beq.n	8004668 <HAL_SPI_TransmitReceive+0x23e>
 80045f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d137      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	881a      	ldrh	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	1c9a      	adds	r2, r3, #2
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d11e      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x23e>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004632:	d119      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10c      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x22e>
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004656:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004666:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d11c      	bne.n	80046b0 <HAL_SPI_TransmitReceive+0x286>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	b292      	uxth	r2, r2
 800468e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	1c9a      	adds	r2, r3, #2
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046ac:	2301      	movs	r3, #1
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046b0:	f7fd f960 	bl	8001974 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046bc:	429a      	cmp	r2, r3
 80046be:	d807      	bhi.n	80046d0 <HAL_SPI_TransmitReceive+0x2a6>
 80046c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d003      	beq.n	80046d0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80046ce:	e182      	b.n	80049d6 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f47f af7f 	bne.w	80045da <HAL_SPI_TransmitReceive+0x1b0>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f af78 	bne.w	80045da <HAL_SPI_TransmitReceive+0x1b0>
 80046ea:	e103      	b.n	80048f4 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_SPI_TransmitReceive+0x2d2>
 80046f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	f040 80ef 	bne.w	80048da <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b01      	cmp	r3, #1
 8004704:	d912      	bls.n	800472c <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	881a      	ldrh	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	1c9a      	adds	r2, r3, #2
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b02      	subs	r3, #2
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	87da      	strh	r2, [r3, #62]	; 0x3e
 800472a:	e0d6      	b.n	80048da <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	330c      	adds	r3, #12
 8004736:	7812      	ldrb	r2, [r2, #0]
 8004738:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004752:	e0c2      	b.n	80048da <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b02      	cmp	r3, #2
 8004760:	d158      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x3ea>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d053      	beq.n	8004814 <HAL_SPI_TransmitReceive+0x3ea>
 800476c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d150      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d912      	bls.n	80047a2 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	881a      	ldrh	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b02      	subs	r3, #2
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047a0:	e012      	b.n	80047c8 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	330c      	adds	r3, #12
 80047ac:	7812      	ldrb	r2, [r2, #0]
 80047ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11e      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x3ea>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047de:	d119      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10c      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x3da>
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004802:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004812:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b01      	cmp	r3, #1
 8004820:	d148      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x48a>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d042      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	d923      	bls.n	8004882 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	b292      	uxth	r2, r2
 8004846:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	1c9a      	adds	r2, r3, #2
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b02      	subs	r3, #2
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d81f      	bhi.n	80048b0 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	e016      	b.n	80048b0 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f103 020c 	add.w	r2, r3, #12
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	7812      	ldrb	r2, [r2, #0]
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048b0:	2301      	movs	r3, #1
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048b4:	f7fd f85e 	bl	8001974 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d803      	bhi.n	80048cc <HAL_SPI_TransmitReceive+0x4a2>
 80048c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d102      	bne.n	80048d2 <HAL_SPI_TransmitReceive+0x4a8>
 80048cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80048d8:	e07d      	b.n	80049d6 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f47f af37 	bne.w	8004754 <HAL_SPI_TransmitReceive+0x32a>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f47f af30 	bne.w	8004754 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fc:	d146      	bne.n	800498c <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80048fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004904:	2201      	movs	r2, #1
 8004906:	2101      	movs	r1, #1
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f873 	bl	80049f4 <SPI_WaitFlagStateUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004918:	f043 0202 	orr.w	r2, r3, #2
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8004926:	e056      	b.n	80049d6 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004930:	d105      	bne.n	800493e <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	e026      	b.n	800498c <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800494e:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	2b02      	cmp	r3, #2
 8004956:	d119      	bne.n	800498c <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495e:	2201      	movs	r2, #1
 8004960:	2101      	movs	r1, #1
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f846 	bl	80049f4 <SPI_WaitFlagStateUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004972:	f043 0202 	orr.w	r2, r3, #2
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8004980:	e029      	b.n	80049d6 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800498a:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b10      	cmp	r3, #16
 8004998:	d10d      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499e:	f043 0202 	orr.w	r2, r3, #2
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80049ae:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f990 	bl	8004ce0 <SPI_EndRxTxTransaction>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d006      	beq.n	80049d4 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	661a      	str	r2, [r3, #96]	; 0x60
 80049d2:	e000      	b.n	80049d6 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 80049d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3740      	adds	r7, #64	; 0x40
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a04:	f7fc ffb6 	bl	8001974 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	4413      	add	r3, r2
 8004a12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a14:	f7fc ffae 	bl	8001974 <HAL_GetTick>
 8004a18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a1a:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	015b      	lsls	r3, r3, #5
 8004a20:	0d1b      	lsrs	r3, r3, #20
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2a:	e054      	b.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d050      	beq.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a34:	f7fc ff9e 	bl	8001974 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d902      	bls.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d13d      	bne.n	8004ac6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a62:	d111      	bne.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6c:	d004      	beq.n	8004a78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a76:	d107      	bne.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a90:	d10f      	bne.n	8004ab2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e017      	b.n	8004af6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	bf0c      	ite	eq
 8004ae6:	2301      	moveq	r3, #1
 8004ae8:	2300      	movne	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d19b      	bne.n	8004a2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000004 	.word	0x20000004

08004b04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b16:	f7fc ff2d 	bl	8001974 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	4413      	add	r3, r2
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b26:	f7fc ff25 	bl	8001974 <HAL_GetTick>
 8004b2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b34:	4b3d      	ldr	r3, [pc, #244]	; (8004c2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00da      	lsls	r2, r3, #3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	0d1b      	lsrs	r3, r3, #20
 8004b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b4c:	e060      	b.n	8004c10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b54:	d107      	bne.n	8004b66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d050      	beq.n	8004c10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b6e:	f7fc ff01 	bl	8001974 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d902      	bls.n	8004b84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d13d      	bne.n	8004c00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b9c:	d111      	bne.n	8004bc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba6:	d004      	beq.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb0:	d107      	bne.n	8004bc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bca:	d10f      	bne.n	8004bec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e010      	b.n	8004c22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d196      	bne.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3728      	adds	r7, #40	; 0x28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000004 	.word	0x20000004

08004c30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c44:	d111      	bne.n	8004c6a <SPI_EndRxTransaction+0x3a>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4e:	d004      	beq.n	8004c5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c58:	d107      	bne.n	8004c6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2200      	movs	r2, #0
 8004c72:	2180      	movs	r1, #128	; 0x80
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7ff febd 	bl	80049f4 <SPI_WaitFlagStateUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e023      	b.n	8004cd8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c98:	d11d      	bne.n	8004cd6 <SPI_EndRxTransaction+0xa6>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca2:	d004      	beq.n	8004cae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cac:	d113      	bne.n	8004cd6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff ff22 	bl	8004b04 <SPI_WaitFifoStateUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e000      	b.n	8004cd8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff ff03 	bl	8004b04 <SPI_WaitFifoStateUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	f043 0220 	orr.w	r2, r3, #32
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e027      	b.n	8004d64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2180      	movs	r1, #128	; 0x80
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff fe68 	bl	80049f4 <SPI_WaitFlagStateUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	f043 0220 	orr.w	r2, r3, #32
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e014      	b.n	8004d64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7ff fedc 	bl	8004b04 <SPI_WaitFifoStateUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e000      	b.n	8004d64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e049      	b.n	8004e12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fc fcbc 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 f944 	bl	8005038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d001      	beq.n	8004e34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e02e      	b.n	8004e92 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <HAL_TIM_Base_Start+0x80>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_TIM_Base_Start+0x34>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4e:	d115      	bne.n	8004e7c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_TIM_Base_Start+0x84>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b06      	cmp	r3, #6
 8004e60:	d015      	beq.n	8004e8e <HAL_TIM_Base_Start+0x72>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e68:	d011      	beq.n	8004e8e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	e008      	b.n	8004e8e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e000      	b.n	8004e90 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	00010007 	.word	0x00010007

08004ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e0b6      	b.n	800502e <HAL_TIM_ConfigClockSource+0x18a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efc:	d03e      	beq.n	8004f7c <HAL_TIM_ConfigClockSource+0xd8>
 8004efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f02:	f200 8087 	bhi.w	8005014 <HAL_TIM_ConfigClockSource+0x170>
 8004f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0a:	f000 8086 	beq.w	800501a <HAL_TIM_ConfigClockSource+0x176>
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f12:	d87f      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x170>
 8004f14:	2b70      	cmp	r3, #112	; 0x70
 8004f16:	d01a      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xaa>
 8004f18:	2b70      	cmp	r3, #112	; 0x70
 8004f1a:	d87b      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x170>
 8004f1c:	2b60      	cmp	r3, #96	; 0x60
 8004f1e:	d050      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x11e>
 8004f20:	2b60      	cmp	r3, #96	; 0x60
 8004f22:	d877      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x170>
 8004f24:	2b50      	cmp	r3, #80	; 0x50
 8004f26:	d03c      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0xfe>
 8004f28:	2b50      	cmp	r3, #80	; 0x50
 8004f2a:	d873      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x170>
 8004f2c:	2b40      	cmp	r3, #64	; 0x40
 8004f2e:	d058      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x13e>
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d86f      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x170>
 8004f34:	2b30      	cmp	r3, #48	; 0x30
 8004f36:	d064      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x15e>
 8004f38:	2b30      	cmp	r3, #48	; 0x30
 8004f3a:	d86b      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x170>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d060      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x15e>
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d867      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x170>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d05c      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x15e>
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d05a      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x15e>
 8004f4c:	e062      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f000 f946 	bl	80051ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]
      break;
 8004f7a:	e04f      	b.n	800501c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6899      	ldr	r1, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f000 f92f 	bl	80051ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f9e:	609a      	str	r2, [r3, #8]
      break;
 8004fa0:	e03c      	b.n	800501c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 f8a4 	bl	80050fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2150      	movs	r1, #80	; 0x50
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f8fb 	bl	80051b6 <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e02c      	b.n	800501c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f000 f8c2 	bl	8005158 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2160      	movs	r1, #96	; 0x60
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f8eb 	bl	80051b6 <TIM_ITRx_SetConfig>
      break;
 8004fe0:	e01c      	b.n	800501c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f000 f884 	bl	80050fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2140      	movs	r1, #64	; 0x40
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f8db 	bl	80051b6 <TIM_ITRx_SetConfig>
      break;
 8005000:	e00c      	b.n	800501c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f000 f8d2 	bl	80051b6 <TIM_ITRx_SetConfig>
      break;
 8005012:	e003      	b.n	800501c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
      break;
 8005018:	e000      	b.n	800501c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800501a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800502c:	7bfb      	ldrb	r3, [r7, #15]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <TIM_Base_SetConfig+0xb8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_Base_SetConfig+0x20>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d108      	bne.n	800506a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a20      	ldr	r2, [pc, #128]	; (80050f0 <TIM_Base_SetConfig+0xb8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00b      	beq.n	800508a <TIM_Base_SetConfig+0x52>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005078:	d007      	beq.n	800508a <TIM_Base_SetConfig+0x52>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <TIM_Base_SetConfig+0xbc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <TIM_Base_SetConfig+0x52>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <TIM_Base_SetConfig+0xc0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d108      	bne.n	800509c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a0b      	ldr	r2, [pc, #44]	; (80050f0 <TIM_Base_SetConfig+0xb8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_Base_SetConfig+0xa0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <TIM_Base_SetConfig+0xbc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_Base_SetConfig+0xa0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <TIM_Base_SetConfig+0xc0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d103      	bne.n	80050e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	615a      	str	r2, [r3, #20]
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0201 	bic.w	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 030a 	bic.w	r3, r3, #10
 8005138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	621a      	str	r2, [r3, #32]
}
 800514e:	bf00      	nop
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f023 0210 	bic.w	r2, r3, #16
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005182:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	031b      	lsls	r3, r3, #12
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005194:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	621a      	str	r2, [r3, #32]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80051cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f043 0307 	orr.w	r3, r3, #7
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	609a      	str	r2, [r3, #8]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b087      	sub	sp, #28
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	021a      	lsls	r2, r3, #8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	431a      	orrs	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4313      	orrs	r3, r2
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	609a      	str	r2, [r3, #8]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005240:	2302      	movs	r3, #2
 8005242:	e04a      	b.n	80052da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005274:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a11      	ldr	r2, [pc, #68]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ac:	d10c      	bne.n	80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	40012c00 	.word	0x40012c00

080052e8 <LL_RCC_GetUSARTClockSource>:
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80052f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	401a      	ands	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	041b      	lsls	r3, r3, #16
 8005300:	4313      	orrs	r3, r2
}
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <LL_RCC_GetLPUARTClockSource>:
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4013      	ands	r3, r2
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e042      	b.n	80053c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc f9f2 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2224      	movs	r2, #36	; 0x24
 8005358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f8b3 	bl	80054d8 <UART_SetConfig>
 8005372:	4603      	mov	r3, r0
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e022      	b.n	80053c2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fb1b 	bl	80059c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005398:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fba1 	bl	8005b02 <UART_CheckIdleState>
 80053c0:	4603      	mov	r3, r0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b08a      	sub	sp, #40	; 0x28
 80053ce:	af02      	add	r7, sp, #8
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	603b      	str	r3, [r7, #0]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d173      	bne.n	80054cc <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_UART_Transmit+0x26>
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e06c      	b.n	80054ce <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2221      	movs	r2, #33	; 0x21
 8005400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005404:	f7fc fab6 	bl	8001974 <HAL_GetTick>
 8005408:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	88fa      	ldrh	r2, [r7, #6]
 800540e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	88fa      	ldrh	r2, [r7, #6]
 8005416:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	d108      	bne.n	8005436 <HAL_UART_Transmit+0x6c>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	e003      	b.n	800543e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800543e:	e02c      	b.n	800549a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2200      	movs	r2, #0
 8005448:	2180      	movs	r1, #128	; 0x80
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fba7 	bl	8005b9e <UART_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e039      	b.n	80054ce <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10b      	bne.n	8005478 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800546e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	3302      	adds	r3, #2
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e007      	b.n	8005488 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	781a      	ldrb	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	3301      	adds	r3, #1
 8005486:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1cc      	bne.n	8005440 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2200      	movs	r2, #0
 80054ae:	2140      	movs	r1, #64	; 0x40
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fb74 	bl	8005b9e <UART_WaitOnFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e006      	b.n	80054ce <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e000      	b.n	80054ce <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80054cc:	2302      	movs	r3, #2
  }
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054dc:	b08c      	sub	sp, #48	; 0x30
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b94      	ldr	r3, [pc, #592]	; (8005758 <UART_SetConfig+0x280>)
 8005508:	4013      	ands	r3, r2
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005510:	430b      	orrs	r3, r1
 8005512:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a89      	ldr	r2, [pc, #548]	; (800575c <UART_SetConfig+0x284>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005540:	4313      	orrs	r3, r2
 8005542:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800554e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005558:	430b      	orrs	r3, r1
 800555a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	f023 010f 	bic.w	r1, r3, #15
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a7a      	ldr	r2, [pc, #488]	; (8005760 <UART_SetConfig+0x288>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d127      	bne.n	80055cc <UART_SetConfig+0xf4>
 800557c:	2003      	movs	r0, #3
 800557e:	f7ff feb3 	bl	80052e8 <LL_RCC_GetUSARTClockSource>
 8005582:	4603      	mov	r3, r0
 8005584:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005588:	2b03      	cmp	r3, #3
 800558a:	d81b      	bhi.n	80055c4 <UART_SetConfig+0xec>
 800558c:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <UART_SetConfig+0xbc>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055a5 	.word	0x080055a5
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055ad 	.word	0x080055ad
 80055a0:	080055bd 	.word	0x080055bd
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055aa:	e080      	b.n	80056ae <UART_SetConfig+0x1d6>
 80055ac:	2302      	movs	r3, #2
 80055ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b2:	e07c      	b.n	80056ae <UART_SetConfig+0x1d6>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ba:	e078      	b.n	80056ae <UART_SetConfig+0x1d6>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c2:	e074      	b.n	80056ae <UART_SetConfig+0x1d6>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ca:	e070      	b.n	80056ae <UART_SetConfig+0x1d6>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a64      	ldr	r2, [pc, #400]	; (8005764 <UART_SetConfig+0x28c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d138      	bne.n	8005648 <UART_SetConfig+0x170>
 80055d6:	200c      	movs	r0, #12
 80055d8:	f7ff fe86 	bl	80052e8 <LL_RCC_GetUSARTClockSource>
 80055dc:	4603      	mov	r3, r0
 80055de:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80055e2:	2b0c      	cmp	r3, #12
 80055e4:	d82c      	bhi.n	8005640 <UART_SetConfig+0x168>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0x114>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005621 	.word	0x08005621
 80055f0:	08005641 	.word	0x08005641
 80055f4:	08005641 	.word	0x08005641
 80055f8:	08005641 	.word	0x08005641
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005641 	.word	0x08005641
 8005604:	08005641 	.word	0x08005641
 8005608:	08005641 	.word	0x08005641
 800560c:	08005629 	.word	0x08005629
 8005610:	08005641 	.word	0x08005641
 8005614:	08005641 	.word	0x08005641
 8005618:	08005641 	.word	0x08005641
 800561c:	08005639 	.word	0x08005639
 8005620:	2300      	movs	r3, #0
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005626:	e042      	b.n	80056ae <UART_SetConfig+0x1d6>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562e:	e03e      	b.n	80056ae <UART_SetConfig+0x1d6>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e03a      	b.n	80056ae <UART_SetConfig+0x1d6>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e036      	b.n	80056ae <UART_SetConfig+0x1d6>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e032      	b.n	80056ae <UART_SetConfig+0x1d6>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a43      	ldr	r2, [pc, #268]	; (800575c <UART_SetConfig+0x284>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d12a      	bne.n	80056a8 <UART_SetConfig+0x1d0>
 8005652:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005656:	f7ff fe59 	bl	800530c <LL_RCC_GetLPUARTClockSource>
 800565a:	4603      	mov	r3, r0
 800565c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005660:	d01a      	beq.n	8005698 <UART_SetConfig+0x1c0>
 8005662:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005666:	d81b      	bhi.n	80056a0 <UART_SetConfig+0x1c8>
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d00c      	beq.n	8005688 <UART_SetConfig+0x1b0>
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005672:	d815      	bhi.n	80056a0 <UART_SetConfig+0x1c8>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <UART_SetConfig+0x1a8>
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567c:	d008      	beq.n	8005690 <UART_SetConfig+0x1b8>
 800567e:	e00f      	b.n	80056a0 <UART_SetConfig+0x1c8>
 8005680:	2300      	movs	r3, #0
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005686:	e012      	b.n	80056ae <UART_SetConfig+0x1d6>
 8005688:	2302      	movs	r3, #2
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568e:	e00e      	b.n	80056ae <UART_SetConfig+0x1d6>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005696:	e00a      	b.n	80056ae <UART_SetConfig+0x1d6>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569e:	e006      	b.n	80056ae <UART_SetConfig+0x1d6>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a6:	e002      	b.n	80056ae <UART_SetConfig+0x1d6>
 80056a8:	2310      	movs	r3, #16
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a2a      	ldr	r2, [pc, #168]	; (800575c <UART_SetConfig+0x284>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	f040 80a4 	bne.w	8005802 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d823      	bhi.n	800570a <UART_SetConfig+0x232>
 80056c2:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <UART_SetConfig+0x1f0>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	0800570b 	.word	0x0800570b
 80056d0:	080056f5 	.word	0x080056f5
 80056d4:	0800570b 	.word	0x0800570b
 80056d8:	080056fb 	.word	0x080056fb
 80056dc:	0800570b 	.word	0x0800570b
 80056e0:	0800570b 	.word	0x0800570b
 80056e4:	0800570b 	.word	0x0800570b
 80056e8:	08005703 	.word	0x08005703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ec:	f7fd ff6c 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 80056f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056f2:	e010      	b.n	8005716 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f4:	4b1c      	ldr	r3, [pc, #112]	; (8005768 <UART_SetConfig+0x290>)
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056f8:	e00d      	b.n	8005716 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fa:	f7fd feb1 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 80056fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005700:	e009      	b.n	8005716 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005708:	e005      	b.n	8005716 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005714:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8137 	beq.w	800598c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	4a12      	ldr	r2, [pc, #72]	; (800576c <UART_SetConfig+0x294>)
 8005724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005728:	461a      	mov	r2, r3
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005730:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	429a      	cmp	r2, r3
 8005740:	d305      	bcc.n	800574e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	429a      	cmp	r2, r3
 800574c:	d910      	bls.n	8005770 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005754:	e11a      	b.n	800598c <UART_SetConfig+0x4b4>
 8005756:	bf00      	nop
 8005758:	cfff69f3 	.word	0xcfff69f3
 800575c:	40008000 	.word	0x40008000
 8005760:	40013800 	.word	0x40013800
 8005764:	40004400 	.word	0x40004400
 8005768:	00f42400 	.word	0x00f42400
 800576c:	08006c9c 	.word	0x08006c9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	2200      	movs	r2, #0
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	60fa      	str	r2, [r7, #12]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	4a8e      	ldr	r2, [pc, #568]	; (80059b8 <UART_SetConfig+0x4e0>)
 800577e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005782:	b29b      	uxth	r3, r3
 8005784:	2200      	movs	r2, #0
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800578e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005792:	f7fa fcf1 	bl	8000178 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4610      	mov	r0, r2
 800579c:	4619      	mov	r1, r3
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	020b      	lsls	r3, r1, #8
 80057a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057ac:	0202      	lsls	r2, r0, #8
 80057ae:	6979      	ldr	r1, [r7, #20]
 80057b0:	6849      	ldr	r1, [r1, #4]
 80057b2:	0849      	lsrs	r1, r1, #1
 80057b4:	2000      	movs	r0, #0
 80057b6:	460c      	mov	r4, r1
 80057b8:	4605      	mov	r5, r0
 80057ba:	eb12 0804 	adds.w	r8, r2, r4
 80057be:	eb43 0905 	adc.w	r9, r3, r5
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	469a      	mov	sl, r3
 80057ca:	4693      	mov	fp, r2
 80057cc:	4652      	mov	r2, sl
 80057ce:	465b      	mov	r3, fp
 80057d0:	4640      	mov	r0, r8
 80057d2:	4649      	mov	r1, r9
 80057d4:	f7fa fcd0 	bl	8000178 <__aeabi_uldivmod>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4613      	mov	r3, r2
 80057de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057e6:	d308      	bcc.n	80057fa <UART_SetConfig+0x322>
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ee:	d204      	bcs.n	80057fa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a3a      	ldr	r2, [r7, #32]
 80057f6:	60da      	str	r2, [r3, #12]
 80057f8:	e0c8      	b.n	800598c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005800:	e0c4      	b.n	800598c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800580a:	d167      	bne.n	80058dc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800580c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005810:	2b08      	cmp	r3, #8
 8005812:	d828      	bhi.n	8005866 <UART_SetConfig+0x38e>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <UART_SetConfig+0x344>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	08005841 	.word	0x08005841
 8005820:	08005849 	.word	0x08005849
 8005824:	08005851 	.word	0x08005851
 8005828:	08005867 	.word	0x08005867
 800582c:	08005857 	.word	0x08005857
 8005830:	08005867 	.word	0x08005867
 8005834:	08005867 	.word	0x08005867
 8005838:	08005867 	.word	0x08005867
 800583c:	0800585f 	.word	0x0800585f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005840:	f7fd fec2 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8005844:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005846:	e014      	b.n	8005872 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005848:	f7fd fed0 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 800584c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800584e:	e010      	b.n	8005872 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005850:	4b5a      	ldr	r3, [pc, #360]	; (80059bc <UART_SetConfig+0x4e4>)
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005854:	e00d      	b.n	8005872 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005856:	f7fd fe03 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800585c:	e009      	b.n	8005872 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800585e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005864:	e005      	b.n	8005872 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005870:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8089 	beq.w	800598c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	4a4e      	ldr	r2, [pc, #312]	; (80059b8 <UART_SetConfig+0x4e0>)
 8005880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005884:	461a      	mov	r2, r3
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	fbb3 f3f2 	udiv	r3, r3, r2
 800588c:	005a      	lsls	r2, r3, #1
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	441a      	add	r2, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	fbb2 f3f3 	udiv	r3, r2, r3
 800589e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	2b0f      	cmp	r3, #15
 80058a4:	d916      	bls.n	80058d4 <UART_SetConfig+0x3fc>
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ac:	d212      	bcs.n	80058d4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f023 030f 	bic.w	r3, r3, #15
 80058b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	085b      	lsrs	r3, r3, #1
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	8bfb      	ldrh	r3, [r7, #30]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	8bfa      	ldrh	r2, [r7, #30]
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	e05b      	b.n	800598c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058da:	e057      	b.n	800598c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d828      	bhi.n	8005936 <UART_SetConfig+0x45e>
 80058e4:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <UART_SetConfig+0x414>)
 80058e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ea:	bf00      	nop
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005919 	.word	0x08005919
 80058f4:	08005921 	.word	0x08005921
 80058f8:	08005937 	.word	0x08005937
 80058fc:	08005927 	.word	0x08005927
 8005900:	08005937 	.word	0x08005937
 8005904:	08005937 	.word	0x08005937
 8005908:	08005937 	.word	0x08005937
 800590c:	0800592f 	.word	0x0800592f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005910:	f7fd fe5a 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8005914:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005916:	e014      	b.n	8005942 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005918:	f7fd fe68 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 800591c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800591e:	e010      	b.n	8005942 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005920:	4b26      	ldr	r3, [pc, #152]	; (80059bc <UART_SetConfig+0x4e4>)
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005924:	e00d      	b.n	8005942 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005926:	f7fd fd9b 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800592a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800592c:	e009      	b.n	8005942 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005934:	e005      	b.n	8005942 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005940:	bf00      	nop
    }

    if (pclk != 0U)
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	2b00      	cmp	r3, #0
 8005946:	d021      	beq.n	800598c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	4a1a      	ldr	r2, [pc, #104]	; (80059b8 <UART_SetConfig+0x4e0>)
 800594e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005952:	461a      	mov	r2, r3
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	fbb3 f2f2 	udiv	r2, r3, r2
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	441a      	add	r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	fbb2 f3f3 	udiv	r3, r2, r3
 800596a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	2b0f      	cmp	r3, #15
 8005970:	d909      	bls.n	8005986 <UART_SetConfig+0x4ae>
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005978:	d205      	bcs.n	8005986 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	b29a      	uxth	r2, r3
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60da      	str	r2, [r3, #12]
 8005984:	e002      	b.n	800598c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2201      	movs	r2, #1
 8005990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2201      	movs	r2, #1
 8005998:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2200      	movs	r2, #0
 80059a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3730      	adds	r7, #48	; 0x30
 80059b0:	46bd      	mov	sp, r7
 80059b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059b6:	bf00      	nop
 80059b8:	08006c9c 	.word	0x08006c9c
 80059bc:	00f42400 	.word	0x00f42400

080059c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005abe:	d10a      	bne.n	8005ad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
  }
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr

08005b02 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	af02      	add	r7, sp, #8
 8005b08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b12:	f7fb ff2f 	bl	8001974 <HAL_GetTick>
 8005b16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d10e      	bne.n	8005b44 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f832 	bl	8005b9e <UART_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e028      	b.n	8005b96 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d10e      	bne.n	8005b70 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f81c 	bl	8005b9e <UART_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e012      	b.n	8005b96 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b09c      	sub	sp, #112	; 0x70
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	4613      	mov	r3, r2
 8005bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bae:	e0a9      	b.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	f000 80a5 	beq.w	8005d04 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bba:	f7fb fedb 	bl	8001974 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d302      	bcc.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d140      	bne.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005be4:	667b      	str	r3, [r7, #100]	; 0x64
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bf0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e6      	bne.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c22:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e5      	bne.n	8005c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e069      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d051      	beq.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c6e:	d149      	bne.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e6      	bne.n	8005c7a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	613b      	str	r3, [r7, #16]
   return(result);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f023 0301 	bic.w	r3, r3, #1
 8005cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ccc:	623a      	str	r2, [r7, #32]
 8005cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	69f9      	ldr	r1, [r7, #28]
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e5      	bne.n	8005cac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e010      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69da      	ldr	r2, [r3, #28]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	f43f af46 	beq.w	8005bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3770      	adds	r7, #112	; 0x70
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e027      	b.n	8005d94 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2224      	movs	r2, #36	; 0x24
 8005d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr

08005d9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e02d      	b.n	8005e12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2224      	movs	r2, #36	; 0x24
 8005dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0201 	bic.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f850 	bl	8005e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e02d      	b.n	8005e8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2224      	movs	r2, #36	; 0x24
 8005e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f812 	bl	8005e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d108      	bne.n	8005eba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005eb8:	e031      	b.n	8005f1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005eba:	2308      	movs	r3, #8
 8005ebc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	0e5b      	lsrs	r3, r3, #25
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	0f5b      	lsrs	r3, r3, #29
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	7b3a      	ldrb	r2, [r7, #12]
 8005ee6:	4910      	ldr	r1, [pc, #64]	; (8005f28 <UARTEx_SetNbDataToProcess+0x90>)
 8005ee8:	5c8a      	ldrb	r2, [r1, r2]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005eee:	7b3a      	ldrb	r2, [r7, #12]
 8005ef0:	490e      	ldr	r1, [pc, #56]	; (8005f2c <UARTEx_SetNbDataToProcess+0x94>)
 8005ef2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ef4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	7b7a      	ldrb	r2, [r7, #13]
 8005f04:	4908      	ldr	r1, [pc, #32]	; (8005f28 <UARTEx_SetNbDataToProcess+0x90>)
 8005f06:	5c8a      	ldrb	r2, [r1, r2]
 8005f08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f0c:	7b7a      	ldrb	r2, [r7, #13]
 8005f0e:	4907      	ldr	r1, [pc, #28]	; (8005f2c <UARTEx_SetNbDataToProcess+0x94>)
 8005f10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f12:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f1e:	bf00      	nop
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr
 8005f28:	08006cb4 	.word	0x08006cb4
 8005f2c:	08006cbc 	.word	0x08006cbc

08005f30 <__libc_init_array>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	4d0d      	ldr	r5, [pc, #52]	; (8005f68 <__libc_init_array+0x38>)
 8005f34:	4c0d      	ldr	r4, [pc, #52]	; (8005f6c <__libc_init_array+0x3c>)
 8005f36:	1b64      	subs	r4, r4, r5
 8005f38:	10a4      	asrs	r4, r4, #2
 8005f3a:	2600      	movs	r6, #0
 8005f3c:	42a6      	cmp	r6, r4
 8005f3e:	d109      	bne.n	8005f54 <__libc_init_array+0x24>
 8005f40:	4d0b      	ldr	r5, [pc, #44]	; (8005f70 <__libc_init_array+0x40>)
 8005f42:	4c0c      	ldr	r4, [pc, #48]	; (8005f74 <__libc_init_array+0x44>)
 8005f44:	f000 f820 	bl	8005f88 <_init>
 8005f48:	1b64      	subs	r4, r4, r5
 8005f4a:	10a4      	asrs	r4, r4, #2
 8005f4c:	2600      	movs	r6, #0
 8005f4e:	42a6      	cmp	r6, r4
 8005f50:	d105      	bne.n	8005f5e <__libc_init_array+0x2e>
 8005f52:	bd70      	pop	{r4, r5, r6, pc}
 8005f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f58:	4798      	blx	r3
 8005f5a:	3601      	adds	r6, #1
 8005f5c:	e7ee      	b.n	8005f3c <__libc_init_array+0xc>
 8005f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f62:	4798      	blx	r3
 8005f64:	3601      	adds	r6, #1
 8005f66:	e7f2      	b.n	8005f4e <__libc_init_array+0x1e>
 8005f68:	08006ccc 	.word	0x08006ccc
 8005f6c:	08006ccc 	.word	0x08006ccc
 8005f70:	08006ccc 	.word	0x08006ccc
 8005f74:	08006cd0 	.word	0x08006cd0

08005f78 <memset>:
 8005f78:	4402      	add	r2, r0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d100      	bne.n	8005f82 <memset+0xa>
 8005f80:	4770      	bx	lr
 8005f82:	f803 1b01 	strb.w	r1, [r3], #1
 8005f86:	e7f9      	b.n	8005f7c <memset+0x4>

08005f88 <_init>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr

08005f94 <_fini>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	bf00      	nop
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr
