
ArduCam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003540  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003744  08003744  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003744  08003744  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003744  08003744  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800374c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  08003758  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08003758  00020204  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114c7  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002834  00000000  00000000  000314fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  00035100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027a5  00000000  00000000  000363b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013193  00000000  00000000  00038b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af596  00000000  00000000  0004bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb27e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d0  00000000  00000000  000fb2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08003660 	.word	0x08003660

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08003660 	.word	0x08003660

08000178 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4313      	orrs	r3, r2
 80001be:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4013      	ands	r3, r2
 80001ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001cc:	68fb      	ldr	r3, [r7, #12]
}
 80001ce:	bf00      	nop
 80001d0:	3714      	adds	r7, #20
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint8_t vid, pid, temp;
uint8_t Camera_WorkMode = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	71fb      	strb	r3, [r7, #7]
uint8_t start_shoot = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	71bb      	strb	r3, [r7, #6]
uint8_t stop = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fb4f 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f80b 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 f939 	bl	8000468 <MX_GPIO_Init>
  MX_DMA_Init();
 80001f6:	f000 f91d 	bl	8000434 <MX_DMA_Init>
  MX_USART1_Init();
 80001fa:	f000 f8cf 	bl	800039c <MX_USART1_Init>
  MX_I2C3_Init();
 80001fe:	f000 f855 	bl	80002ac <MX_I2C3_Init>
  MX_SPI1_Init();
 8000202:	f000 f891 	bl	8000328 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000206:	e7fe      	b.n	8000206 <main+0x2e>

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b09a      	sub	sp, #104	; 0x68
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0320 	add.w	r3, r7, #32
 8000212:	2248      	movs	r2, #72	; 0x48
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fa1a 	bl	8003650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]
 800022a:	615a      	str	r2, [r3, #20]
 800022c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800022e:	4b1e      	ldr	r3, [pc, #120]	; (80002a8 <SystemClock_Config+0xa0>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000236:	4a1c      	ldr	r2, [pc, #112]	; (80002a8 <SystemClock_Config+0xa0>)
 8000238:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800023c:	6013      	str	r3, [r2, #0]
 800023e:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <SystemClock_Config+0xa0>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000246:	603b      	str	r3, [r7, #0]
 8000248:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800024a:	2320      	movs	r3, #32
 800024c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000252:	2300      	movs	r3, #0
 8000254:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000256:	2360      	movs	r3, #96	; 0x60
 8000258:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0320 	add.w	r3, r7, #32
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fc0c 	bl	8001a80 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800026e:	f000 f923 	bl	80004b8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000272:	234f      	movs	r3, #79	; 0x4f
 8000274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 ff78 	bl	8002184 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800029a:	f000 f90d 	bl	80004b8 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3768      	adds	r7, #104	; 0x68
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	58000400 	.word	0x58000400

080002ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <MX_I2C3_Init+0x74>)
 80002b2:	4a1c      	ldr	r2, [pc, #112]	; (8000324 <MX_I2C3_Init+0x78>)
 80002b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <MX_I2C3_Init+0x74>)
 80002b8:	f640 6214 	movw	r2, #3604	; 0xe14
 80002bc:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80002be:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_I2C3_Init+0x74>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <MX_I2C3_Init+0x74>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ca:	4b15      	ldr	r3, [pc, #84]	; (8000320 <MX_I2C3_Init+0x74>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <MX_I2C3_Init+0x74>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_I2C3_Init+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <MX_I2C3_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_I2C3_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <MX_I2C3_Init+0x74>)
 80002ea:	f000 ffd2 	bl	8001292 <HAL_I2C_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80002f4:	f000 f8e0 	bl	80004b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002f8:	2100      	movs	r1, #0
 80002fa:	4809      	ldr	r0, [pc, #36]	; (8000320 <MX_I2C3_Init+0x74>)
 80002fc:	f001 f858 	bl	80013b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000306:	f000 f8d7 	bl	80004b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800030a:	2100      	movs	r1, #0
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <MX_I2C3_Init+0x74>)
 800030e:	f001 f899 	bl	8001444 <HAL_I2CEx_ConfigDigitalFilter>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000318:	f000 f8ce 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000028 	.word	0x20000028
 8000324:	40005c00 	.word	0x40005c00

08000328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <MX_SPI1_Init+0x6c>)
 800032e:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <MX_SPI1_Init+0x70>)
 8000330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_SPI1_Init+0x6c>)
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <MX_SPI1_Init+0x6c>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_SPI1_Init+0x6c>)
 8000340:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000344:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000346:	4b13      	ldr	r3, [pc, #76]	; (8000394 <MX_SPI1_Init+0x6c>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_SPI1_Init+0x6c>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <MX_SPI1_Init+0x6c>)
 8000354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000358:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_SPI1_Init+0x6c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_SPI1_Init+0x6c>)
 8000362:	2200      	movs	r2, #0
 8000364:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <MX_SPI1_Init+0x6c>)
 8000368:	2200      	movs	r2, #0
 800036a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_SPI1_Init+0x6c>)
 800036e:	2207      	movs	r2, #7
 8000370:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <MX_SPI1_Init+0x6c>)
 8000374:	2200      	movs	r2, #0
 8000376:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_SPI1_Init+0x6c>)
 800037a:	2200      	movs	r2, #0
 800037c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_SPI1_Init+0x6c>)
 8000380:	f002 fbda 	bl	8002b38 <HAL_SPI_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800038a:	f000 f895 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000007c 	.word	0x2000007c
 8000398:	40013000 	.word	0x40013000

0800039c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80003a0:	4b22      	ldr	r3, [pc, #136]	; (800042c <MX_USART1_Init+0x90>)
 80003a2:	4a23      	ldr	r2, [pc, #140]	; (8000430 <MX_USART1_Init+0x94>)
 80003a4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80003a6:	4b21      	ldr	r3, [pc, #132]	; (800042c <MX_USART1_Init+0x90>)
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80003ae:	4b1f      	ldr	r3, [pc, #124]	; (800042c <MX_USART1_Init+0x90>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <MX_USART1_Init+0x90>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80003ba:	4b1c      	ldr	r3, [pc, #112]	; (800042c <MX_USART1_Init+0x90>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80003c0:	4b1a      	ldr	r3, [pc, #104]	; (800042c <MX_USART1_Init+0x90>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80003c6:	4b19      	ldr	r3, [pc, #100]	; (800042c <MX_USART1_Init+0x90>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80003cc:	4b17      	ldr	r3, [pc, #92]	; (800042c <MX_USART1_Init+0x90>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80003d2:	4b16      	ldr	r3, [pc, #88]	; (800042c <MX_USART1_Init+0x90>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_USART1_Init+0x90>)
 80003da:	2200      	movs	r2, #0
 80003dc:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <MX_USART1_Init+0x90>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80003e4:	4811      	ldr	r0, [pc, #68]	; (800042c <MX_USART1_Init+0x90>)
 80003e6:	f002 fc8d 	bl	8002d04 <HAL_USART_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80003f0:	f000 f862 	bl	80004b8 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80003f4:	2100      	movs	r1, #0
 80003f6:	480d      	ldr	r0, [pc, #52]	; (800042c <MX_USART1_Init+0x90>)
 80003f8:	f003 f841 	bl	800347e <HAL_USARTEx_SetTxFifoThreshold>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8000402:	f000 f859 	bl	80004b8 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000406:	2100      	movs	r1, #0
 8000408:	4808      	ldr	r0, [pc, #32]	; (800042c <MX_USART1_Init+0x90>)
 800040a:	f003 f876 	bl	80034fa <HAL_USARTEx_SetRxFifoThreshold>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8000414:	f000 f850 	bl	80004b8 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_USART1_Init+0x90>)
 800041a:	f002 fff8 	bl	800340e <HAL_USARTEx_DisableFifoMode>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8000424:	f000 f848 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200001a0 	.word	0x200001a0
 8000430:	40013800 	.word	0x40013800

08000434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000438:	2004      	movs	r0, #4
 800043a:	f7ff fe9d 	bl	8000178 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800043e:	2001      	movs	r0, #1
 8000440:	f7ff fe9a 	bl	8000178 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	200b      	movs	r0, #11
 800044a:	f000 fb6c 	bl	8000b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800044e:	200b      	movs	r0, #11
 8000450:	f000 fb83 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2100      	movs	r1, #0
 8000458:	200c      	movs	r0, #12
 800045a:	f000 fb64 	bl	8000b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800045e:	200c      	movs	r0, #12
 8000460:	f000 fb7b 	bl	8000b5a <HAL_NVIC_EnableIRQ>

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047c:	2002      	movs	r0, #2
 800047e:	f7ff fe93 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	2001      	movs	r0, #1
 8000484:	f7ff fe90 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2110      	movs	r1, #16
 800048c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000490:	f000 fee8 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000494:	2310      	movs	r3, #16
 8000496:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ac:	f000 fd7a 	bl	8000fa4 <HAL_GPIO_Init>

}
 80004b0:	bf00      	nop
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <Error_Handler+0x8>

080004c2 <LL_AHB2_GRP1_EnableClock>:
{
 80004c2:	b480      	push	{r7}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4013      	ands	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4313      	orrs	r3, r2
 8000508:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800050a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800050e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000522:	b480      	push	{r7}
 8000524:	b085      	sub	sp, #20
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800052a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4313      	orrs	r3, r2
 8000538:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800053a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4013      	ands	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000546:	68fb      	ldr	r3, [r7, #12]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
	...

08000560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b096      	sub	sp, #88	; 0x58
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2238      	movs	r2, #56	; 0x38
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f003 f865 	bl	8003650 <memset>
  if(hi2c->Instance==I2C3)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <HAL_I2C_MspInit+0x88>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d127      	bne.n	80005e0 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000594:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000596:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 f9af 	bl	8002904 <HAL_RCCEx_PeriphCLKConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80005ac:	f7ff ff84 	bl	80004b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b0:	2002      	movs	r0, #2
 80005b2:	f7ff ff86 	bl	80004c2 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB11     ------> I2C3_SDA
    PB10     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80005b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005bc:	2312      	movs	r3, #18
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80005c8:	2304      	movs	r3, #4
 80005ca:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005d0:	4619      	mov	r1, r3
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <HAL_I2C_MspInit+0x8c>)
 80005d4:	f000 fce6 	bl	8000fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80005d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80005dc:	f7ff ff89 	bl	80004f2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80005e0:	bf00      	nop
 80005e2:	3758      	adds	r7, #88	; 0x58
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40005c00 	.word	0x40005c00
 80005ec:	48000400 	.word	0x48000400

080005f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a41      	ldr	r2, [pc, #260]	; (8000714 <HAL_SPI_MspInit+0x124>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d17b      	bne.n	800070a <HAL_SPI_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000612:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000616:	f7ff ff84 	bl	8000522 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff ff51 	bl	80004c2 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5;
 8000620:	23e0      	movs	r3, #224	; 0xe0
 8000622:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000630:	2305      	movs	r3, #5
 8000632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4619      	mov	r1, r3
 800063a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063e:	f000 fcb1 	bl	8000fa4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8000642:	4b35      	ldr	r3, [pc, #212]	; (8000718 <HAL_SPI_MspInit+0x128>)
 8000644:	4a35      	ldr	r2, [pc, #212]	; (800071c <HAL_SPI_MspInit+0x12c>)
 8000646:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000648:	4b33      	ldr	r3, [pc, #204]	; (8000718 <HAL_SPI_MspInit+0x128>)
 800064a:	2207      	movs	r2, #7
 800064c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800064e:	4b32      	ldr	r3, [pc, #200]	; (8000718 <HAL_SPI_MspInit+0x128>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <HAL_SPI_MspInit+0x128>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <HAL_SPI_MspInit+0x128>)
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <HAL_SPI_MspInit+0x128>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000666:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <HAL_SPI_MspInit+0x128>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <HAL_SPI_MspInit+0x128>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <HAL_SPI_MspInit+0x128>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000678:	4827      	ldr	r0, [pc, #156]	; (8000718 <HAL_SPI_MspInit+0x128>)
 800067a:	f000 fa89 	bl	8000b90 <HAL_DMA_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <HAL_SPI_MspInit+0x98>
    {
      Error_Handler();
 8000684:	f7ff ff18 	bl	80004b8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000688:	2110      	movs	r1, #16
 800068a:	4823      	ldr	r0, [pc, #140]	; (8000718 <HAL_SPI_MspInit+0x128>)
 800068c:	f000 fbee 	bl	8000e6c <HAL_DMA_ConfigChannelAttributes>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000696:	f7ff ff0f 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <HAL_SPI_MspInit+0x128>)
 800069e:	659a      	str	r2, [r3, #88]	; 0x58
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <HAL_SPI_MspInit+0x128>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006a8:	4a1e      	ldr	r2, [pc, #120]	; (8000724 <HAL_SPI_MspInit+0x134>)
 80006aa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006ae:	2208      	movs	r2, #8
 80006b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006b4:	2210      	movs	r2, #16
 80006b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80006dc:	4810      	ldr	r0, [pc, #64]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006de:	f000 fa57 	bl	8000b90 <HAL_DMA_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 80006e8:	f7ff fee6 	bl	80004b8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80006ec:	2110      	movs	r1, #16
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <HAL_SPI_MspInit+0x130>)
 80006f0:	f000 fbbc 	bl	8000e6c <HAL_DMA_ConfigChannelAttributes>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80006fa:	f7ff fedd 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_SPI_MspInit+0x130>)
 8000702:	655a      	str	r2, [r3, #84]	; 0x54
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_SPI_MspInit+0x130>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800070a:	bf00      	nop
 800070c:	3720      	adds	r7, #32
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40013000 	.word	0x40013000
 8000718:	200000e0 	.word	0x200000e0
 800071c:	40020008 	.word	0x40020008
 8000720:	20000140 	.word	0x20000140
 8000724:	4002001c 	.word	0x4002001c

08000728 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b096      	sub	sp, #88	; 0x58
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2238      	movs	r2, #56	; 0x38
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f002 ff81 	bl	8003650 <memset>
  if(husart->Instance==USART1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a16      	ldr	r2, [pc, #88]	; (80007ac <HAL_USART_MspInit+0x84>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d125      	bne.n	80007a4 <HAL_USART_MspInit+0x7c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000758:	2301      	movs	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800075c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000760:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4618      	mov	r0, r3
 8000768:	f002 f8cc 	bl	8002904 <HAL_RCCEx_PeriphCLKConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8000772:	f7ff fea1 	bl	80004b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000776:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800077a:	f7ff fed2 	bl	8000522 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2002      	movs	r0, #2
 8000780:	f7ff fe9f 	bl	80004c2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_6;
 8000784:	23e0      	movs	r3, #224	; 0xe0
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000794:	2307      	movs	r3, #7
 8000796:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800079c:	4619      	mov	r1, r3
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <HAL_USART_MspInit+0x88>)
 80007a0:	f000 fc00 	bl	8000fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007a4:	bf00      	nop
 80007a6:	3758      	adds	r7, #88	; 0x58
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40013800 	.word	0x40013800
 80007b0:	48000400 	.word	0x48000400

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 f8a1 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <DMA1_Channel1_IRQHandler+0x10>)
 800080a:	f000 fa69 	bl	8000ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000e0 	.word	0x200000e0

08000818 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <DMA1_Channel2_IRQHandler+0x10>)
 800081e:	f000 fa5f 	bl	8000ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000140 	.word	0x20000140

0800082c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800083a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800083c:	f7ff fff6 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <LoopForever+0x6>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LoopForever+0xe>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <LoopForever+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000866:	f002 fecf 	bl	8003608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fcb5 	bl	80001d8 <main>

0800086e <LoopForever>:

LoopForever:
    b LoopForever
 800086e:	e7fe      	b.n	800086e <LoopForever>
  ldr   r0, =_estack
 8000870:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800087c:	0800374c 	.word	0x0800374c
  ldr r2, =_sbss
 8000880:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000884:	20000204 	.word	0x20000204

08000888 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000892:	2300      	movs	r3, #0
 8000894:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000896:	2003      	movs	r0, #3
 8000898:	f000 f93a 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800089c:	f001 fe54 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <HAL_Init+0x3c>)
 80008a4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 f810 	bl	80008cc <HAL_InitTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	e001      	b.n	80008bc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b8:	f7ff fe4b 	bl	8000552 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000000 	.word	0x20000000

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <HAL_InitTick+0x6c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d024      	beq.n	800092a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008e0:	f001 fe32 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80008e4:	4602      	mov	r2, r0
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_InitTick+0x6c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4619      	mov	r1, r3
 80008ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f93c 	bl	8000b76 <HAL_SYSTICK_Config>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10f      	bne.n	8000924 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b0f      	cmp	r3, #15
 8000908:	d809      	bhi.n	800091e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090a:	2200      	movs	r2, #0
 800090c:	6879      	ldr	r1, [r7, #4]
 800090e:	f04f 30ff 	mov.w	r0, #4294967295
 8000912:	f000 f908 	bl	8000b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <HAL_InitTick+0x70>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	e007      	b.n	800092e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	e004      	b.n	800092e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	e001      	b.n	800092e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x1c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x20>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a03      	ldr	r2, [pc, #12]	; (8000960 <HAL_IncTick+0x20>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	20000008 	.word	0x20000008
 8000960:	20000200 	.word	0x20000200

08000964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <HAL_GetTick+0x10>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000200 	.word	0x20000200

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4906      	ldr	r1, [pc, #24]	; (8000a10 <__NVIC_EnableIRQ+0x34>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000adc:	d301      	bcc.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00f      	b.n	8000b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <SysTick_Config+0x40>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	210f      	movs	r1, #15
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f7ff ff90 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SysTick_Config+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SysTick_Config+0x40>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff2d 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff44 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff92 	bl	8000a68 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff61 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff37 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa4 	bl	8000acc <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e08e      	b.n	8000cc0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b47      	ldr	r3, [pc, #284]	; (8000cc8 <HAL_DMA_Init+0x138>)
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d80f      	bhi.n	8000bce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <HAL_DMA_Init+0x13c>)
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a45      	ldr	r2, [pc, #276]	; (8000cd0 <HAL_DMA_Init+0x140>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	009a      	lsls	r2, r3, #2
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a42      	ldr	r2, [pc, #264]	; (8000cd4 <HAL_DMA_Init+0x144>)
 8000bca:	641a      	str	r2, [r3, #64]	; 0x40
 8000bcc:	e00e      	b.n	8000bec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <HAL_DMA_Init+0x148>)
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a3d      	ldr	r2, [pc, #244]	; (8000cd0 <HAL_DMA_Init+0x140>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	009a      	lsls	r2, r3, #2
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a3c      	ldr	r2, [pc, #240]	; (8000cdc <HAL_DMA_Init+0x14c>)
 8000bea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2202      	movs	r2, #2
 8000bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	6812      	ldr	r2, [r2, #0]
 8000bfe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c06:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a1b      	ldr	r3, [r3, #32]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f000 f944 	bl	8000ecc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c4c:	d102      	bne.n	8000c54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c60:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c6a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d010      	beq.n	8000c96 <HAL_DMA_Init+0x106>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d80c      	bhi.n	8000c96 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f96d 	bl	8000f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	e008      	b.n	8000ca8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40020407 	.word	0x40020407
 8000ccc:	bffdfff8 	.word	0xbffdfff8
 8000cd0:	cccccccd 	.word	0xcccccccd
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	bffdfbf8 	.word	0xbffdfbf8
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	f003 031c 	and.w	r3, r3, #28
 8000d00:	2204      	movs	r2, #4
 8000d02:	409a      	lsls	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d027      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x7c>
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d022      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0320 	and.w	r3, r3, #32
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d107      	bne.n	8000d34 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0204 	bic.w	r2, r2, #4
 8000d32:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d38:	f003 021c 	and.w	r2, r3, #28
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	2104      	movs	r1, #4
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 8081 	beq.w	8000e54 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000d5a:	e07b      	b.n	8000e54 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d60:	f003 031c 	and.w	r3, r3, #28
 8000d64:	2202      	movs	r2, #2
 8000d66:	409a      	lsls	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d03d      	beq.n	8000dec <HAL_DMA_IRQHandler+0x10c>
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d038      	beq.n	8000dec <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0320 	and.w	r3, r3, #32
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10b      	bne.n	8000da0 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 020a 	bic.w	r2, r2, #10
 8000d96:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <HAL_DMA_IRQHandler+0x180>)
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d909      	bls.n	8000dc0 <HAL_DMA_IRQHandler+0xe0>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	f003 031c 	and.w	r3, r3, #28
 8000db4:	4a2b      	ldr	r2, [pc, #172]	; (8000e64 <HAL_DMA_IRQHandler+0x184>)
 8000db6:	2102      	movs	r1, #2
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	6053      	str	r3, [r2, #4]
 8000dbe:	e008      	b.n	8000dd2 <HAL_DMA_IRQHandler+0xf2>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc4:	f003 031c 	and.w	r3, r3, #28
 8000dc8:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <HAL_DMA_IRQHandler+0x188>)
 8000dca:	2102      	movs	r1, #2
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d038      	beq.n	8000e54 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000dea:	e033      	b.n	8000e54 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	f003 031c 	and.w	r3, r3, #28
 8000df4:	2208      	movs	r2, #8
 8000df6:	409a      	lsls	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d02a      	beq.n	8000e56 <HAL_DMA_IRQHandler+0x176>
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d025      	beq.n	8000e56 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 020e 	bic.w	r2, r2, #14
 8000e18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f003 021c 	and.w	r2, r3, #28
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	2101      	movs	r1, #1
 8000e28:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d004      	beq.n	8000e56 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
}
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40020080 	.word	0x40020080
 8000e64:	40020400 	.word	0x40020400
 8000e68:	40020000 	.word	0x40020000

08000e6c <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d103      	bne.n	8000e88 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	72fb      	strb	r3, [r7, #11]
    return status;
 8000e84:	7afb      	ldrb	r3, [r7, #11]
 8000e86:	e01b      	b.n	8000ec0 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00d      	beq.n	8000eb6 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d004      	beq.n	8000eae <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	e003      	b.n	8000eb6 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	601a      	str	r2, [r3, #0]

  return status;
 8000ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
	...

08000ecc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d813      	bhi.n	8000f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eec:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3b08      	subs	r3, #8
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	e011      	b.n	8000f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	009a      	lsls	r2, r3, #2
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8000f12:	4413      	add	r3, r2
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3b08      	subs	r3, #8
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	3307      	adds	r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8000f30:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f003 031f 	and.w	r3, r3, #31
 8000f38:	2201      	movs	r2, #1
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40020407 	.word	0x40020407
 8000f50:	cccccccd 	.word	0xcccccccd
 8000f54:	4002081c 	.word	0x4002081c
 8000f58:	40020880 	.word	0x40020880

08000f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	461a      	mov	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000f80:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	1000823f 	.word	0x1000823f
 8000fa0:	40020940 	.word	0x40020940

08000fa4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb2:	e140      	b.n	8001236 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8132 	beq.w	8001230 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d005      	beq.n	8000fe4 <HAL_GPIO_Init+0x40>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d130      	bne.n	8001046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800101a:	2201      	movs	r2, #1
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	f003 0201 	and.w	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b03      	cmp	r3, #3
 8001050:	d017      	beq.n	8001082 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d123      	bne.n	80010d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	6939      	ldr	r1, [r7, #16]
 80010d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0203 	and.w	r2, r3, #3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 808c 	beq.w	8001230 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x2b0>)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	2207      	movs	r2, #7
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001142:	d00d      	beq.n	8001160 <HAL_GPIO_Init+0x1bc>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a44      	ldr	r2, [pc, #272]	; (8001258 <HAL_GPIO_Init+0x2b4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0x1b8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a43      	ldr	r2, [pc, #268]	; (800125c <HAL_GPIO_Init+0x2b8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d101      	bne.n	8001158 <HAL_GPIO_Init+0x1b4>
 8001154:	2302      	movs	r3, #2
 8001156:	e004      	b.n	8001162 <HAL_GPIO_Init+0x1be>
 8001158:	2307      	movs	r3, #7
 800115a:	e002      	b.n	8001162 <HAL_GPIO_Init+0x1be>
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <HAL_GPIO_Init+0x1be>
 8001160:	2300      	movs	r3, #0
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	f002 0203 	and.w	r2, r2, #3
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	4093      	lsls	r3, r2
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001172:	4938      	ldr	r1, [pc, #224]	; (8001254 <HAL_GPIO_Init+0x2b0>)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001180:	4b37      	ldr	r3, [pc, #220]	; (8001260 <HAL_GPIO_Init+0x2bc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011a4:	4a2e      	ldr	r2, [pc, #184]	; (8001260 <HAL_GPIO_Init+0x2bc>)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_GPIO_Init+0x2bc>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ce:	4a24      	ldr	r2, [pc, #144]	; (8001260 <HAL_GPIO_Init+0x2bc>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_GPIO_Init+0x2bc>)
 80011d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011da:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80011fa:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_GPIO_Init+0x2bc>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_GPIO_Init+0x2bc>)
 8001204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001208:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_GPIO_Init+0x2bc>)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3301      	adds	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	f47f aeb7 	bne.w	8000fb4 <HAL_GPIO_Init+0x10>
  }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40010000 	.word	0x40010000
 8001258:	48000400 	.word	0x48000400
 800125c:	48000800 	.word	0x48000800
 8001260:	58000800 	.word	0x58000800

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001280:	e002      	b.n	8001288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e081      	b.n	80013a8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d106      	bne.n	80012be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff f951 	bl	8000560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2224      	movs	r2, #36	; 0x24
 80012c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0201 	bic.w	r2, r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d107      	bne.n	800130c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	e006      	b.n	800131a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001318:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d104      	bne.n	800132c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800132a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800133a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800133e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800134e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69d9      	ldr	r1, [r3, #28]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1a      	ldr	r2, [r3, #32]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0201 	orr.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2220      	movs	r2, #32
 8001394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d138      	bne.n	8001438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e032      	b.n	800143a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2224      	movs	r2, #36	; 0x24
 80013e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6819      	ldr	r1, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2220      	movs	r2, #32
 8001428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e000      	b.n	800143a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001438:	2302      	movs	r3, #2
  }
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b20      	cmp	r3, #32
 8001458:	d139      	bne.n	80014ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001464:	2302      	movs	r3, #2
 8001466:	e033      	b.n	80014d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2224      	movs	r2, #36	; 0x24
 8001474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001496:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2220      	movs	r2, #32
 80014be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014ce:	2302      	movs	r3, #2
  }
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	58000400 	.word	0x58000400

080014f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_PWREx_GetVoltageRange+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	58000400 	.word	0x58000400

08001510 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001520:	d101      	bne.n	8001526 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	58000400 	.word	0x58000400

08001534 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800157e:	d101      	bne.n	8001584 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80015ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d8:	d101      	bne.n	80015de <LL_RCC_HSE_IsReady+0x18>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <LL_RCC_HSE_IsReady+0x1a>
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001632:	d101      	bne.n	8001638 <LL_RCC_HSI_IsReady+0x18>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <LL_RCC_HSI_IsReady+0x1a>
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	061b      	lsls	r3, r3, #24
 8001658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b02      	cmp	r3, #2
 800167c:	d101      	bne.n	8001682 <LL_RCC_LSE_IsReady+0x18>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_RCC_LSE_IsReady+0x1a>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80016b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d101      	bne.n	80016e4 <LL_RCC_LSI_IsReady+0x18>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <LL_RCC_LSI_IsReady+0x1a>
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800170e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b02      	cmp	r3, #2
 8001736:	d101      	bne.n	800173c <LL_RCC_MSI_IsReady+0x16>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <LL_RCC_MSI_IsReady+0x18>
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b08      	cmp	r3, #8
 8001756:	d101      	bne.n	800175c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001788:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f023 0203 	bic.w	r2, r3, #3
 80017ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 030c 	and.w	r3, r3, #12
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800182e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4313      	orrs	r3, r2
 800183a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001854:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001858:	f023 020f 	bic.w	r2, r3, #15
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001864:	4313      	orrs	r3, r2
 8001866:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80018da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001966:	d101      	bne.n	800196c <LL_RCC_PLL_IsReady+0x18>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <LL_RCC_PLL_IsReady+0x1a>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0303 	and.w	r3, r3, #3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d101      	bne.n	80019e8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80019f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a06:	d101      	bne.n	8001a0c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2a:	d101      	bne.n	8001a30 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a4c:	d101      	bne.n	8001a52 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a6e:	d101      	bne.n	8001a74 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e36f      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	f7ff fea6 	bl	80017e2 <LL_RCC_GetSysClkSource>
 8001a96:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a98:	f7ff ff8f 	bl	80019ba <LL_RCC_PLL_GetMainSource>
 8001a9c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80c4 	beq.w	8001c34 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_RCC_OscConfig+0x3e>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	d176      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d173      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e353      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x68>
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae6:	e006      	b.n	8001af6 <HAL_RCC_OscConfig+0x76>
 8001ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d222      	bcs.n	8001b40 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fd5a 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e331      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe2b 	bl	8001794 <LL_RCC_MSI_SetCalibTrimming>
 8001b3e:	e021      	b.n	8001b84 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fe12 	bl	8001794 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fd1f 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e2f6      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b84:	f000 fce0 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4aa7      	ldr	r2, [pc, #668]	; (8001e28 <HAL_RCC_OscConfig+0x3a8>)
 8001b8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001b8e:	4ba7      	ldr	r3, [pc, #668]	; (8001e2c <HAL_RCC_OscConfig+0x3ac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fe9a 	bl	80008cc <HAL_InitTick>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001b9c:	7cfb      	ldrb	r3, [r7, #19]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d047      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001ba2:	7cfb      	ldrb	r3, [r7, #19]
 8001ba4:	e2e5      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d02c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bae:	f7ff fd9e 	bl	80016ee <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bb2:	f7fe fed7 	bl	8000964 <HAL_GetTick>
 8001bb6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bba:	f7fe fed3 	bl	8000964 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e2d2      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001bcc:	f7ff fdab 	bl	8001726 <LL_RCC_MSI_IsReady>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f1      	beq.n	8001bba <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fdc7 	bl	8001794 <LL_RCC_MSI_SetCalibTrimming>
 8001c06:	e015      	b.n	8001c34 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c08:	f7ff fd7f 	bl	800170a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c0c:	f7fe feaa 	bl	8000964 <HAL_GetTick>
 8001c10:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c14:	f7fe fea6 	bl	8000964 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e2a5      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c26:	f7ff fd7e 	bl	8001726 <LL_RCC_MSI_IsReady>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f1      	bne.n	8001c14 <HAL_RCC_OscConfig+0x194>
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c32:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d058      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d108      	bne.n	8001c5e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d105      	bne.n	8001c5e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d14b      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e289      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7c:	d102      	bne.n	8001c84 <HAL_RCC_OscConfig+0x204>
 8001c7e:	f7ff fc86 	bl	800158e <LL_RCC_HSE_Enable>
 8001c82:	e00d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x220>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001c8c:	d104      	bne.n	8001c98 <HAL_RCC_OscConfig+0x218>
 8001c8e:	f7ff fc51 	bl	8001534 <LL_RCC_HSE_EnableTcxo>
 8001c92:	f7ff fc7c 	bl	800158e <LL_RCC_HSE_Enable>
 8001c96:	e003      	b.n	8001ca0 <HAL_RCC_OscConfig+0x220>
 8001c98:	f7ff fc87 	bl	80015aa <LL_RCC_HSE_Disable>
 8001c9c:	f7ff fc58 	bl	8001550 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d012      	beq.n	8001cce <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7fe fe5c 	bl	8000964 <HAL_GetTick>
 8001cac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7fe fe58 	bl	8000964 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e257      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001cc2:	f7ff fc80 	bl	80015c6 <LL_RCC_HSE_IsReady>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f1      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x230>
 8001ccc:	e011      	b.n	8001cf2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7fe fe49 	bl	8000964 <HAL_GetTick>
 8001cd2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd6:	f7fe fe45 	bl	8000964 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b64      	cmp	r3, #100	; 0x64
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e244      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ce8:	f7ff fc6d 	bl	80015c6 <LL_RCC_HSE_IsReady>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f1      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d046      	beq.n	8001d8c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_OscConfig+0x290>
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d10e      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d10b      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e22a      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fc8e 	bl	8001642 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d26:	e031      	b.n	8001d8c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d019      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	f7ff fc5a 	bl	80015e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe fe16 	bl	8000964 <HAL_GetTick>
 8001d38:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7fe fe12 	bl	8000964 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e211      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d4e:	f7ff fc67 	bl	8001620 <LL_RCC_HSI_IsReady>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f1      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fc70 	bl	8001642 <LL_RCC_HSI_SetCalibTrimming>
 8001d62:	e013      	b.n	8001d8c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d64:	f7ff fc4e 	bl	8001604 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7fe fdfc 	bl	8000964 <HAL_GetTick>
 8001d6c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d70:	f7fe fdf8 	bl	8000964 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1f7      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d82:	f7ff fc4d 	bl	8001620 <LL_RCC_HSI_IsReady>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f1      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d06e      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d056      	beq.n	8001e4e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d031      	beq.n	8001e1c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d006      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e1d0      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d013      	beq.n	8001e02 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001dda:	f7ff fc67 	bl	80016ac <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dde:	f7fe fdc1 	bl	8000964 <HAL_GetTick>
 8001de2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de6:	f7fe fdbd 	bl	8000964 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b11      	cmp	r3, #17
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e1bc      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001df8:	f7ff fc68 	bl	80016cc <LL_RCC_LSI_IsReady>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f1      	bne.n	8001de6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0a:	f023 0210 	bic.w	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1c:	f7ff fc36 	bl	800168c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7fe fda0 	bl	8000964 <HAL_GetTick>
 8001e24:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001e26:	e00c      	b.n	8001e42 <HAL_RCC_OscConfig+0x3c2>
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e30:	f7fe fd98 	bl	8000964 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b11      	cmp	r3, #17
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e197      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001e42:	f7ff fc43 	bl	80016cc <LL_RCC_LSI_IsReady>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f1      	beq.n	8001e30 <HAL_RCC_OscConfig+0x3b0>
 8001e4c:	e013      	b.n	8001e76 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	f7ff fc2d 	bl	80016ac <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7fe fd87 	bl	8000964 <HAL_GetTick>
 8001e56:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7fe fd83 	bl	8000964 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b11      	cmp	r3, #17
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e182      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e6c:	f7ff fc2e 	bl	80016cc <LL_RCC_LSI_IsReady>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f1      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80d8 	beq.w	8002034 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e84:	f7ff fb44 	bl	8001510 <LL_PWR_IsEnabledBkUpAccess>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d113      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001e8e:	f7ff fb25 	bl	80014dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7fe fd67 	bl	8000964 <HAL_GetTick>
 8001e96:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7fe fd63 	bl	8000964 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e162      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001eac:	f7ff fb30 	bl	8001510 <LL_PWR_IsEnabledBkUpAccess>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f1      	beq.n	8001e9a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d07b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b85      	cmp	r3, #133	; 0x85
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7fe fd3f 	bl	8000964 <HAL_GetTick>
 8001ee6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe fd31 	bl	8000964 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e12e      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f14:	f7ff fba9 	bl	800166a <LL_RCC_LSE_IsReady>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0ef      	beq.n	8001efe <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b81      	cmp	r3, #129	; 0x81
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b85      	cmp	r3, #133	; 0x85
 8001f2c:	d121      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fd19 	bl	8000964 <HAL_GetTick>
 8001f32:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fd0b 	bl	8000964 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e108      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ec      	beq.n	8001f4a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f70:	e060      	b.n	8002034 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7fe fcf7 	bl	8000964 <HAL_GetTick>
 8001f76:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fce9 	bl	8000964 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0e6      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ec      	bne.n	8001f8e <HAL_RCC_OscConfig+0x50e>
 8001fb4:	e03e      	b.n	8002034 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fcd5 	bl	8000964 <HAL_GetTick>
 8001fba:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fcc7 	bl	8000964 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0c4      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ec      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fcb4 	bl	8000964 <HAL_GetTick>
 8001ffc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002012:	e00a      	b.n	800202a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002014:	f7fe fca6 	bl	8000964 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e0a3      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800202a:	f7ff fb1e 	bl	800166a <LL_RCC_LSE_IsReady>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ef      	bne.n	8002014 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8099 	beq.w	8002170 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	2b0c      	cmp	r3, #12
 8002042:	d06c      	beq.n	800211e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	2b02      	cmp	r3, #2
 800204a:	d14b      	bne.n	80020e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204c:	f7ff fc74 	bl	8001938 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7fe fc88 	bl	8000964 <HAL_GetTick>
 8002054:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7fe fc84 	bl	8000964 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b0a      	cmp	r3, #10
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e083      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800206a:	f7ff fc73 	bl	8001954 <LL_RCC_PLL_IsReady>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f1      	bne.n	8002058 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	4b40      	ldr	r3, [pc, #256]	; (800217c <HAL_RCC_OscConfig+0x6fc>)
 800207c:	4013      	ands	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800208c:	0212      	lsls	r2, r2, #8
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020a0:	430a      	orrs	r2, r1
 80020a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020aa:	f7ff fc37 	bl	800191c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7fe fc51 	bl	8000964 <HAL_GetTick>
 80020c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7fe fc4d 	bl	8000964 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b0a      	cmp	r3, #10
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e04c      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80020d8:	f7ff fc3c 	bl	8001954 <LL_RCC_PLL_IsReady>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f1      	beq.n	80020c6 <HAL_RCC_OscConfig+0x646>
 80020e2:	e045      	b.n	8002170 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	f7ff fc28 	bl	8001938 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fc3c 	bl	8000964 <HAL_GetTick>
 80020ec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe fc38 	bl	8000964 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b0a      	cmp	r3, #10
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e037      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002102:	f7ff fc27 	bl	8001954 <LL_RCC_PLL_IsReady>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f1      	bne.n	80020f0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_RCC_OscConfig+0x700>)
 8002118:	4013      	ands	r3, r2
 800211a:	60cb      	str	r3, [r1, #12]
 800211c:	e028      	b.n	8002170 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e023      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	429a      	cmp	r2, r3
 800213e:	d115      	bne.n	800216c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214a:	429a      	cmp	r2, r3
 800214c:	d10e      	bne.n	800216c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	429a      	cmp	r2, r3
 800215c:	d106      	bne.n	800216c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	11c1808c 	.word	0x11c1808c
 8002180:	eefefffc 	.word	0xeefefffc

08002184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e12c      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b98      	ldr	r3, [pc, #608]	; (80023fc <HAL_RCC_ClockConfig+0x278>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d91b      	bls.n	80021de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b95      	ldr	r3, [pc, #596]	; (80023fc <HAL_RCC_ClockConfig+0x278>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4993      	ldr	r1, [pc, #588]	; (80023fc <HAL_RCC_ClockConfig+0x278>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b6:	f7fe fbd5 	bl	8000964 <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021be:	f7fe fbd1 	bl	8000964 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e110      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d0:	4b8a      	ldr	r3, [pc, #552]	; (80023fc <HAL_RCC_ClockConfig+0x278>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d1ef      	bne.n	80021be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d016      	beq.n	8002218 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fb02 	bl	80017f8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021f4:	f7fe fbb6 	bl	8000964 <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021fc:	f7fe fbb2 	bl	8000964 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0f1      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800220e:	f7ff fbdf 	bl	80019d0 <LL_RCC_IsActiveFlag_HPRE>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f1      	beq.n	80021fc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d016      	beq.n	8002252 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff faf8 	bl	800181e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800222e:	f7fe fb99 	bl	8000964 <HAL_GetTick>
 8002232:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002236:	f7fe fb95 	bl	8000964 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0d4      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002248:	f7ff fbd3 	bl	80019f2 <LL_RCC_IsActiveFlag_C2HPRE>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f1      	beq.n	8002236 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff faf0 	bl	8001848 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002268:	f7fe fb7c 	bl	8000964 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002270:	f7fe fb78 	bl	8000964 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e0b7      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002282:	f7ff fbc8 	bl	8001a16 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f1      	beq.n	8002270 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d016      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fae9 	bl	8001874 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022a2:	f7fe fb5f 	bl	8000964 <HAL_GetTick>
 80022a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022aa:	f7fe fb5b 	bl	8000964 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e09a      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80022bc:	f7ff fbbd 	bl	8001a3a <LL_RCC_IsActiveFlag_PPRE1>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f1      	beq.n	80022aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d017      	beq.n	8002302 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fade 	bl	800189a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022de:	f7fe fb41 	bl	8000964 <HAL_GetTick>
 80022e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022e6:	f7fe fb3d 	bl	8000964 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e07c      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022f8:	f7ff fbb0 	bl	8001a5c <LL_RCC_IsActiveFlag_PPRE2>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f1      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d043      	beq.n	8002396 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d106      	bne.n	8002324 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002316:	f7ff f956 	bl	80015c6 <LL_RCC_HSE_IsReady>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d11e      	bne.n	800235e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e066      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d106      	bne.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800232c:	f7ff fb12 	bl	8001954 <LL_RCC_PLL_IsReady>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e05b      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002342:	f7ff f9f0 	bl	8001726 <LL_RCC_MSI_IsReady>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d108      	bne.n	800235e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e050      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002350:	f7ff f966 	bl	8001620 <LL_RCC_HSI_IsReady>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e049      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fa2a 	bl	80017bc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002368:	f7fe fafc 	bl	8000964 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7fe faf8 	bl	8000964 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e035      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	f7ff fa2c 	bl	80017e2 <LL_RCC_GetSysClkSource>
 800238a:	4602      	mov	r2, r0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	429a      	cmp	r2, r3
 8002394:	d1ec      	bne.n	8002370 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCC_ClockConfig+0x278>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d21b      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_RCC_ClockConfig+0x278>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 0207 	bic.w	r2, r3, #7
 80023ac:	4913      	ldr	r1, [pc, #76]	; (80023fc <HAL_RCC_ClockConfig+0x278>)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b4:	f7fe fad6 	bl	8000964 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023bc:	f7fe fad2 	bl	8000964 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e011      	b.n	80023f2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_ClockConfig+0x278>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1ef      	bne.n	80023bc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023dc:	f000 f8b4 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_RCC_ClockConfig+0x27c>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_RCC_ClockConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fa6e 	bl	80008cc <HAL_InitTick>
 80023f0:	4603      	mov	r3, r0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	58004000 	.word	0x58004000
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002416:	f7ff f9e4 	bl	80017e2 <LL_RCC_GetSysClkSource>
 800241a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800241c:	f7ff facd 	bl	80019ba <LL_RCC_PLL_GetMainSource>
 8002420:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x2c>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d139      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d136      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002434:	f7ff f987 	bl	8001746 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d115      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x62>
 800243e:	f7ff f982 	bl	8001746 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002442:	4603      	mov	r3, r0
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HAL_RCC_GetSysClockFreq+0x4e>
 8002448:	f7ff f98d 	bl	8001766 <LL_RCC_MSI_GetRange>
 800244c:	4603      	mov	r3, r0
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	e005      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x5a>
 8002456:	f7ff f991 	bl	800177c <LL_RCC_MSI_GetRangeAfterStandby>
 800245a:	4603      	mov	r3, r0
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	4a36      	ldr	r2, [pc, #216]	; (800253c <HAL_RCC_GetSysClockFreq+0x134>)
 8002464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002468:	e014      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x8c>
 800246a:	f7ff f96c 	bl	8001746 <LL_RCC_MSI_IsEnabledRangeSelect>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d106      	bne.n	8002482 <HAL_RCC_GetSysClockFreq+0x7a>
 8002474:	f7ff f977 	bl	8001766 <LL_RCC_MSI_GetRange>
 8002478:	4603      	mov	r3, r0
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	e005      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x86>
 8002482:	f7ff f97b 	bl	800177c <LL_RCC_MSI_GetRangeAfterStandby>
 8002486:	4603      	mov	r3, r0
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	4a2b      	ldr	r2, [pc, #172]	; (800253c <HAL_RCC_GetSysClockFreq+0x134>)
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d115      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024a0:	e012      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d102      	bne.n	80024ae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_GetSysClockFreq+0x138>)
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e00c      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d109      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024b4:	f7ff f85a 	bl	800156c <LL_RCC_HSE_IsEnabledDiv2>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d102      	bne.n	80024c4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_GetSysClockFreq+0x138>)
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e001      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024c6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c8:	f7ff f98b 	bl	80017e2 <LL_RCC_GetSysClkSource>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d12f      	bne.n	8002532 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80024d2:	f7ff fa72 	bl	80019ba <LL_RCC_PLL_GetMainSource>
 80024d6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0xde>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d003      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0xe4>
 80024e4:	e00d      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <HAL_RCC_GetSysClockFreq+0x138>)
 80024e8:	60fb      	str	r3, [r7, #12]
        break;
 80024ea:	e00d      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024ec:	f7ff f83e 	bl	800156c <LL_RCC_HSE_IsEnabledDiv2>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d102      	bne.n	80024fc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_GetSysClockFreq+0x138>)
 80024f8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80024fa:	e005      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024fe:	60fb      	str	r3, [r7, #12]
        break;
 8002500:	e002      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	60fb      	str	r3, [r7, #12]
        break;
 8002506:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002508:	f7ff fa35 	bl	8001976 <LL_RCC_PLL_GetN>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	fb03 f402 	mul.w	r4, r3, r2
 8002514:	f7ff fa46 	bl	80019a4 <LL_RCC_PLL_GetDivider>
 8002518:	4603      	mov	r3, r0
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	3301      	adds	r3, #1
 800251e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002522:	f7ff fa34 	bl	800198e <LL_RCC_PLL_GetR>
 8002526:	4603      	mov	r3, r0
 8002528:	0f5b      	lsrs	r3, r3, #29
 800252a:	3301      	adds	r3, #1
 800252c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002530:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002532:	697b      	ldr	r3, [r7, #20]
}
 8002534:	4618      	mov	r0, r3
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	080036f4 	.word	0x080036f4
 8002540:	00f42400 	.word	0x00f42400
 8002544:	01e84800 	.word	0x01e84800

08002548 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b598      	push	{r3, r4, r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800254c:	f7ff ff5c 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 8002550:	4604      	mov	r4, r0
 8002552:	f7ff f9b5 	bl	80018c0 <LL_RCC_GetAHBPrescaler>
 8002556:	4603      	mov	r3, r0
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	4a03      	ldr	r2, [pc, #12]	; (800256c <HAL_RCC_GetHCLKFreq+0x24>)
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd98      	pop	{r3, r4, r7, pc}
 800256c:	08003694 	.word	0x08003694

08002570 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b598      	push	{r3, r4, r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002574:	f7ff ffe8 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002578:	4604      	mov	r4, r0
 800257a:	f7ff f9b9 	bl	80018f0 <LL_RCC_GetAPB1Prescaler>
 800257e:	4603      	mov	r3, r0
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	4a03      	ldr	r2, [pc, #12]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002588:	fa24 f303 	lsr.w	r3, r4, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd98      	pop	{r3, r4, r7, pc}
 8002590:	080036d4 	.word	0x080036d4

08002594 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b598      	push	{r3, r4, r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002598:	f7ff ffd6 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 800259c:	4604      	mov	r4, r0
 800259e:	f7ff f9b2 	bl	8001906 <LL_RCC_GetAPB2Prescaler>
 80025a2:	4603      	mov	r3, r0
 80025a4:	0adb      	lsrs	r3, r3, #11
 80025a6:	4a03      	ldr	r2, [pc, #12]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd98      	pop	{r3, r4, r7, pc}
 80025b4:	080036d4 	.word	0x080036d4

080025b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	4a10      	ldr	r2, [pc, #64]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80025d0:	f7ff f981 	bl	80018d6 <LL_RCC_GetAHB3Prescaler>
 80025d4:	4603      	mov	r3, r0
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	4a0c      	ldr	r2, [pc, #48]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4a09      	ldr	r2, [pc, #36]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0c9c      	lsrs	r4, r3, #18
 80025f4:	f7fe ff80 	bl	80014f8 <HAL_PWREx_GetVoltageRange>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4620      	mov	r0, r4
 80025fe:	f000 f80b 	bl	8002618 <RCC_SetFlashLatency>
 8002602:	4603      	mov	r3, r0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	080036f4 	.word	0x080036f4
 8002610:	08003694 	.word	0x08003694
 8002614:	431bde83 	.word	0x431bde83

08002618 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08e      	sub	sp, #56	; 0x38
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002622:	4a3a      	ldr	r2, [pc, #232]	; (800270c <RCC_SetFlashLatency+0xf4>)
 8002624:	f107 0320 	add.w	r3, r7, #32
 8002628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800262c:	6018      	str	r0, [r3, #0]
 800262e:	3304      	adds	r3, #4
 8002630:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002632:	4a37      	ldr	r2, [pc, #220]	; (8002710 <RCC_SetFlashLatency+0xf8>)
 8002634:	f107 0318 	add.w	r3, r7, #24
 8002638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800263c:	6018      	str	r0, [r3, #0]
 800263e:	3304      	adds	r3, #4
 8002640:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002642:	4a34      	ldr	r2, [pc, #208]	; (8002714 <RCC_SetFlashLatency+0xfc>)
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	ca07      	ldmia	r2, {r0, r1, r2}
 800264a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800264e:	2300      	movs	r3, #0
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002658:	d11b      	bne.n	8002692 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800265a:	2300      	movs	r3, #0
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
 800265e:	e014      	b.n	800268a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	3338      	adds	r3, #56	; 0x38
 8002666:	443b      	add	r3, r7
 8002668:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800266c:	461a      	mov	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4293      	cmp	r3, r2
 8002672:	d807      	bhi.n	8002684 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	3338      	adds	r3, #56	; 0x38
 800267a:	443b      	add	r3, r7
 800267c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002682:	e021      	b.n	80026c8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	3301      	adds	r3, #1
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	2b02      	cmp	r3, #2
 800268e:	d9e7      	bls.n	8002660 <RCC_SetFlashLatency+0x48>
 8002690:	e01a      	b.n	80026c8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002696:	e014      	b.n	80026c2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	3338      	adds	r3, #56	; 0x38
 800269e:	443b      	add	r3, r7
 80026a0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80026a4:	461a      	mov	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d807      	bhi.n	80026bc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	3338      	adds	r3, #56	; 0x38
 80026b2:	443b      	add	r3, r7
 80026b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026ba:	e005      	b.n	80026c8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	3301      	adds	r3, #1
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d9e7      	bls.n	8002698 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <RCC_SetFlashLatency+0x100>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 0207 	bic.w	r2, r3, #7
 80026d0:	4911      	ldr	r1, [pc, #68]	; (8002718 <RCC_SetFlashLatency+0x100>)
 80026d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026d8:	f7fe f944 	bl	8000964 <HAL_GetTick>
 80026dc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026de:	e008      	b.n	80026f2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026e0:	f7fe f940 	bl	8000964 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e007      	b.n	8002702 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <RCC_SetFlashLatency+0x100>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1ef      	bne.n	80026e0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3738      	adds	r7, #56	; 0x38
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	08003678 	.word	0x08003678
 8002710:	08003680 	.word	0x08003680
 8002714:	08003688 	.word	0x08003688
 8002718:	58004000 	.word	0x58004000

0800271c <LL_RCC_LSE_IsReady>:
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b02      	cmp	r3, #2
 800272e:	d101      	bne.n	8002734 <LL_RCC_LSE_IsReady+0x18>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <LL_RCC_LSE_IsReady+0x1a>
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <LL_RCC_SetUSARTClockSource>:
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	43db      	mvns	r3, r3
 8002754:	401a      	ands	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <LL_RCC_SetI2SClockSource>:
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <LL_RCC_SetLPUARTClockSource>:
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80027a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <LL_RCC_SetI2CClockSource>:
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80027ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027da:	43db      	mvns	r3, r3
 80027dc:	401a      	ands	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <LL_RCC_SetLPTIMClockSource>:
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002806:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0c1b      	lsrs	r3, r3, #16
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	43db      	mvns	r3, r3
 8002812:	401a      	ands	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <LL_RCC_SetRNGClockSource>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <LL_RCC_SetADCClockSource>:
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800286a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <LL_RCC_SetRTCClockSource>:
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <LL_RCC_GetRTCClockSource>:
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80028ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <LL_RCC_ForceBackupDomainReset>:
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
	...

08002904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002910:	2300      	movs	r3, #0
 8002912:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002914:	2300      	movs	r3, #0
 8002916:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d058      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002924:	f7fe fdda 	bl	80014dc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002928:	f7fe f81c 	bl	8000964 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800292e:	e009      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002930:	f7fe f818 	bl	8000964 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d902      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	74fb      	strb	r3, [r7, #19]
        break;
 8002942:	e006      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002944:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002950:	d1ee      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d13c      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002958:	f7ff ffa7 	bl	80028aa <LL_RCC_GetRTCClockSource>
 800295c:	4602      	mov	r2, r0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002962:	429a      	cmp	r2, r3
 8002964:	d00f      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002972:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002974:	f7ff ffa5 	bl	80028c2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002978:	f7ff ffb3 	bl	80028e2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800297c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d014      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fd ffe8 	bl	8000964 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002996:	e00b      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fd ffe4 	bl	8000964 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d902      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	74fb      	strb	r3, [r7, #19]
            break;
 80029ae:	e004      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80029b0:	f7ff feb4 	bl	800271c <LL_RCC_LSE_IsReady>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d1ee      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff5b 	bl	8002880 <LL_RCC_SetRTCClockSource>
 80029ca:	e004      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
 80029d0:	e001      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d2:	7cfb      	ldrb	r3, [r7, #19]
 80029d4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fea9 	bl	800273e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d004      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fe9e 	bl	800273e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d004      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fec0 	bl	8002798 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fee6 	bl	80027fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d004      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fedb 	bl	80027fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fed0 	bl	80027fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fea9 	bl	80027c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fe9e 	bl	80027c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fe93 	bl	80027c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d011      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fe5e 	bl	800276e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aba:	d107      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d010      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fea5 	bl	800282c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d011      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fea3 	bl	8002856 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b18:	d107      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002b2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	58000400 	.word	0x58000400

08002b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0c6      	b.n	8002cd8 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d108      	bne.n	8002b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5a:	d009      	beq.n	8002b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	61da      	str	r2, [r3, #28]
 8002b62:	e005      	b.n	8002b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fd fd33 	bl	80005f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002baa:	d902      	bls.n	8002bb2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e002      	b.n	8002bb8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002bc0:	d007      	beq.n	8002bd2 <HAL_SPI_Init+0x9a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bca:	d002      	beq.n	8002bd2 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	ea42 0103 	orr.w	r1, r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c30:	d11b      	bne.n	8002c6a <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c42:	d903      	bls.n	8002c4c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
 8002c4a:	e002      	b.n	8002c52 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d107      	bne.n	8002c6a <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	f003 0204 	and.w	r2, r3, #4
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c90:	ea42 0103 	orr.w	r1, r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002caa:	d105      	bne.n	8002cb8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <LL_RCC_GetUSARTClockSource>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	4313      	orrs	r3, r2
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e03c      	b.n	8002d90 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fd fcfc 	bl	8000728 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f85b 	bl	8002e04 <USART_SetConfig>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e01b      	b.n	8002d90 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d66:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d76:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fafd 	bl	8003388 <USART_CheckIdleState>
 8002d8e:	4603      	mov	r3, r0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002da8:	e018      	b.n	8002ddc <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d014      	beq.n	8002ddc <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db2:	f7fd fdd7 	bl	8000964 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d302      	bcc.n	8002dc8 <USART_WaitOnFlagUntilTimeout+0x30>
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e00f      	b.n	8002dfc <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4013      	ands	r3, r2
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d0d7      	beq.n	8002daa <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4ba1      	ldr	r3, [pc, #644]	; (80030b8 <USART_SetConfig+0x2b4>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	6979      	ldr	r1, [r7, #20]
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8002e3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e42:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e72:	f023 0309 	bic.w	r3, r3, #9
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	f023 010f 	bic.w	r1, r3, #15
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a88      	ldr	r2, [pc, #544]	; (80030bc <USART_SetConfig+0x2b8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d122      	bne.n	8002ee6 <USART_SetConfig+0xe2>
 8002ea0:	2003      	movs	r0, #3
 8002ea2:	f7ff ff1d 	bl	8002ce0 <LL_RCC_GetUSARTClockSource>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d817      	bhi.n	8002ee0 <USART_SetConfig+0xdc>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <USART_SetConfig+0xb4>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002ed5 	.word	0x08002ed5
 8002ec0:	08002ecf 	.word	0x08002ecf
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2301      	movs	r3, #1
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	e047      	b.n	8002f5e <USART_SetConfig+0x15a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	77fb      	strb	r3, [r7, #31]
 8002ed2:	e044      	b.n	8002f5e <USART_SetConfig+0x15a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e041      	b.n	8002f5e <USART_SetConfig+0x15a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	e03e      	b.n	8002f5e <USART_SetConfig+0x15a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e03b      	b.n	8002f5e <USART_SetConfig+0x15a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	; (80030c0 <USART_SetConfig+0x2bc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d134      	bne.n	8002f5a <USART_SetConfig+0x156>
 8002ef0:	200c      	movs	r0, #12
 8002ef2:	f7ff fef5 	bl	8002ce0 <LL_RCC_GetUSARTClockSource>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d829      	bhi.n	8002f54 <USART_SetConfig+0x150>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <USART_SetConfig+0x104>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	08002f55 	.word	0x08002f55
 8002f10:	08002f55 	.word	0x08002f55
 8002f14:	08002f55 	.word	0x08002f55
 8002f18:	08002f49 	.word	0x08002f49
 8002f1c:	08002f55 	.word	0x08002f55
 8002f20:	08002f55 	.word	0x08002f55
 8002f24:	08002f55 	.word	0x08002f55
 8002f28:	08002f43 	.word	0x08002f43
 8002f2c:	08002f55 	.word	0x08002f55
 8002f30:	08002f55 	.word	0x08002f55
 8002f34:	08002f55 	.word	0x08002f55
 8002f38:	08002f4f 	.word	0x08002f4f
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e00d      	b.n	8002f5e <USART_SetConfig+0x15a>
 8002f42:	2302      	movs	r3, #2
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e00a      	b.n	8002f5e <USART_SetConfig+0x15a>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e007      	b.n	8002f5e <USART_SetConfig+0x15a>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e004      	b.n	8002f5e <USART_SetConfig+0x15a>
 8002f54:	2310      	movs	r3, #16
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e001      	b.n	8002f5e <USART_SetConfig+0x15a>
 8002f5a:	2310      	movs	r3, #16
 8002f5c:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8002f5e:	7ffb      	ldrb	r3, [r7, #31]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	f200 81de 	bhi.w	8003322 <USART_SetConfig+0x51e>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <USART_SetConfig+0x168>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002f91 	.word	0x08002f91
 8002f70:	08003047 	.word	0x08003047
 8002f74:	0800310b 	.word	0x0800310b
 8002f78:	08003323 	.word	0x08003323
 8002f7c:	080031bb 	.word	0x080031bb
 8002f80:	08003323 	.word	0x08003323
 8002f84:	08003323 	.word	0x08003323
 8002f88:	08003323 	.word	0x08003323
 8002f8c:	08003271 	.word	0x08003271
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f90:	f7ff faee 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8002f94:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d044      	beq.n	8003028 <USART_SetConfig+0x224>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d03e      	beq.n	8003024 <USART_SetConfig+0x220>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d038      	beq.n	8003020 <USART_SetConfig+0x21c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d032      	beq.n	800301c <USART_SetConfig+0x218>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d02c      	beq.n	8003018 <USART_SetConfig+0x214>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d026      	beq.n	8003014 <USART_SetConfig+0x210>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d020      	beq.n	8003010 <USART_SetConfig+0x20c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b07      	cmp	r3, #7
 8002fd4:	d01a      	beq.n	800300c <USART_SetConfig+0x208>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d014      	beq.n	8003008 <USART_SetConfig+0x204>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2b09      	cmp	r3, #9
 8002fe4:	d00e      	beq.n	8003004 <USART_SetConfig+0x200>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b0a      	cmp	r3, #10
 8002fec:	d008      	beq.n	8003000 <USART_SetConfig+0x1fc>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b0b      	cmp	r3, #11
 8002ff4:	d102      	bne.n	8002ffc <USART_SetConfig+0x1f8>
 8002ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ffa:	e016      	b.n	800302a <USART_SetConfig+0x226>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e014      	b.n	800302a <USART_SetConfig+0x226>
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	e012      	b.n	800302a <USART_SetConfig+0x226>
 8003004:	2340      	movs	r3, #64	; 0x40
 8003006:	e010      	b.n	800302a <USART_SetConfig+0x226>
 8003008:	2320      	movs	r3, #32
 800300a:	e00e      	b.n	800302a <USART_SetConfig+0x226>
 800300c:	2310      	movs	r3, #16
 800300e:	e00c      	b.n	800302a <USART_SetConfig+0x226>
 8003010:	230c      	movs	r3, #12
 8003012:	e00a      	b.n	800302a <USART_SetConfig+0x226>
 8003014:	230a      	movs	r3, #10
 8003016:	e008      	b.n	800302a <USART_SetConfig+0x226>
 8003018:	2308      	movs	r3, #8
 800301a:	e006      	b.n	800302a <USART_SetConfig+0x226>
 800301c:	2306      	movs	r3, #6
 800301e:	e004      	b.n	800302a <USART_SetConfig+0x226>
 8003020:	2304      	movs	r3, #4
 8003022:	e002      	b.n	800302a <USART_SetConfig+0x226>
 8003024:	2302      	movs	r3, #2
 8003026:	e000      	b.n	800302a <USART_SetConfig+0x226>
 8003028:	2301      	movs	r3, #1
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	005a      	lsls	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	441a      	add	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	61bb      	str	r3, [r7, #24]
      break;
 8003044:	e170      	b.n	8003328 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8003046:	f7ff faa5 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 800304a:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	2b00      	cmp	r3, #0
 8003052:	d04b      	beq.n	80030ec <USART_SetConfig+0x2e8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2b01      	cmp	r3, #1
 800305a:	d045      	beq.n	80030e8 <USART_SetConfig+0x2e4>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b02      	cmp	r3, #2
 8003062:	d03f      	beq.n	80030e4 <USART_SetConfig+0x2e0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2b03      	cmp	r3, #3
 800306a:	d039      	beq.n	80030e0 <USART_SetConfig+0x2dc>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2b04      	cmp	r3, #4
 8003072:	d033      	beq.n	80030dc <USART_SetConfig+0x2d8>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2b05      	cmp	r3, #5
 800307a:	d02d      	beq.n	80030d8 <USART_SetConfig+0x2d4>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2b06      	cmp	r3, #6
 8003082:	d027      	beq.n	80030d4 <USART_SetConfig+0x2d0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	2b07      	cmp	r3, #7
 800308a:	d021      	beq.n	80030d0 <USART_SetConfig+0x2cc>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b08      	cmp	r3, #8
 8003092:	d01b      	beq.n	80030cc <USART_SetConfig+0x2c8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b09      	cmp	r3, #9
 800309a:	d015      	beq.n	80030c8 <USART_SetConfig+0x2c4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	2b0a      	cmp	r3, #10
 80030a2:	d00f      	beq.n	80030c4 <USART_SetConfig+0x2c0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	2b0b      	cmp	r3, #11
 80030aa:	d102      	bne.n	80030b2 <USART_SetConfig+0x2ae>
 80030ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b0:	e01d      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e01b      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030b6:	bf00      	nop
 80030b8:	cfff69f3 	.word	0xcfff69f3
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40004400 	.word	0x40004400
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	e012      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030c8:	2340      	movs	r3, #64	; 0x40
 80030ca:	e010      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030cc:	2320      	movs	r3, #32
 80030ce:	e00e      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030d0:	2310      	movs	r3, #16
 80030d2:	e00c      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030d4:	230c      	movs	r3, #12
 80030d6:	e00a      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030d8:	230a      	movs	r3, #10
 80030da:	e008      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030dc:	2308      	movs	r3, #8
 80030de:	e006      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030e0:	2306      	movs	r3, #6
 80030e2:	e004      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030e4:	2304      	movs	r3, #4
 80030e6:	e002      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e000      	b.n	80030ee <USART_SetConfig+0x2ea>
 80030ec:	2301      	movs	r3, #1
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	005a      	lsls	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	441a      	add	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	61bb      	str	r3, [r7, #24]
      break;
 8003108:	e10e      	b.n	8003328 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	d044      	beq.n	800319c <USART_SetConfig+0x398>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b01      	cmp	r3, #1
 8003118:	d03e      	beq.n	8003198 <USART_SetConfig+0x394>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b02      	cmp	r3, #2
 8003120:	d038      	beq.n	8003194 <USART_SetConfig+0x390>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	2b03      	cmp	r3, #3
 8003128:	d032      	beq.n	8003190 <USART_SetConfig+0x38c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b04      	cmp	r3, #4
 8003130:	d02c      	beq.n	800318c <USART_SetConfig+0x388>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2b05      	cmp	r3, #5
 8003138:	d026      	beq.n	8003188 <USART_SetConfig+0x384>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	2b06      	cmp	r3, #6
 8003140:	d020      	beq.n	8003184 <USART_SetConfig+0x380>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2b07      	cmp	r3, #7
 8003148:	d01a      	beq.n	8003180 <USART_SetConfig+0x37c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2b08      	cmp	r3, #8
 8003150:	d014      	beq.n	800317c <USART_SetConfig+0x378>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b09      	cmp	r3, #9
 8003158:	d00e      	beq.n	8003178 <USART_SetConfig+0x374>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2b0a      	cmp	r3, #10
 8003160:	d008      	beq.n	8003174 <USART_SetConfig+0x370>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2b0b      	cmp	r3, #11
 8003168:	d102      	bne.n	8003170 <USART_SetConfig+0x36c>
 800316a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316e:	e016      	b.n	800319e <USART_SetConfig+0x39a>
 8003170:	2301      	movs	r3, #1
 8003172:	e014      	b.n	800319e <USART_SetConfig+0x39a>
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	e012      	b.n	800319e <USART_SetConfig+0x39a>
 8003178:	2340      	movs	r3, #64	; 0x40
 800317a:	e010      	b.n	800319e <USART_SetConfig+0x39a>
 800317c:	2320      	movs	r3, #32
 800317e:	e00e      	b.n	800319e <USART_SetConfig+0x39a>
 8003180:	2310      	movs	r3, #16
 8003182:	e00c      	b.n	800319e <USART_SetConfig+0x39a>
 8003184:	230c      	movs	r3, #12
 8003186:	e00a      	b.n	800319e <USART_SetConfig+0x39a>
 8003188:	230a      	movs	r3, #10
 800318a:	e008      	b.n	800319e <USART_SetConfig+0x39a>
 800318c:	2308      	movs	r3, #8
 800318e:	e006      	b.n	800319e <USART_SetConfig+0x39a>
 8003190:	2306      	movs	r3, #6
 8003192:	e004      	b.n	800319e <USART_SetConfig+0x39a>
 8003194:	2304      	movs	r3, #4
 8003196:	e002      	b.n	800319e <USART_SetConfig+0x39a>
 8003198:	2302      	movs	r3, #2
 800319a:	e000      	b.n	800319e <USART_SetConfig+0x39a>
 800319c:	2301      	movs	r3, #1
 800319e:	4a79      	ldr	r2, [pc, #484]	; (8003384 <USART_SetConfig+0x580>)
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	005a      	lsls	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	441a      	add	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b6:	61bb      	str	r3, [r7, #24]
      break;
 80031b8:	e0b6      	b.n	8003328 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80031ba:	f7ff f925 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80031be:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d044      	beq.n	8003252 <USART_SetConfig+0x44e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d03e      	beq.n	800324e <USART_SetConfig+0x44a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d038      	beq.n	800324a <USART_SetConfig+0x446>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d032      	beq.n	8003246 <USART_SetConfig+0x442>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d02c      	beq.n	8003242 <USART_SetConfig+0x43e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d026      	beq.n	800323e <USART_SetConfig+0x43a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	2b06      	cmp	r3, #6
 80031f6:	d020      	beq.n	800323a <USART_SetConfig+0x436>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	2b07      	cmp	r3, #7
 80031fe:	d01a      	beq.n	8003236 <USART_SetConfig+0x432>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	2b08      	cmp	r3, #8
 8003206:	d014      	beq.n	8003232 <USART_SetConfig+0x42e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2b09      	cmp	r3, #9
 800320e:	d00e      	beq.n	800322e <USART_SetConfig+0x42a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	2b0a      	cmp	r3, #10
 8003216:	d008      	beq.n	800322a <USART_SetConfig+0x426>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2b0b      	cmp	r3, #11
 800321e:	d102      	bne.n	8003226 <USART_SetConfig+0x422>
 8003220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003224:	e016      	b.n	8003254 <USART_SetConfig+0x450>
 8003226:	2301      	movs	r3, #1
 8003228:	e014      	b.n	8003254 <USART_SetConfig+0x450>
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	e012      	b.n	8003254 <USART_SetConfig+0x450>
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	e010      	b.n	8003254 <USART_SetConfig+0x450>
 8003232:	2320      	movs	r3, #32
 8003234:	e00e      	b.n	8003254 <USART_SetConfig+0x450>
 8003236:	2310      	movs	r3, #16
 8003238:	e00c      	b.n	8003254 <USART_SetConfig+0x450>
 800323a:	230c      	movs	r3, #12
 800323c:	e00a      	b.n	8003254 <USART_SetConfig+0x450>
 800323e:	230a      	movs	r3, #10
 8003240:	e008      	b.n	8003254 <USART_SetConfig+0x450>
 8003242:	2308      	movs	r3, #8
 8003244:	e006      	b.n	8003254 <USART_SetConfig+0x450>
 8003246:	2306      	movs	r3, #6
 8003248:	e004      	b.n	8003254 <USART_SetConfig+0x450>
 800324a:	2304      	movs	r3, #4
 800324c:	e002      	b.n	8003254 <USART_SetConfig+0x450>
 800324e:	2302      	movs	r3, #2
 8003250:	e000      	b.n	8003254 <USART_SetConfig+0x450>
 8003252:	2301      	movs	r3, #1
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	005a      	lsls	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	441a      	add	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	61bb      	str	r3, [r7, #24]
      break;
 800326e:	e05b      	b.n	8003328 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d044      	beq.n	8003302 <USART_SetConfig+0x4fe>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	2b01      	cmp	r3, #1
 800327e:	d03e      	beq.n	80032fe <USART_SetConfig+0x4fa>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2b02      	cmp	r3, #2
 8003286:	d038      	beq.n	80032fa <USART_SetConfig+0x4f6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2b03      	cmp	r3, #3
 800328e:	d032      	beq.n	80032f6 <USART_SetConfig+0x4f2>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2b04      	cmp	r3, #4
 8003296:	d02c      	beq.n	80032f2 <USART_SetConfig+0x4ee>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2b05      	cmp	r3, #5
 800329e:	d026      	beq.n	80032ee <USART_SetConfig+0x4ea>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	2b06      	cmp	r3, #6
 80032a6:	d020      	beq.n	80032ea <USART_SetConfig+0x4e6>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2b07      	cmp	r3, #7
 80032ae:	d01a      	beq.n	80032e6 <USART_SetConfig+0x4e2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d014      	beq.n	80032e2 <USART_SetConfig+0x4de>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	2b09      	cmp	r3, #9
 80032be:	d00e      	beq.n	80032de <USART_SetConfig+0x4da>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	2b0a      	cmp	r3, #10
 80032c6:	d008      	beq.n	80032da <USART_SetConfig+0x4d6>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	2b0b      	cmp	r3, #11
 80032ce:	d102      	bne.n	80032d6 <USART_SetConfig+0x4d2>
 80032d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d4:	e016      	b.n	8003304 <USART_SetConfig+0x500>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e014      	b.n	8003304 <USART_SetConfig+0x500>
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	e012      	b.n	8003304 <USART_SetConfig+0x500>
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	e010      	b.n	8003304 <USART_SetConfig+0x500>
 80032e2:	2320      	movs	r3, #32
 80032e4:	e00e      	b.n	8003304 <USART_SetConfig+0x500>
 80032e6:	2310      	movs	r3, #16
 80032e8:	e00c      	b.n	8003304 <USART_SetConfig+0x500>
 80032ea:	230c      	movs	r3, #12
 80032ec:	e00a      	b.n	8003304 <USART_SetConfig+0x500>
 80032ee:	230a      	movs	r3, #10
 80032f0:	e008      	b.n	8003304 <USART_SetConfig+0x500>
 80032f2:	2308      	movs	r3, #8
 80032f4:	e006      	b.n	8003304 <USART_SetConfig+0x500>
 80032f6:	2306      	movs	r3, #6
 80032f8:	e004      	b.n	8003304 <USART_SetConfig+0x500>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e002      	b.n	8003304 <USART_SetConfig+0x500>
 80032fe:	2302      	movs	r3, #2
 8003300:	e000      	b.n	8003304 <USART_SetConfig+0x500>
 8003302:	2301      	movs	r3, #1
 8003304:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	005a      	lsls	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	441a      	add	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	61bb      	str	r3, [r7, #24]
      break;
 8003320:	e002      	b.n	8003328 <USART_SetConfig+0x524>
    default:
      ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	77bb      	strb	r3, [r7, #30]
      break;
 8003326:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d916      	bls.n	800335c <USART_SetConfig+0x558>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d212      	bcs.n	800335c <USART_SetConfig+0x558>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f023 030f 	bic.w	r3, r3, #15
 800333e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	b29a      	uxth	r2, r3
 800334c:	89fb      	ldrh	r3, [r7, #14]
 800334e:	4313      	orrs	r3, r2
 8003350:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	89fa      	ldrh	r2, [r7, #14]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	e001      	b.n	8003360 <USART_SetConfig+0x55c>
  }
  else
  {
    ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8003378:	7fbb      	ldrb	r3, [r7, #30]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	00f42400 	.word	0x00f42400

08003388 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003396:	f7fd fae5 	bl	8000964 <HAL_GetTick>
 800339a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d10e      	bne.n	80033c8 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80033aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fced 	bl	8002d98 <USART_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e01e      	b.n	8003406 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d10e      	bne.n	80033f4 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80033d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff fcd7 	bl	8002d98 <USART_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e008      	b.n	8003406 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_USARTEx_DisableFifoMode+0x16>
 8003420:	2302      	movs	r3, #2
 8003422:	e027      	b.n	8003474 <HAL_USARTEx_DisableFifoMode+0x66>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003452:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8003492:	2302      	movs	r3, #2
 8003494:	e02d      	b.n	80034f2 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f850 	bl	8003578 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800350e:	2302      	movs	r3, #2
 8003510:	e02d      	b.n	800356e <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f812 	bl	8003578 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	875a      	strh	r2, [r3, #58]	; 0x3a
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003594:	e02f      	b.n	80035f6 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003596:	2308      	movs	r3, #8
 8003598:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800359a:	2308      	movs	r3, #8
 800359c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	0e5b      	lsrs	r3, r3, #25
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	0f5b      	lsrs	r3, r3, #29
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80035be:	7bbb      	ldrb	r3, [r7, #14]
 80035c0:	7b3a      	ldrb	r2, [r7, #12]
 80035c2:	490f      	ldr	r1, [pc, #60]	; (8003600 <USARTEx_SetNbDataToProcess+0x88>)
 80035c4:	5c8a      	ldrb	r2, [r1, r2]
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	7b3a      	ldrb	r2, [r7, #12]
 80035cc:	490d      	ldr	r1, [pc, #52]	; (8003604 <USARTEx_SetNbDataToProcess+0x8c>)
 80035ce:	5c8a      	ldrb	r2, [r1, r2]
 80035d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	7b7a      	ldrb	r2, [r7, #13]
 80035de:	4908      	ldr	r1, [pc, #32]	; (8003600 <USARTEx_SetNbDataToProcess+0x88>)
 80035e0:	5c8a      	ldrb	r2, [r1, r2]
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	7b7a      	ldrb	r2, [r7, #13]
 80035e8:	4906      	ldr	r1, [pc, #24]	; (8003604 <USARTEx_SetNbDataToProcess+0x8c>)
 80035ea:	5c8a      	ldrb	r2, [r1, r2]
 80035ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	08003734 	.word	0x08003734
 8003604:	0800373c 	.word	0x0800373c

08003608 <__libc_init_array>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	4d0d      	ldr	r5, [pc, #52]	; (8003640 <__libc_init_array+0x38>)
 800360c:	4c0d      	ldr	r4, [pc, #52]	; (8003644 <__libc_init_array+0x3c>)
 800360e:	1b64      	subs	r4, r4, r5
 8003610:	10a4      	asrs	r4, r4, #2
 8003612:	2600      	movs	r6, #0
 8003614:	42a6      	cmp	r6, r4
 8003616:	d109      	bne.n	800362c <__libc_init_array+0x24>
 8003618:	4d0b      	ldr	r5, [pc, #44]	; (8003648 <__libc_init_array+0x40>)
 800361a:	4c0c      	ldr	r4, [pc, #48]	; (800364c <__libc_init_array+0x44>)
 800361c:	f000 f820 	bl	8003660 <_init>
 8003620:	1b64      	subs	r4, r4, r5
 8003622:	10a4      	asrs	r4, r4, #2
 8003624:	2600      	movs	r6, #0
 8003626:	42a6      	cmp	r6, r4
 8003628:	d105      	bne.n	8003636 <__libc_init_array+0x2e>
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003630:	4798      	blx	r3
 8003632:	3601      	adds	r6, #1
 8003634:	e7ee      	b.n	8003614 <__libc_init_array+0xc>
 8003636:	f855 3b04 	ldr.w	r3, [r5], #4
 800363a:	4798      	blx	r3
 800363c:	3601      	adds	r6, #1
 800363e:	e7f2      	b.n	8003626 <__libc_init_array+0x1e>
 8003640:	08003744 	.word	0x08003744
 8003644:	08003744 	.word	0x08003744
 8003648:	08003744 	.word	0x08003744
 800364c:	08003748 	.word	0x08003748

08003650 <memset>:
 8003650:	4402      	add	r2, r0
 8003652:	4603      	mov	r3, r0
 8003654:	4293      	cmp	r3, r2
 8003656:	d100      	bne.n	800365a <memset+0xa>
 8003658:	4770      	bx	lr
 800365a:	f803 1b01 	strb.w	r1, [r3], #1
 800365e:	e7f9      	b.n	8003654 <memset+0x4>

08003660 <_init>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	bf00      	nop
 8003664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003666:	bc08      	pop	{r3}
 8003668:	469e      	mov	lr, r3
 800366a:	4770      	bx	lr

0800366c <_fini>:
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	bf00      	nop
 8003670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003672:	bc08      	pop	{r3}
 8003674:	469e      	mov	lr, r3
 8003676:	4770      	bx	lr
